
build/tests/filesys/extended/dir-mk-tree:     file format elf32-i386


Disassembly of section .text:

08048094 <test_main>:
#include "tests/filesys/extended/mk-tree.h"
#include "tests/main.h"

void
test_main (void) 
{
 8048094:	83 ec 0c             	sub    $0xc,%esp
  make_tree (4, 3, 3, 4);
 8048097:	6a 04                	push   $0x4
 8048099:	6a 03                	push   $0x3
 804809b:	6a 03                	push   $0x3
 804809d:	6a 04                	push   $0x4
 804809f:	e8 e3 07 00 00       	call   8048887 <make_tree>
}
 80480a4:	83 c4 1c             	add    $0x1c,%esp
 80480a7:	c3                   	ret    

080480a8 <vmsg>:
const char *test_name;
bool quiet = false;

static void
vmsg (const char *format, va_list args, const char *suffix) 
{
 80480a8:	55                   	push   %ebp
 80480a9:	57                   	push   %edi
 80480aa:	56                   	push   %esi
 80480ab:	53                   	push   %ebx
 80480ac:	83 ec 1c             	sub    $0x1c,%esp
 80480af:	89 44 24 08          	mov    %eax,0x8(%esp)
 80480b3:	89 d5                	mov    %edx,%ebp
 80480b5:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
     that'll (typically) ensure that it gets sent to the console
     atomically.  Otherwise kernel messages like "foo: exit(0)"
     can end up being interleaved if we're unlucky. */
  static char buf[1024];

  snprintf (buf, sizeof buf, "(%s) ", test_name);
 80480b9:	ff 35 e4 c8 04 08    	pushl  0x804c8e4
 80480bf:	68 25 ae 04 08       	push   $0x804ae25
 80480c4:	68 00 04 00 00       	push   $0x400
 80480c9:	68 c0 c3 04 08       	push   $0x804c3c0
 80480ce:	e8 7e 15 00 00       	call   8049651 <snprintf>
  vsnprintf (buf + strlen (buf), sizeof buf - strlen (buf), format, args);
 80480d3:	be ff ff ff ff       	mov    $0xffffffff,%esi
 80480d8:	bf c0 c3 04 08       	mov    $0x804c3c0,%edi
 80480dd:	bb 00 00 00 00       	mov    $0x0,%ebx
 80480e2:	89 f1                	mov    %esi,%ecx
 80480e4:	89 d8                	mov    %ebx,%eax
 80480e6:	f2 ae                	repnz scas %es:(%edi),%al
 80480e8:	f7 d1                	not    %ecx
 80480ea:	83 e9 01             	sub    $0x1,%ecx
 80480ed:	55                   	push   %ebp
 80480ee:	ff 74 24 1c          	pushl  0x1c(%esp)
 80480f2:	bd 00 04 00 00       	mov    $0x400,%ebp
 80480f7:	89 e8                	mov    %ebp,%eax
 80480f9:	29 c8                	sub    %ecx,%eax
 80480fb:	50                   	push   %eax
 80480fc:	81 c1 c0 c3 04 08    	add    $0x804c3c0,%ecx
 8048102:	51                   	push   %ecx
 8048103:	e8 dc 14 00 00       	call   80495e4 <vsnprintf>
  strlcpy (buf + strlen (buf), suffix, sizeof buf - strlen (buf));
 8048108:	bf c0 c3 04 08       	mov    $0x804c3c0,%edi
 804810d:	89 f1                	mov    %esi,%ecx
 804810f:	89 d8                	mov    %ebx,%eax
 8048111:	f2 ae                	repnz scas %es:(%edi),%al
 8048113:	f7 d1                	not    %ecx
 8048115:	83 e9 01             	sub    $0x1,%ecx
 8048118:	83 c4 1c             	add    $0x1c,%esp
 804811b:	29 cd                	sub    %ecx,%ebp
 804811d:	55                   	push   %ebp
 804811e:	ff 74 24 14          	pushl  0x14(%esp)
 8048122:	81 c1 c0 c3 04 08    	add    $0x804c3c0,%ecx
 8048128:	51                   	push   %ecx
 8048129:	e8 fd 1d 00 00       	call   8049f2b <strlcpy>
  write (STDOUT_FILENO, buf, strlen (buf));
 804812e:	bf c0 c3 04 08       	mov    $0x804c3c0,%edi
 8048133:	89 f1                	mov    %esi,%ecx
 8048135:	89 d8                	mov    %ebx,%eax
 8048137:	f2 ae                	repnz scas %es:(%edi),%al
 8048139:	f7 d1                	not    %ecx
 804813b:	83 e9 01             	sub    $0x1,%ecx
 804813e:	83 c4 0c             	add    $0xc,%esp
 8048141:	51                   	push   %ecx
 8048142:	68 c0 c3 04 08       	push   $0x804c3c0
 8048147:	6a 01                	push   $0x1
 8048149:	e8 8f 22 00 00       	call   804a3dd <write>
}
 804814e:	83 c4 2c             	add    $0x2c,%esp
 8048151:	5b                   	pop    %ebx
 8048152:	5e                   	pop    %esi
 8048153:	5f                   	pop    %edi
 8048154:	5d                   	pop    %ebp
 8048155:	c3                   	ret    

08048156 <msg>:
void
msg (const char *format, ...) 
{
  va_list args;

  if (quiet)
 8048156:	80 3d a0 c3 04 08 00 	cmpb   $0x0,0x804c3a0
 804815d:	75 18                	jne    8048177 <msg+0x21>
  write (STDOUT_FILENO, buf, strlen (buf));
}

void
msg (const char *format, ...) 
{
 804815f:	83 ec 0c             	sub    $0xc,%esp
  va_list args;

  if (quiet)
    return;
  va_start (args, format);
  vmsg (format, args, "\n");
 8048162:	b9 33 ae 04 08       	mov    $0x804ae33,%ecx
 8048167:	8d 54 24 14          	lea    0x14(%esp),%edx
 804816b:	8b 44 24 10          	mov    0x10(%esp),%eax
 804816f:	e8 34 ff ff ff       	call   80480a8 <vmsg>
  va_end (args);
}
 8048174:	83 c4 0c             	add    $0xc,%esp
 8048177:	f3 c3                	repz ret 

08048179 <fail>:

void
fail (const char *format, ...) 
{
 8048179:	83 ec 0c             	sub    $0xc,%esp
  va_list args;

  va_start (args, format);
  vmsg (format, args, ": FAILED\n");
 804817c:	b9 2b ae 04 08       	mov    $0x804ae2b,%ecx
 8048181:	8d 54 24 14          	lea    0x14(%esp),%edx
 8048185:	8b 44 24 10          	mov    0x10(%esp),%eax
 8048189:	e8 1a ff ff ff       	call   80480a8 <vmsg>
  va_end (args);

  exit (1);
 804818e:	83 ec 0c             	sub    $0xc,%esp
 8048191:	6a 01                	push   $0x1
 8048193:	e8 ac 21 00 00       	call   804a344 <exit>

08048198 <shuffle>:
    }
}

void
shuffle (void *buf_, size_t cnt, size_t size) 
{
 8048198:	55                   	push   %ebp
 8048199:	57                   	push   %edi
 804819a:	56                   	push   %esi
 804819b:	53                   	push   %ebx
 804819c:	83 ec 1c             	sub    $0x1c,%esp
 804819f:	8b 44 24 34          	mov    0x34(%esp),%eax
  char *buf = buf_;
  size_t i;

  for (i = 0; i < cnt; i++)
 80481a3:	85 c0                	test   %eax,%eax
 80481a5:	74 71                	je     8048218 <shuffle+0x80>
 80481a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80481ab:	be 00 00 00 00       	mov    $0x0,%esi
 80481b0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 80481b7:	00 
    {
      size_t j = i + random_ulong () % (cnt - i);
 80481b8:	e8 9b 09 00 00       	call   8048b58 <random_ulong>
      swap (buf + i * size, buf + j * size, size);
 80481bd:	ba 00 00 00 00       	mov    $0x0,%edx
 80481c2:	f7 74 24 0c          	divl   0xc(%esp)
 80481c6:	03 54 24 08          	add    0x8(%esp),%edx
 80481ca:	0f af 54 24 38       	imul   0x38(%esp),%edx
 80481cf:	89 f5                	mov    %esi,%ebp
{
  uint8_t *a = a_;
  uint8_t *b = b_;
  size_t i;

  for (i = 0; i < size; i++) 
 80481d1:	83 7c 24 38 00       	cmpl   $0x0,0x38(%esp)
 80481d6:	74 30                	je     8048208 <shuffle+0x70>
 80481d8:	89 f1                	mov    %esi,%ecx
 80481da:	03 4c 24 30          	add    0x30(%esp),%ecx
 80481de:	89 f7                	mov    %esi,%edi
 80481e0:	03 7c 24 38          	add    0x38(%esp),%edi
 80481e4:	03 7c 24 30          	add    0x30(%esp),%edi
    {
      uint8_t t = a[i];
 80481e8:	0f b6 19             	movzbl (%ecx),%ebx
 80481eb:	88 5c 24 07          	mov    %bl,0x7(%esp)
 80481ef:	89 c8                	mov    %ecx,%eax
 80481f1:	29 e8                	sub    %ebp,%eax
      a[i] = b[i];
 80481f3:	0f b6 1c 10          	movzbl (%eax,%edx,1),%ebx
 80481f7:	88 19                	mov    %bl,(%ecx)
      b[i] = t;
 80481f9:	0f b6 5c 24 07       	movzbl 0x7(%esp),%ebx
 80481fe:	88 1c 10             	mov    %bl,(%eax,%edx,1)
 8048201:	83 c1 01             	add    $0x1,%ecx
{
  uint8_t *a = a_;
  uint8_t *b = b_;
  size_t i;

  for (i = 0; i < size; i++) 
 8048204:	39 f9                	cmp    %edi,%ecx
 8048206:	75 e0                	jne    80481e8 <shuffle+0x50>
shuffle (void *buf_, size_t cnt, size_t size) 
{
  char *buf = buf_;
  size_t i;

  for (i = 0; i < cnt; i++)
 8048208:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
 804820d:	03 74 24 38          	add    0x38(%esp),%esi
 8048211:	83 6c 24 0c 01       	subl   $0x1,0xc(%esp)
 8048216:	75 a0                	jne    80481b8 <shuffle+0x20>
    {
      size_t j = i + random_ulong () % (cnt - i);
      swap (buf + i * size, buf + j * size, size);
    }
}
 8048218:	83 c4 1c             	add    $0x1c,%esp
 804821b:	5b                   	pop    %ebx
 804821c:	5e                   	pop    %esi
 804821d:	5f                   	pop    %edi
 804821e:	5d                   	pop    %ebp
 804821f:	c3                   	ret    

08048220 <exec_children>:

void
exec_children (const char *child_name, pid_t pids[], size_t child_cnt) 
{
 8048220:	55                   	push   %ebp
 8048221:	57                   	push   %edi
 8048222:	56                   	push   %esi
 8048223:	53                   	push   %ebx
 8048224:	81 ec 8c 00 00 00    	sub    $0x8c,%esp
 804822a:	8b ac 24 a4 00 00 00 	mov    0xa4(%esp),%ebp
 8048231:	8b bc 24 a8 00 00 00 	mov    0xa8(%esp),%edi
  size_t i;

  for (i = 0; i < child_cnt; i++) 
 8048238:	85 ff                	test   %edi,%edi
 804823a:	74 5a                	je     8048296 <exec_children+0x76>
 804823c:	bb 00 00 00 00       	mov    $0x0,%ebx
    {
      char cmd_line[128];
      snprintf (cmd_line, sizeof cmd_line, "%s %zu", child_name, i);
 8048241:	89 e6                	mov    %esp,%esi
 8048243:	83 ec 0c             	sub    $0xc,%esp
 8048246:	53                   	push   %ebx
 8048247:	ff b4 24 b0 00 00 00 	pushl  0xb0(%esp)
 804824e:	68 35 ae 04 08       	push   $0x804ae35
 8048253:	68 80 00 00 00       	push   $0x80
 8048258:	56                   	push   %esi
 8048259:	e8 f3 13 00 00       	call   8049651 <snprintf>
      CHECK ((pids[i] = exec (cmd_line)) != PID_ERROR,
 804825e:	83 c3 01             	add    $0x1,%ebx
 8048261:	83 c4 20             	add    $0x20,%esp
 8048264:	56                   	push   %esi
 8048265:	57                   	push   %edi
 8048266:	53                   	push   %ebx
 8048267:	68 3c ae 04 08       	push   $0x804ae3c
 804826c:	e8 e5 fe ff ff       	call   8048156 <msg>
 8048271:	89 34 24             	mov    %esi,(%esp)
 8048274:	e8 f0 20 00 00       	call   804a369 <exec>
 8048279:	89 44 9d fc          	mov    %eax,-0x4(%ebp,%ebx,4)
 804827d:	83 c4 10             	add    $0x10,%esp
 8048280:	83 f8 ff             	cmp    $0xffffffff,%eax
 8048283:	75 0d                	jne    8048292 <exec_children+0x72>
 8048285:	54                   	push   %esp
 8048286:	57                   	push   %edi
 8048287:	53                   	push   %ebx
 8048288:	68 3c ae 04 08       	push   $0x804ae3c
 804828d:	e8 e7 fe ff ff       	call   8048179 <fail>
void
exec_children (const char *child_name, pid_t pids[], size_t child_cnt) 
{
  size_t i;

  for (i = 0; i < child_cnt; i++) 
 8048292:	39 df                	cmp    %ebx,%edi
 8048294:	75 ad                	jne    8048243 <exec_children+0x23>
      char cmd_line[128];
      snprintf (cmd_line, sizeof cmd_line, "%s %zu", child_name, i);
      CHECK ((pids[i] = exec (cmd_line)) != PID_ERROR,
             "exec child %zu of %zu: \"%s\"", i + 1, child_cnt, cmd_line);
    }
}
 8048296:	81 c4 8c 00 00 00    	add    $0x8c,%esp
 804829c:	5b                   	pop    %ebx
 804829d:	5e                   	pop    %esi
 804829e:	5f                   	pop    %edi
 804829f:	5d                   	pop    %ebp
 80482a0:	c3                   	ret    

080482a1 <wait_children>:

void
wait_children (pid_t pids[], size_t child_cnt) 
{
 80482a1:	55                   	push   %ebp
 80482a2:	57                   	push   %edi
 80482a3:	56                   	push   %esi
 80482a4:	53                   	push   %ebx
 80482a5:	83 ec 0c             	sub    $0xc,%esp
 80482a8:	8b 6c 24 24          	mov    0x24(%esp),%ebp
  size_t i;
  
  for (i = 0; i < child_cnt; i++) 
 80482ac:	85 ed                	test   %ebp,%ebp
 80482ae:	74 47                	je     80482f7 <wait_children+0x56>
 80482b0:	bb 00 00 00 00       	mov    $0x0,%ebx
    {
      int status = wait (pids[i]);
 80482b5:	83 ec 0c             	sub    $0xc,%esp
 80482b8:	8b 44 24 2c          	mov    0x2c(%esp),%eax
 80482bc:	ff 34 98             	pushl  (%eax,%ebx,4)
 80482bf:	e8 b2 20 00 00       	call   804a376 <wait>
 80482c4:	89 c7                	mov    %eax,%edi
      CHECK (status == (int) i,
 80482c6:	8d 73 01             	lea    0x1(%ebx),%esi
 80482c9:	89 1c 24             	mov    %ebx,(%esp)
 80482cc:	50                   	push   %eax
 80482cd:	55                   	push   %ebp
 80482ce:	56                   	push   %esi
 80482cf:	68 e0 b0 04 08       	push   $0x804b0e0
 80482d4:	e8 7d fe ff ff       	call   8048156 <msg>
 80482d9:	83 c4 20             	add    $0x20,%esp
 80482dc:	39 df                	cmp    %ebx,%edi
 80482de:	74 11                	je     80482f1 <wait_children+0x50>
 80482e0:	83 ec 0c             	sub    $0xc,%esp
 80482e3:	53                   	push   %ebx
 80482e4:	57                   	push   %edi
 80482e5:	55                   	push   %ebp
 80482e6:	56                   	push   %esi
 80482e7:	68 e0 b0 04 08       	push   $0x804b0e0
 80482ec:	e8 88 fe ff ff       	call   8048179 <fail>
 80482f1:	89 f3                	mov    %esi,%ebx
void
wait_children (pid_t pids[], size_t child_cnt) 
{
  size_t i;
  
  for (i = 0; i < child_cnt; i++) 
 80482f3:	39 f5                	cmp    %esi,%ebp
 80482f5:	75 be                	jne    80482b5 <wait_children+0x14>
      int status = wait (pids[i]);
      CHECK (status == (int) i,
             "wait for child %zu of %zu returned %d (expected %zu)",
             i + 1, child_cnt, status, i);
    }
}
 80482f7:	83 c4 0c             	add    $0xc,%esp
 80482fa:	5b                   	pop    %ebx
 80482fb:	5e                   	pop    %esi
 80482fc:	5f                   	pop    %edi
 80482fd:	5d                   	pop    %ebp
 80482fe:	c3                   	ret    

080482ff <compare_bytes>:
}

void
compare_bytes (const void *read_data_, const void *expected_data_, size_t size,
               size_t ofs, const char *file_name) 
{
 80482ff:	55                   	push   %ebp
 8048300:	57                   	push   %edi
 8048301:	56                   	push   %esi
 8048302:	53                   	push   %ebx
 8048303:	83 ec 20             	sub    $0x20,%esp
 8048306:	8b 5c 24 34          	mov    0x34(%esp),%ebx
 804830a:	8b 74 24 38          	mov    0x38(%esp),%esi
 804830e:	8b 7c 24 3c          	mov    0x3c(%esp),%edi
  const uint8_t *read_data = read_data_;
  const uint8_t *expected_data = expected_data_;
  size_t i, j;
  size_t show_cnt;

  if (!memcmp (read_data, expected_data, size))
 8048312:	57                   	push   %edi
 8048313:	56                   	push   %esi
 8048314:	53                   	push   %ebx
 8048315:	e8 ec 16 00 00       	call   8049a06 <memcmp>
 804831a:	83 c4 10             	add    $0x10,%esp
 804831d:	85 c0                	test   %eax,%eax
 804831f:	0f 84 bf 01 00 00    	je     80484e4 <compare_bytes+0x1e5>
    return;
  
  for (i = 0; i < size; i++)
 8048325:	85 ff                	test   %edi,%edi
 8048327:	0f 84 7e 01 00 00    	je     80484ab <compare_bytes+0x1ac>
    if (read_data[i] != expected_data[i])
 804832d:	0f b6 06             	movzbl (%esi),%eax
 8048330:	38 03                	cmp    %al,(%ebx)
 8048332:	0f 85 18 01 00 00    	jne    8048450 <compare_bytes+0x151>
 8048338:	ba 00 00 00 00       	mov    $0x0,%edx
 804833d:	eb 0d                	jmp    804834c <compare_bytes+0x4d>
 804833f:	0f b6 44 16 01       	movzbl 0x1(%esi,%edx,1),%eax
 8048344:	38 44 13 01          	cmp    %al,0x1(%ebx,%edx,1)
 8048348:	75 0b                	jne    8048355 <compare_bytes+0x56>
  size_t show_cnt;

  if (!memcmp (read_data, expected_data, size))
    return;
  
  for (i = 0; i < size; i++)
 804834a:	89 ea                	mov    %ebp,%edx
 804834c:	8d 6a 01             	lea    0x1(%edx),%ebp
 804834f:	39 ef                	cmp    %ebp,%edi
 8048351:	75 ec                	jne    804833f <compare_bytes+0x40>
 8048353:	89 fd                	mov    %edi,%ebp
    if (read_data[i] != expected_data[i])
      break;
  for (j = i + 1; j < size; j++)
 8048355:	8d 42 02             	lea    0x2(%edx),%eax
 8048358:	39 c7                	cmp    %eax,%edi
 804835a:	76 1d                	jbe    8048379 <compare_bytes+0x7a>
    if (read_data[j] == expected_data[j])
 804835c:	0f b6 4c 16 02       	movzbl 0x2(%esi,%edx,1),%ecx
 8048361:	38 4c 13 02          	cmp    %cl,0x2(%ebx,%edx,1)
 8048365:	75 0b                	jne    8048372 <compare_bytes+0x73>
 8048367:	eb 10                	jmp    8048379 <compare_bytes+0x7a>
 8048369:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
 804836d:	38 0c 03             	cmp    %cl,(%ebx,%eax,1)
 8048370:	74 07                	je     8048379 <compare_bytes+0x7a>
    return;
  
  for (i = 0; i < size; i++)
    if (read_data[i] != expected_data[i])
      break;
  for (j = i + 1; j < size; j++)
 8048372:	83 c0 01             	add    $0x1,%eax
 8048375:	39 c7                	cmp    %eax,%edi
 8048377:	77 f0                	ja     8048369 <compare_bytes+0x6a>
    if (read_data[j] == expected_data[j])
      break;

  quiet = false;
 8048379:	c6 05 a0 c3 04 08 00 	movb   $0x0,0x804c3a0
  msg ("%zu bytes read starting at offset %zu in \"%s\" differ "
 8048380:	89 ef                	mov    %ebp,%edi
 8048382:	03 7c 24 3c          	add    0x3c(%esp),%edi
 8048386:	29 e8                	sub    %ebp,%eax
 8048388:	ff 74 24 40          	pushl  0x40(%esp)
 804838c:	57                   	push   %edi
 804838d:	89 44 24 14          	mov    %eax,0x14(%esp)
 8048391:	50                   	push   %eax
 8048392:	68 18 b1 04 08       	push   $0x804b118
 8048397:	e8 ba fd ff ff       	call   8048156 <msg>
       "from expected.", j - i, ofs + i, file_name);
  show_cnt = j - i;
  if (j - i > 64) 
 804839c:	83 c4 10             	add    $0x10,%esp
  for (j = i + 1; j < size; j++)
    if (read_data[j] == expected_data[j])
      break;

  quiet = false;
  msg ("%zu bytes read starting at offset %zu in \"%s\" differ "
 804839f:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80483a3:	89 44 24 08          	mov    %eax,0x8(%esp)
       "from expected.", j - i, ofs + i, file_name);
  show_cnt = j - i;
  if (j - i > 64) 
 80483a7:	83 f8 40             	cmp    $0x40,%eax
 80483aa:	76 1a                	jbe    80483c6 <compare_bytes+0xc7>
    {
      show_cnt = 64;
      msg ("Showing first differing %zu bytes.", show_cnt);
 80483ac:	83 ec 08             	sub    $0x8,%esp
 80483af:	6a 40                	push   $0x40
 80483b1:	68 5c b1 04 08       	push   $0x804b15c
 80483b6:	e8 9b fd ff ff       	call   8048156 <msg>
 80483bb:	83 c4 10             	add    $0x10,%esp
  msg ("%zu bytes read starting at offset %zu in \"%s\" differ "
       "from expected.", j - i, ofs + i, file_name);
  show_cnt = j - i;
  if (j - i > 64) 
    {
      show_cnt = 64;
 80483be:	c7 44 24 08 40 00 00 	movl   $0x40,0x8(%esp)
 80483c5:	00 
      msg ("Showing first differing %zu bytes.", show_cnt);
    }
  msg ("Data actually read:");
 80483c6:	83 ec 0c             	sub    $0xc,%esp
 80483c9:	68 58 ae 04 08       	push   $0x804ae58
 80483ce:	e8 83 fd ff ff       	call   8048156 <msg>
  hex_dump (ofs + i, read_data + i, show_cnt, true);
 80483d3:	6a 01                	push   $0x1
 80483d5:	ff 74 24 1c          	pushl  0x1c(%esp)
 80483d9:	01 eb                	add    %ebp,%ebx
 80483db:	53                   	push   %ebx
 80483dc:	57                   	push   %edi
 80483dd:	e8 8c 12 00 00       	call   804966e <hex_dump>
  msg ("Expected data:");
 80483e2:	83 c4 14             	add    $0x14,%esp
 80483e5:	68 6c ae 04 08       	push   $0x804ae6c
 80483ea:	e8 67 fd ff ff       	call   8048156 <msg>
  hex_dump (ofs + i, expected_data + i, show_cnt, true);
 80483ef:	6a 01                	push   $0x1
 80483f1:	ff 74 24 1c          	pushl  0x1c(%esp)
 80483f5:	01 ee                	add    %ebp,%esi
 80483f7:	56                   	push   %esi
 80483f8:	57                   	push   %edi
 80483f9:	e8 70 12 00 00       	call   804966e <hex_dump>
  fail ("%zu bytes read starting at offset %zu in \"%s\" differ "
 80483fe:	83 c4 20             	add    $0x20,%esp
 8048401:	ff 74 24 40          	pushl  0x40(%esp)
 8048405:	57                   	push   %edi
 8048406:	ff 74 24 14          	pushl  0x14(%esp)
 804840a:	68 80 b1 04 08       	push   $0x804b180
 804840f:	e8 65 fd ff ff       	call   8048179 <fail>
      break;
  for (j = i + 1; j < size; j++)
    if (read_data[j] == expected_data[j])
      break;

  quiet = false;
 8048414:	c6 05 a0 c3 04 08 00 	movb   $0x0,0x804c3a0
  msg ("%zu bytes read starting at offset %zu in \"%s\" differ "
 804841b:	ff 74 24 40          	pushl  0x40(%esp)
 804841f:	ff 74 24 40          	pushl  0x40(%esp)
 8048423:	6a 01                	push   $0x1
 8048425:	68 18 b1 04 08       	push   $0x804b118
 804842a:	e8 27 fd ff ff       	call   8048156 <msg>
 804842f:	83 c4 10             	add    $0x10,%esp
 8048432:	8b 7c 24 3c          	mov    0x3c(%esp),%edi
 8048436:	bd 00 00 00 00       	mov    $0x0,%ebp
 804843b:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
 8048442:	00 
 8048443:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 804844a:	00 
 804844b:	e9 76 ff ff ff       	jmp    80483c6 <compare_bytes+0xc7>
    return;
  
  for (i = 0; i < size; i++)
    if (read_data[i] != expected_data[i])
      break;
  for (j = i + 1; j < size; j++)
 8048450:	83 ff 01             	cmp    $0x1,%edi
 8048453:	77 3e                	ja     8048493 <compare_bytes+0x194>
 8048455:	eb bd                	jmp    8048414 <compare_bytes+0x115>
    if (read_data[j] == expected_data[j])
      break;

  quiet = false;
 8048457:	c6 05 a0 c3 04 08 00 	movb   $0x0,0x804c3a0
  msg ("%zu bytes read starting at offset %zu in \"%s\" differ "
 804845e:	ff 74 24 40          	pushl  0x40(%esp)
 8048462:	ff 74 24 40          	pushl  0x40(%esp)
 8048466:	6a 01                	push   $0x1
 8048468:	68 18 b1 04 08       	push   $0x804b118
 804846d:	e8 e4 fc ff ff       	call   8048156 <msg>
 8048472:	83 c4 10             	add    $0x10,%esp
 8048475:	8b 7c 24 3c          	mov    0x3c(%esp),%edi
 8048479:	bd 00 00 00 00       	mov    $0x0,%ebp
 804847e:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
 8048485:	00 
 8048486:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 804848d:	00 
 804848e:	e9 33 ff ff ff       	jmp    80483c6 <compare_bytes+0xc7>
  
  for (i = 0; i < size; i++)
    if (read_data[i] != expected_data[i])
      break;
  for (j = i + 1; j < size; j++)
    if (read_data[j] == expected_data[j])
 8048493:	0f b6 46 01          	movzbl 0x1(%esi),%eax
 8048497:	38 43 01             	cmp    %al,0x1(%ebx)
 804849a:	74 bb                	je     8048457 <compare_bytes+0x158>
 804849c:	bd 00 00 00 00       	mov    $0x0,%ebp
    return;
  
  for (i = 0; i < size; i++)
    if (read_data[i] != expected_data[i])
      break;
  for (j = i + 1; j < size; j++)
 80484a1:	b8 01 00 00 00       	mov    $0x1,%eax
 80484a6:	e9 c7 fe ff ff       	jmp    8048372 <compare_bytes+0x73>
    if (read_data[j] == expected_data[j])
      break;

  quiet = false;
 80484ab:	c6 05 a0 c3 04 08 00 	movb   $0x0,0x804c3a0
  msg ("%zu bytes read starting at offset %zu in \"%s\" differ "
 80484b2:	ff 74 24 40          	pushl  0x40(%esp)
 80484b6:	ff 74 24 40          	pushl  0x40(%esp)
 80484ba:	6a 01                	push   $0x1
 80484bc:	68 18 b1 04 08       	push   $0x804b118
 80484c1:	e8 90 fc ff ff       	call   8048156 <msg>
 80484c6:	83 c4 10             	add    $0x10,%esp
 80484c9:	89 fd                	mov    %edi,%ebp
 80484cb:	8b 7c 24 3c          	mov    0x3c(%esp),%edi
 80484cf:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
 80484d6:	00 
 80484d7:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 80484de:	00 
 80484df:	e9 e2 fe ff ff       	jmp    80483c6 <compare_bytes+0xc7>
  hex_dump (ofs + i, read_data + i, show_cnt, true);
  msg ("Expected data:");
  hex_dump (ofs + i, expected_data + i, show_cnt, true);
  fail ("%zu bytes read starting at offset %zu in \"%s\" differ "
        "from expected", j - i, ofs + i, file_name);
}
 80484e4:	83 c4 1c             	add    $0x1c,%esp
 80484e7:	5b                   	pop    %ebx
 80484e8:	5e                   	pop    %esi
 80484e9:	5f                   	pop    %edi
 80484ea:	5d                   	pop    %ebp
 80484eb:	c3                   	ret    

080484ec <check_file_handle>:
}

void
check_file_handle (int fd,
                   const char *file_name, const void *buf_, size_t size) 
{
 80484ec:	55                   	push   %ebp
 80484ed:	57                   	push   %edi
 80484ee:	56                   	push   %esi
 80484ef:	53                   	push   %ebx
 80484f0:	81 ec 28 02 00 00    	sub    $0x228,%esp
 80484f6:	8b bc 24 48 02 00 00 	mov    0x248(%esp),%edi
  size_t file_size;

  /* Warn about file of wrong size.  Don't fail yet because we
     may still be able to get more information by reading the
     file. */
  file_size = filesize (fd);
 80484fd:	ff b4 24 3c 02 00 00 	pushl  0x23c(%esp)
 8048504:	e8 b0 1e 00 00       	call   804a3b9 <filesize>
 8048509:	89 44 24 1c          	mov    %eax,0x1c(%esp)
  if (file_size != size)
 804850d:	83 c4 10             	add    $0x10,%esp
 8048510:	39 f8                	cmp    %edi,%eax
 8048512:	0f 84 be 00 00 00    	je     80485d6 <check_file_handle+0xea>
    msg ("size of %s (%zu) differs from expected (%zu)",
 8048518:	57                   	push   %edi
 8048519:	50                   	push   %eax
 804851a:	ff b4 24 3c 02 00 00 	pushl  0x23c(%esp)
 8048521:	68 c4 b1 04 08       	push   $0x804b1c4
 8048526:	e8 2b fc ff ff       	call   8048156 <msg>
          file_name, file_size, size);

  /* Read the file block-by-block, comparing data as we go. */
  while (ofs < size)
 804852b:	83 c4 10             	add    $0x10,%esp
 804852e:	85 ff                	test   %edi,%edi
 8048530:	74 75                	je     80485a7 <check_file_handle+0xbb>
}

void
check_file_handle (int fd,
                   const char *file_name, const void *buf_, size_t size) 
{
 8048532:	be 00 00 00 00       	mov    $0x0,%esi

      block_size = size - ofs;
      if (block_size > sizeof block)
        block_size = sizeof block;

      ret_val = read (fd, block, block_size);
 8048537:	8d 6c 24 10          	lea    0x10(%esp),%ebp
  while (ofs < size)
    {
      char block[512];
      size_t block_size, ret_val;

      block_size = size - ofs;
 804853b:	89 fb                	mov    %edi,%ebx
 804853d:	29 f3                	sub    %esi,%ebx
 804853f:	81 fb 00 02 00 00    	cmp    $0x200,%ebx
 8048545:	b8 00 02 00 00       	mov    $0x200,%eax
 804854a:	0f 47 d8             	cmova  %eax,%ebx
      if (block_size > sizeof block)
        block_size = sizeof block;

      ret_val = read (fd, block, block_size);
 804854d:	83 ec 04             	sub    $0x4,%esp
 8048550:	53                   	push   %ebx
 8048551:	55                   	push   %ebp
 8048552:	ff b4 24 3c 02 00 00 	pushl  0x23c(%esp)
 8048559:	e8 68 1e 00 00       	call   804a3c6 <read>
      if (ret_val != block_size)
 804855e:	83 c4 10             	add    $0x10,%esp
 8048561:	39 c3                	cmp    %eax,%ebx
 8048563:	74 17                	je     804857c <check_file_handle+0x90>
        fail ("read of %zu bytes at offset %zu in \"%s\" returned %zu",
 8048565:	83 ec 0c             	sub    $0xc,%esp
 8048568:	50                   	push   %eax
 8048569:	ff b4 24 44 02 00 00 	pushl  0x244(%esp)
 8048570:	56                   	push   %esi
 8048571:	53                   	push   %ebx
 8048572:	68 f4 b1 04 08       	push   $0x804b1f4
 8048577:	e8 fd fb ff ff       	call   8048179 <fail>
              block_size, ofs, file_name, ret_val);

      compare_bytes (block, buf + ofs, block_size, ofs, file_name);
 804857c:	83 ec 0c             	sub    $0xc,%esp
 804857f:	ff b4 24 40 02 00 00 	pushl  0x240(%esp)
 8048586:	56                   	push   %esi
 8048587:	53                   	push   %ebx
 8048588:	89 f0                	mov    %esi,%eax
 804858a:	03 84 24 50 02 00 00 	add    0x250(%esp),%eax
 8048591:	50                   	push   %eax
 8048592:	55                   	push   %ebp
 8048593:	e8 67 fd ff ff       	call   80482ff <compare_bytes>
      ofs += block_size;
 8048598:	01 de                	add    %ebx,%esi
  if (file_size != size)
    msg ("size of %s (%zu) differs from expected (%zu)",
          file_name, file_size, size);

  /* Read the file block-by-block, comparing data as we go. */
  while (ofs < size)
 804859a:	83 c4 20             	add    $0x20,%esp
 804859d:	39 f7                	cmp    %esi,%edi
 804859f:	77 9a                	ja     804853b <check_file_handle+0x4f>
      compare_bytes (block, buf + ofs, block_size, ofs, file_name);
      ofs += block_size;
    }

  /* Now fail due to wrong file size. */
  if (file_size != size)
 80485a1:	39 7c 24 0c          	cmp    %edi,0xc(%esp)
 80485a5:	74 16                	je     80485bd <check_file_handle+0xd1>
    fail ("size of %s (%zu) differs from expected (%zu)",
 80485a7:	57                   	push   %edi
 80485a8:	ff 74 24 10          	pushl  0x10(%esp)
 80485ac:	ff b4 24 3c 02 00 00 	pushl  0x23c(%esp)
 80485b3:	68 c4 b1 04 08       	push   $0x804b1c4
 80485b8:	e8 bc fb ff ff       	call   8048179 <fail>
          file_name, file_size, size);

  msg ("verified contents of \"%s\"", file_name);
 80485bd:	83 ec 08             	sub    $0x8,%esp
 80485c0:	ff b4 24 3c 02 00 00 	pushl  0x23c(%esp)
 80485c7:	68 7b ae 04 08       	push   $0x804ae7b
 80485cc:	e8 85 fb ff ff       	call   8048156 <msg>
}
 80485d1:	83 c4 10             	add    $0x10,%esp
 80485d4:	eb 0d                	jmp    80485e3 <check_file_handle+0xf7>
  if (file_size != size)
    msg ("size of %s (%zu) differs from expected (%zu)",
          file_name, file_size, size);

  /* Read the file block-by-block, comparing data as we go. */
  while (ofs < size)
 80485d6:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
 80485db:	0f 85 51 ff ff ff    	jne    8048532 <check_file_handle+0x46>
 80485e1:	eb da                	jmp    80485bd <check_file_handle+0xd1>
  if (file_size != size)
    fail ("size of %s (%zu) differs from expected (%zu)",
          file_name, file_size, size);

  msg ("verified contents of \"%s\"", file_name);
}
 80485e3:	81 c4 1c 02 00 00    	add    $0x21c,%esp
 80485e9:	5b                   	pop    %ebx
 80485ea:	5e                   	pop    %esi
 80485eb:	5f                   	pop    %edi
 80485ec:	5d                   	pop    %ebp
 80485ed:	c3                   	ret    

080485ee <check_file>:

void
check_file (const char *file_name, const void *buf, size_t size) 
{
 80485ee:	56                   	push   %esi
 80485ef:	53                   	push   %ebx
 80485f0:	83 ec 0c             	sub    $0xc,%esp
 80485f3:	8b 5c 24 18          	mov    0x18(%esp),%ebx
  int fd;

  CHECK ((fd = open (file_name)) > 1, "open \"%s\" for verification",
 80485f7:	53                   	push   %ebx
 80485f8:	68 95 ae 04 08       	push   $0x804ae95
 80485fd:	e8 54 fb ff ff       	call   8048156 <msg>
 8048602:	89 1c 24             	mov    %ebx,(%esp)
 8048605:	e8 a2 1d 00 00       	call   804a3ac <open>
 804860a:	83 c4 10             	add    $0x10,%esp
 804860d:	83 f8 01             	cmp    $0x1,%eax
 8048610:	7f 0e                	jg     8048620 <check_file+0x32>
 8048612:	83 ec 08             	sub    $0x8,%esp
 8048615:	53                   	push   %ebx
 8048616:	68 95 ae 04 08       	push   $0x804ae95
 804861b:	e8 59 fb ff ff       	call   8048179 <fail>
 8048620:	89 c6                	mov    %eax,%esi
         file_name);
  check_file_handle (fd, file_name, buf, size);
 8048622:	ff 74 24 18          	pushl  0x18(%esp)
 8048626:	ff 74 24 18          	pushl  0x18(%esp)
 804862a:	53                   	push   %ebx
 804862b:	50                   	push   %eax
 804862c:	e8 bb fe ff ff       	call   80484ec <check_file_handle>
  msg ("close \"%s\"", file_name);
 8048631:	83 c4 08             	add    $0x8,%esp
 8048634:	53                   	push   %ebx
 8048635:	68 b0 ae 04 08       	push   $0x804aeb0
 804863a:	e8 17 fb ff ff       	call   8048156 <msg>
  close (fd);
 804863f:	89 34 24             	mov    %esi,(%esp)
 8048642:	e8 cc 1d 00 00       	call   804a413 <close>
}
 8048647:	83 c4 14             	add    $0x14,%esp
 804864a:	5b                   	pop    %ebx
 804864b:	5e                   	pop    %esi
 804864c:	c3                   	ret    

0804864d <seq_test>:

void 
seq_test (const char *file_name, void *buf, size_t size, size_t initial_size,
          size_t (*block_size_func) (void),
          void (*check_func) (int fd, long ofs)) 
{
 804864d:	55                   	push   %ebp
 804864e:	57                   	push   %edi
 804864f:	56                   	push   %esi
 8048650:	53                   	push   %ebx
 8048651:	83 ec 14             	sub    $0x14,%esp
 8048654:	8b 6c 24 3c          	mov    0x3c(%esp),%ebp
  size_t ofs;
  int fd;
  
  random_bytes (buf, size);
 8048658:	ff 74 24 30          	pushl  0x30(%esp)
 804865c:	ff 74 24 30          	pushl  0x30(%esp)
 8048660:	e8 39 04 00 00       	call   8048a9e <random_bytes>
  CHECK (create (file_name, initial_size), "create \"%s\"", file_name);
 8048665:	83 c4 08             	add    $0x8,%esp
 8048668:	ff 74 24 28          	pushl  0x28(%esp)
 804866c:	68 bb ae 04 08       	push   $0x804aebb
 8048671:	e8 e0 fa ff ff       	call   8048156 <msg>
 8048676:	83 c4 08             	add    $0x8,%esp
 8048679:	ff 74 24 34          	pushl  0x34(%esp)
 804867d:	ff 74 24 2c          	pushl  0x2c(%esp)
 8048681:	e8 fd 1c 00 00       	call   804a383 <create>
 8048686:	83 c4 10             	add    $0x10,%esp
 8048689:	84 c0                	test   %al,%al
 804868b:	75 11                	jne    804869e <seq_test+0x51>
 804868d:	83 ec 08             	sub    $0x8,%esp
 8048690:	ff 74 24 28          	pushl  0x28(%esp)
 8048694:	68 bb ae 04 08       	push   $0x804aebb
 8048699:	e8 db fa ff ff       	call   8048179 <fail>
  CHECK ((fd = open (file_name)) > 1, "open \"%s\"", file_name);
 804869e:	83 ec 08             	sub    $0x8,%esp
 80486a1:	ff 74 24 28          	pushl  0x28(%esp)
 80486a5:	68 c7 ae 04 08       	push   $0x804aec7
 80486aa:	e8 a7 fa ff ff       	call   8048156 <msg>
 80486af:	83 c4 04             	add    $0x4,%esp
 80486b2:	ff 74 24 2c          	pushl  0x2c(%esp)
 80486b6:	e8 f1 1c 00 00       	call   804a3ac <open>
 80486bb:	89 c7                	mov    %eax,%edi
 80486bd:	83 c4 10             	add    $0x10,%esp
 80486c0:	83 f8 01             	cmp    $0x1,%eax
 80486c3:	7f 11                	jg     80486d6 <seq_test+0x89>
 80486c5:	83 ec 08             	sub    $0x8,%esp
 80486c8:	ff 74 24 28          	pushl  0x28(%esp)
 80486cc:	68 c7 ae 04 08       	push   $0x804aec7
 80486d1:	e8 a3 fa ff ff       	call   8048179 <fail>

  ofs = 0;
  msg ("writing \"%s\"", file_name);
 80486d6:	83 ec 08             	sub    $0x8,%esp
 80486d9:	ff 74 24 28          	pushl  0x28(%esp)
 80486dd:	68 d1 ae 04 08       	push   $0x804aed1
 80486e2:	e8 6f fa ff ff       	call   8048156 <msg>
  while (ofs < size) 
 80486e7:	83 c4 10             	add    $0x10,%esp
 80486ea:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
 80486ef:	74 54                	je     8048745 <seq_test+0xf8>
 80486f1:	be 00 00 00 00       	mov    $0x0,%esi
    {
      size_t block_size = block_size_func ();
 80486f6:	ff 54 24 30          	call   *0x30(%esp)
      if (block_size > size - ofs)
 80486fa:	8b 54 24 28          	mov    0x28(%esp),%edx
 80486fe:	29 f2                	sub    %esi,%edx
 8048700:	39 d0                	cmp    %edx,%eax
 8048702:	89 d3                	mov    %edx,%ebx
 8048704:	0f 46 d8             	cmovbe %eax,%ebx
        block_size = size - ofs;

      if (write (fd, buf + ofs, block_size) != (int) block_size)
 8048707:	83 ec 04             	sub    $0x4,%esp
 804870a:	53                   	push   %ebx
 804870b:	89 f0                	mov    %esi,%eax
 804870d:	03 44 24 2c          	add    0x2c(%esp),%eax
 8048711:	50                   	push   %eax
 8048712:	57                   	push   %edi
 8048713:	e8 c5 1c 00 00       	call   804a3dd <write>
 8048718:	83 c4 10             	add    $0x10,%esp
 804871b:	39 d8                	cmp    %ebx,%eax
 804871d:	74 10                	je     804872f <seq_test+0xe2>
        fail ("write %zu bytes at offset %zu in \"%s\" failed",
 804871f:	ff 74 24 20          	pushl  0x20(%esp)
 8048723:	56                   	push   %esi
 8048724:	53                   	push   %ebx
 8048725:	68 2c b2 04 08       	push   $0x804b22c
 804872a:	e8 4a fa ff ff       	call   8048179 <fail>
              block_size, ofs, file_name);

      ofs += block_size;
 804872f:	01 de                	add    %ebx,%esi
      if (check_func != NULL)
 8048731:	85 ed                	test   %ebp,%ebp
 8048733:	74 0a                	je     804873f <seq_test+0xf2>
        check_func (fd, ofs);
 8048735:	83 ec 08             	sub    $0x8,%esp
 8048738:	56                   	push   %esi
 8048739:	57                   	push   %edi
 804873a:	ff d5                	call   *%ebp
 804873c:	83 c4 10             	add    $0x10,%esp
  CHECK (create (file_name, initial_size), "create \"%s\"", file_name);
  CHECK ((fd = open (file_name)) > 1, "open \"%s\"", file_name);

  ofs = 0;
  msg ("writing \"%s\"", file_name);
  while (ofs < size) 
 804873f:	39 74 24 28          	cmp    %esi,0x28(%esp)
 8048743:	77 b1                	ja     80486f6 <seq_test+0xa9>

      ofs += block_size;
      if (check_func != NULL)
        check_func (fd, ofs);
    }
  msg ("close \"%s\"", file_name);
 8048745:	83 ec 08             	sub    $0x8,%esp
 8048748:	ff 74 24 28          	pushl  0x28(%esp)
 804874c:	68 b0 ae 04 08       	push   $0x804aeb0
 8048751:	e8 00 fa ff ff       	call   8048156 <msg>
  close (fd);
 8048756:	89 3c 24             	mov    %edi,(%esp)
 8048759:	e8 b5 1c 00 00       	call   804a413 <close>
  check_file (file_name, buf, size);
 804875e:	83 c4 0c             	add    $0xc,%esp
 8048761:	ff 74 24 2c          	pushl  0x2c(%esp)
 8048765:	ff 74 24 2c          	pushl  0x2c(%esp)
 8048769:	ff 74 24 2c          	pushl  0x2c(%esp)
 804876d:	e8 7c fe ff ff       	call   80485ee <check_file>
}
 8048772:	83 c4 1c             	add    $0x1c,%esp
 8048775:	5b                   	pop    %ebx
 8048776:	5e                   	pop    %esi
 8048777:	5f                   	pop    %edi
 8048778:	5d                   	pop    %ebp
 8048779:	c3                   	ret    

0804877a <main>:
#include "tests/lib.h"
#include "tests/main.h"

int
main (int argc UNUSED, char *argv[]) 
{
 804877a:	8d 4c 24 04          	lea    0x4(%esp),%ecx
 804877e:	83 e4 f0             	and    $0xfffffff0,%esp
 8048781:	ff 71 fc             	pushl  -0x4(%ecx)
 8048784:	55                   	push   %ebp
 8048785:	89 e5                	mov    %esp,%ebp
 8048787:	51                   	push   %ecx
 8048788:	83 ec 10             	sub    $0x10,%esp
 804878b:	8b 41 04             	mov    0x4(%ecx),%eax
  test_name = argv[0];
 804878e:	8b 00                	mov    (%eax),%eax
 8048790:	a3 e4 c8 04 08       	mov    %eax,0x804c8e4

  msg ("begin");
 8048795:	68 de ae 04 08       	push   $0x804aede
 804879a:	e8 b7 f9 ff ff       	call   8048156 <msg>
  random_init (0);
 804879f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 80487a6:	e8 82 02 00 00       	call   8048a2d <random_init>
  test_main ();
 80487ab:	e8 e4 f8 ff ff       	call   8048094 <test_main>
  msg ("end");
 80487b0:	c7 04 24 e4 ae 04 08 	movl   $0x804aee4,(%esp)
 80487b7:	e8 9a f9 ff ff       	call   8048156 <msg>
 80487bc:	83 c4 10             	add    $0x10,%esp
  return 0;
}
 80487bf:	b8 00 00 00 00       	mov    $0x0,%eax
 80487c4:	8b 4d fc             	mov    -0x4(%ebp),%ecx
 80487c7:	c9                   	leave  
 80487c8:	8d 61 fc             	lea    -0x4(%ecx),%esp
 80487cb:	c3                   	ret    

080487cc <do_mkdir>:
  close (fd);
}

static void
do_mkdir (const char *format, ...) 
{
 80487cc:	53                   	push   %ebx
 80487cd:	81 ec 88 00 00 00    	sub    $0x88,%esp
  char dir[128];
  va_list args;

  va_start (args, format);
 80487d3:	8d 84 24 94 00 00 00 	lea    0x94(%esp),%eax
  vsnprintf (dir, sizeof dir, format, args);
 80487da:	50                   	push   %eax
 80487db:	ff b4 24 94 00 00 00 	pushl  0x94(%esp)
 80487e2:	68 80 00 00 00       	push   $0x80
 80487e7:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
 80487eb:	53                   	push   %ebx
 80487ec:	e8 f3 0d 00 00       	call   80495e4 <vsnprintf>
  va_end (args);

  CHECK (mkdir (dir), "mkdir \"%s\"", dir);
 80487f1:	83 c4 08             	add    $0x8,%esp
 80487f4:	53                   	push   %ebx
 80487f5:	68 e8 ae 04 08       	push   $0x804aee8
 80487fa:	e8 57 f9 ff ff       	call   8048156 <msg>
 80487ff:	89 1c 24             	mov    %ebx,(%esp)
 8048802:	e8 4a 1c 00 00       	call   804a451 <mkdir>
 8048807:	83 c4 10             	add    $0x10,%esp
 804880a:	84 c0                	test   %al,%al
 804880c:	75 12                	jne    8048820 <do_mkdir+0x54>
 804880e:	83 ec 08             	sub    $0x8,%esp
 8048811:	8d 44 24 08          	lea    0x8(%esp),%eax
 8048815:	50                   	push   %eax
 8048816:	68 e8 ae 04 08       	push   $0x804aee8
 804881b:	e8 59 f9 ff ff       	call   8048179 <fail>
}
 8048820:	81 c4 88 00 00 00    	add    $0x88,%esp
 8048826:	5b                   	pop    %ebx
 8048827:	c3                   	ret    

08048828 <do_touch>:

static void
do_touch (const char *format, ...)
{
 8048828:	53                   	push   %ebx
 8048829:	81 ec 88 00 00 00    	sub    $0x88,%esp
  char file[128];
  va_list args;

  va_start (args, format);
 804882f:	8d 84 24 94 00 00 00 	lea    0x94(%esp),%eax
  vsnprintf (file, sizeof file, format, args);
 8048836:	50                   	push   %eax
 8048837:	ff b4 24 94 00 00 00 	pushl  0x94(%esp)
 804883e:	68 80 00 00 00       	push   $0x80
 8048843:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
 8048847:	53                   	push   %ebx
 8048848:	e8 97 0d 00 00       	call   80495e4 <vsnprintf>
  va_end (args);

  CHECK (create (file, 0), "create \"%s\"", file);
 804884d:	83 c4 08             	add    $0x8,%esp
 8048850:	53                   	push   %ebx
 8048851:	68 bb ae 04 08       	push   $0x804aebb
 8048856:	e8 fb f8 ff ff       	call   8048156 <msg>
 804885b:	83 c4 08             	add    $0x8,%esp
 804885e:	6a 00                	push   $0x0
 8048860:	53                   	push   %ebx
 8048861:	e8 1d 1b 00 00       	call   804a383 <create>
 8048866:	83 c4 10             	add    $0x10,%esp
 8048869:	84 c0                	test   %al,%al
 804886b:	75 12                	jne    804887f <do_touch+0x57>
 804886d:	83 ec 08             	sub    $0x8,%esp
 8048870:	8d 44 24 08          	lea    0x8(%esp),%eax
 8048874:	50                   	push   %eax
 8048875:	68 bb ae 04 08       	push   $0x804aebb
 804887a:	e8 fa f8 ff ff       	call   8048179 <fail>
}
 804887f:	81 c4 88 00 00 00    	add    $0x88,%esp
 8048885:	5b                   	pop    %ebx
 8048886:	c3                   	ret    

08048887 <make_tree>:
static void do_mkdir (const char *format, ...) PRINTF_FORMAT (1, 2);
static void do_touch (const char *format, ...) PRINTF_FORMAT (1, 2);

void
make_tree (int at, int bt, int ct, int dt) 
{
 8048887:	55                   	push   %ebp
 8048888:	57                   	push   %edi
 8048889:	56                   	push   %esi
 804888a:	53                   	push   %ebx
 804888b:	81 ec a8 00 00 00    	sub    $0xa8,%esp
  char try[128];
  int a, b, c, d;
  int fd;

  msg ("creating /0/0/0/0 through /%d/%d/%d/%d...",
 8048891:	8b 84 24 c8 00 00 00 	mov    0xc8(%esp),%eax
 8048898:	83 e8 01             	sub    $0x1,%eax
 804889b:	89 44 24 14          	mov    %eax,0x14(%esp)
 804889f:	8b 8c 24 c0 00 00 00 	mov    0xc0(%esp),%ecx
 80488a6:	8d 51 ff             	lea    -0x1(%ecx),%edx
 80488a9:	89 54 24 18          	mov    %edx,0x18(%esp)
 80488ad:	50                   	push   %eax
 80488ae:	8b 84 24 c8 00 00 00 	mov    0xc8(%esp),%eax
 80488b5:	83 e8 01             	sub    $0x1,%eax
 80488b8:	50                   	push   %eax
 80488b9:	52                   	push   %edx
 80488ba:	8b 84 24 c8 00 00 00 	mov    0xc8(%esp),%eax
 80488c1:	83 e8 01             	sub    $0x1,%eax
 80488c4:	50                   	push   %eax
 80488c5:	68 5c b2 04 08       	push   $0x804b25c
 80488ca:	e8 87 f8 ff ff       	call   8048156 <msg>
       at - 1, bt - 1, ct - 1, dt - 1);
  quiet = true;
 80488cf:	c6 05 a0 c3 04 08 01 	movb   $0x1,0x804c3a0
  for (a = 0; a < at; a++) 
 80488d6:	83 c4 20             	add    $0x20,%esp
 80488d9:	83 bc 24 b0 00 00 00 	cmpl   $0x0,0xb0(%esp)
 80488e0:	00 
 80488e1:	0f 8e ad 00 00 00    	jle    8048994 <make_tree+0x10d>
 80488e7:	bd 00 00 00 00       	mov    $0x0,%ebp
    {
      do_mkdir ("/%d", a);
 80488ec:	83 ec 08             	sub    $0x8,%esp
 80488ef:	55                   	push   %ebp
 80488f0:	68 fc ae 04 08       	push   $0x804aefc
 80488f5:	e8 d2 fe ff ff       	call   80487cc <do_mkdir>
      for (b = 0; b < bt; b++) 
 80488fa:	83 c4 10             	add    $0x10,%esp
 80488fd:	83 bc 24 b4 00 00 00 	cmpl   $0x0,0xb4(%esp)
 8048904:	00 
 8048905:	7e 7d                	jle    8048984 <make_tree+0xfd>
 8048907:	bf 00 00 00 00       	mov    $0x0,%edi
        {
          do_mkdir ("/%d/%d", a, b);
 804890c:	83 ec 04             	sub    $0x4,%esp
 804890f:	57                   	push   %edi
 8048910:	55                   	push   %ebp
 8048911:	68 f9 ae 04 08       	push   $0x804aef9
 8048916:	e8 b1 fe ff ff       	call   80487cc <do_mkdir>
          for (c = 0; c < ct; c++) 
 804891b:	83 c4 10             	add    $0x10,%esp
 804891e:	83 bc 24 b8 00 00 00 	cmpl   $0x0,0xb8(%esp)
 8048925:	00 
 8048926:	7e 50                	jle    8048978 <make_tree+0xf1>
 8048928:	be 00 00 00 00       	mov    $0x0,%esi
            {
              do_mkdir ("/%d/%d/%d", a, b, c);
 804892d:	56                   	push   %esi
 804892e:	57                   	push   %edi
 804892f:	55                   	push   %ebp
 8048930:	68 f6 ae 04 08       	push   $0x804aef6
 8048935:	e8 92 fe ff ff       	call   80487cc <do_mkdir>
              for (d = 0; d < dt; d++)
 804893a:	83 c4 10             	add    $0x10,%esp
 804893d:	83 bc 24 bc 00 00 00 	cmpl   $0x0,0xbc(%esp)
 8048944:	00 
 8048945:	7e 25                	jle    804896c <make_tree+0xe5>
 8048947:	bb 00 00 00 00       	mov    $0x0,%ebx
                do_touch ("/%d/%d/%d/%d", a, b, c, d);
 804894c:	83 ec 0c             	sub    $0xc,%esp
 804894f:	53                   	push   %ebx
 8048950:	56                   	push   %esi
 8048951:	57                   	push   %edi
 8048952:	55                   	push   %ebp
 8048953:	68 f3 ae 04 08       	push   $0x804aef3
 8048958:	e8 cb fe ff ff       	call   8048828 <do_touch>
        {
          do_mkdir ("/%d/%d", a, b);
          for (c = 0; c < ct; c++) 
            {
              do_mkdir ("/%d/%d/%d", a, b, c);
              for (d = 0; d < dt; d++)
 804895d:	83 c3 01             	add    $0x1,%ebx
 8048960:	83 c4 20             	add    $0x20,%esp
 8048963:	39 9c 24 bc 00 00 00 	cmp    %ebx,0xbc(%esp)
 804896a:	75 e0                	jne    804894c <make_tree+0xc5>
    {
      do_mkdir ("/%d", a);
      for (b = 0; b < bt; b++) 
        {
          do_mkdir ("/%d/%d", a, b);
          for (c = 0; c < ct; c++) 
 804896c:	83 c6 01             	add    $0x1,%esi
 804896f:	39 b4 24 b8 00 00 00 	cmp    %esi,0xb8(%esp)
 8048976:	75 b5                	jne    804892d <make_tree+0xa6>
       at - 1, bt - 1, ct - 1, dt - 1);
  quiet = true;
  for (a = 0; a < at; a++) 
    {
      do_mkdir ("/%d", a);
      for (b = 0; b < bt; b++) 
 8048978:	83 c7 01             	add    $0x1,%edi
 804897b:	39 bc 24 b4 00 00 00 	cmp    %edi,0xb4(%esp)
 8048982:	75 88                	jne    804890c <make_tree+0x85>
  int fd;

  msg ("creating /0/0/0/0 through /%d/%d/%d/%d...",
       at - 1, bt - 1, ct - 1, dt - 1);
  quiet = true;
  for (a = 0; a < at; a++) 
 8048984:	83 c5 01             	add    $0x1,%ebp
 8048987:	39 ac 24 b0 00 00 00 	cmp    %ebp,0xb0(%esp)
 804898e:	0f 85 58 ff ff ff    	jne    80488ec <make_tree+0x65>
              for (d = 0; d < dt; d++)
                do_touch ("/%d/%d/%d/%d", a, b, c, d);
            }
        }
    }
  quiet = false;
 8048994:	c6 05 a0 c3 04 08 00 	movb   $0x0,0x804c3a0

  snprintf (try, sizeof try, "/%d/%d/%d/%d", 0, bt - 1, 0, dt - 1);
 804899b:	83 ec 04             	sub    $0x4,%esp
 804899e:	ff 74 24 0c          	pushl  0xc(%esp)
 80489a2:	6a 00                	push   $0x0
 80489a4:	ff 74 24 18          	pushl  0x18(%esp)
 80489a8:	6a 00                	push   $0x0
 80489aa:	68 f3 ae 04 08       	push   $0x804aef3
 80489af:	68 80 00 00 00       	push   $0x80
 80489b4:	8d 5c 24 2c          	lea    0x2c(%esp),%ebx
 80489b8:	53                   	push   %ebx
 80489b9:	e8 93 0c 00 00       	call   8049651 <snprintf>
  CHECK ((fd = open (try)) > 1, "open \"%s\"", try);
 80489be:	83 c4 18             	add    $0x18,%esp
 80489c1:	53                   	push   %ebx
 80489c2:	68 c7 ae 04 08       	push   $0x804aec7
 80489c7:	e8 8a f7 ff ff       	call   8048156 <msg>
 80489cc:	89 1c 24             	mov    %ebx,(%esp)
 80489cf:	e8 d8 19 00 00       	call   804a3ac <open>
 80489d4:	89 c3                	mov    %eax,%ebx
 80489d6:	83 c4 10             	add    $0x10,%esp
 80489d9:	83 f8 01             	cmp    $0x1,%eax
 80489dc:	7f 12                	jg     80489f0 <make_tree+0x169>
 80489de:	83 ec 08             	sub    $0x8,%esp
 80489e1:	8d 44 24 18          	lea    0x18(%esp),%eax
 80489e5:	50                   	push   %eax
 80489e6:	68 c7 ae 04 08       	push   $0x804aec7
 80489eb:	e8 89 f7 ff ff       	call   8048179 <fail>
  msg ("close \"%s\"", try);
 80489f0:	83 ec 08             	sub    $0x8,%esp
 80489f3:	8d 44 24 18          	lea    0x18(%esp),%eax
 80489f7:	50                   	push   %eax
 80489f8:	68 b0 ae 04 08       	push   $0x804aeb0
 80489fd:	e8 54 f7 ff ff       	call   8048156 <msg>
  close (fd);
 8048a02:	89 1c 24             	mov    %ebx,(%esp)
 8048a05:	e8 09 1a 00 00       	call   804a413 <close>
}
 8048a0a:	81 c4 ac 00 00 00    	add    $0xac,%esp
 8048a10:	5b                   	pop    %ebx
 8048a11:	5e                   	pop    %esi
 8048a12:	5f                   	pop    %edi
 8048a13:	5d                   	pop    %ebp
 8048a14:	c3                   	ret    

08048a15 <_start>:
int main (int, char *[]);
void _start (int argc, char *argv[]);

void
_start (int argc, char *argv[]) 
{
 8048a15:	83 ec 14             	sub    $0x14,%esp
  exit (main (argc, argv));
 8048a18:	ff 74 24 1c          	pushl  0x1c(%esp)
 8048a1c:	ff 74 24 1c          	pushl  0x1c(%esp)
 8048a20:	e8 55 fd ff ff       	call   804877a <main>
 8048a25:	89 04 24             	mov    %eax,(%esp)
 8048a28:	e8 17 19 00 00       	call   804a344 <exit>

08048a2d <random_init>:
{
  uint8_t *seedp = (uint8_t *) &seed;
  int i;
  uint8_t j;

  for (i = 0; i < 256; i++) 
 8048a2d:	b8 00 00 00 00       	mov    $0x0,%eax
    s[i] = i;
 8048a32:	88 80 e0 c7 04 08    	mov    %al,0x804c7e0(%eax)
{
  uint8_t *seedp = (uint8_t *) &seed;
  int i;
  uint8_t j;

  for (i = 0; i < 256; i++) 
 8048a38:	83 c0 01             	add    $0x1,%eax
 8048a3b:	3d 00 01 00 00       	cmp    $0x100,%eax
 8048a40:	75 f0                	jne    8048a32 <random_init+0x5>
}

/* Initializes or reinitializes the PRNG with the given SEED. */
void
random_init (unsigned seed)
{
 8048a42:	56                   	push   %esi
 8048a43:	53                   	push   %ebx
 8048a44:	be 00 00 00 00       	mov    $0x0,%esi
 8048a49:	b8 00 00 00 00       	mov    $0x0,%eax

  for (i = 0; i < 256; i++) 
    s[i] = i;
  for (i = j = 0; i < 256; i++) 
    {
      j += s[i] + seedp[i % sizeof seed];
 8048a4e:	89 c1                	mov    %eax,%ecx
 8048a50:	83 e1 03             	and    $0x3,%ecx
 8048a53:	0f b6 98 e0 c7 04 08 	movzbl 0x804c7e0(%eax),%ebx
 8048a5a:	89 da                	mov    %ebx,%edx
 8048a5c:	02 54 0c 0c          	add    0xc(%esp,%ecx,1),%dl
 8048a60:	89 d1                	mov    %edx,%ecx
 8048a62:	01 ce                	add    %ecx,%esi
      swap_byte (s + i, s + j);
 8048a64:	89 f2                	mov    %esi,%edx
 8048a66:	0f b6 ca             	movzbl %dl,%ecx
/* Swaps the bytes pointed to by A and B. */
static inline void
swap_byte (uint8_t *a, uint8_t *b) 
{
  uint8_t t = *a;
  *a = *b;
 8048a69:	0f b6 91 e0 c7 04 08 	movzbl 0x804c7e0(%ecx),%edx
 8048a70:	88 90 e0 c7 04 08    	mov    %dl,0x804c7e0(%eax)
  *b = t;
 8048a76:	88 99 e0 c7 04 08    	mov    %bl,0x804c7e0(%ecx)
  int i;
  uint8_t j;

  for (i = 0; i < 256; i++) 
    s[i] = i;
  for (i = j = 0; i < 256; i++) 
 8048a7c:	83 c0 01             	add    $0x1,%eax
 8048a7f:	3d 00 01 00 00       	cmp    $0x100,%eax
 8048a84:	75 c8                	jne    8048a4e <random_init+0x21>
    {
      j += s[i] + seedp[i % sizeof seed];
      swap_byte (s + i, s + j);
    }

  s_i = s_j = 0;
 8048a86:	c6 05 c1 c7 04 08 00 	movb   $0x0,0x804c7c1
 8048a8d:	c6 05 c2 c7 04 08 00 	movb   $0x0,0x804c7c2
  inited = true;
 8048a94:	c6 05 c0 c7 04 08 01 	movb   $0x1,0x804c7c0
}
 8048a9b:	5b                   	pop    %ebx
 8048a9c:	5e                   	pop    %esi
 8048a9d:	c3                   	ret    

08048a9e <random_bytes>:

/* Writes SIZE random bytes into BUF. */
void
random_bytes (void *buf_, size_t size) 
{
 8048a9e:	55                   	push   %ebp
 8048a9f:	57                   	push   %edi
 8048aa0:	56                   	push   %esi
 8048aa1:	53                   	push   %ebx
 8048aa2:	83 ec 08             	sub    $0x8,%esp
 8048aa5:	8b 5c 24 1c          	mov    0x1c(%esp),%ebx
 8048aa9:	8b 6c 24 20          	mov    0x20(%esp),%ebp
  uint8_t *buf;

  if (!inited)
 8048aad:	80 3d c0 c7 04 08 00 	cmpb   $0x0,0x804c7c0
 8048ab4:	75 0a                	jne    8048ac0 <random_bytes+0x22>
    random_init (0);
 8048ab6:	6a 00                	push   $0x0
 8048ab8:	e8 70 ff ff ff       	call   8048a2d <random_init>
 8048abd:	83 c4 04             	add    $0x4,%esp

  for (buf = buf_; size-- > 0; buf++)
 8048ac0:	8d 45 ff             	lea    -0x1(%ebp),%eax
 8048ac3:	89 04 24             	mov    %eax,(%esp)
 8048ac6:	85 ed                	test   %ebp,%ebp
 8048ac8:	0f 84 82 00 00 00    	je     8048b50 <random_bytes+0xb2>
 8048ace:	0f b6 05 c2 c7 04 08 	movzbl 0x804c7c2,%eax
 8048ad5:	88 44 24 07          	mov    %al,0x7(%esp)
 8048ad9:	0f b6 35 c1 c7 04 08 	movzbl 0x804c7c1,%esi
 8048ae0:	01 dd                	add    %ebx,%ebp
 8048ae2:	88 44 24 06          	mov    %al,0x6(%esp)
    {
      uint8_t s_k;
      
      s_i++;
 8048ae6:	80 44 24 06 01       	addb   $0x1,0x6(%esp)
 8048aeb:	0f b6 44 24 06       	movzbl 0x6(%esp),%eax
      s_j += s[s_i];
 8048af0:	0f b6 d0             	movzbl %al,%edx
 8048af3:	89 f0                	mov    %esi,%eax
 8048af5:	02 82 e0 c7 04 08    	add    0x804c7e0(%edx),%al
 8048afb:	89 c6                	mov    %eax,%esi
      swap_byte (s + s_i, s + s_j);
 8048afd:	0f b6 c0             	movzbl %al,%eax

/* Swaps the bytes pointed to by A and B. */
static inline void
swap_byte (uint8_t *a, uint8_t *b) 
{
  uint8_t t = *a;
 8048b00:	0f b6 ba e0 c7 04 08 	movzbl 0x804c7e0(%edx),%edi
  *a = *b;
 8048b07:	0f b6 88 e0 c7 04 08 	movzbl 0x804c7e0(%eax),%ecx
 8048b0e:	88 8a e0 c7 04 08    	mov    %cl,0x804c7e0(%edx)
  *b = t;
 8048b14:	89 f9                	mov    %edi,%ecx
 8048b16:	88 88 e0 c7 04 08    	mov    %cl,0x804c7e0(%eax)
      s_i++;
      s_j += s[s_i];
      swap_byte (s + s_i, s + s_j);

      s_k = s[s_i] + s[s_j];
      *buf = s[s_k];
 8048b1c:	89 f8                	mov    %edi,%eax
 8048b1e:	02 82 e0 c7 04 08    	add    0x804c7e0(%edx),%al
 8048b24:	0f b6 c0             	movzbl %al,%eax
 8048b27:	0f b6 80 e0 c7 04 08 	movzbl 0x804c7e0(%eax),%eax
 8048b2e:	88 03                	mov    %al,(%ebx)
  uint8_t *buf;

  if (!inited)
    random_init (0);

  for (buf = buf_; size-- > 0; buf++)
 8048b30:	83 c3 01             	add    $0x1,%ebx
 8048b33:	39 dd                	cmp    %ebx,%ebp
 8048b35:	75 af                	jne    8048ae6 <random_bytes+0x48>
 8048b37:	0f b6 44 24 07       	movzbl 0x7(%esp),%eax
 8048b3c:	0f b6 3c 24          	movzbl (%esp),%edi
 8048b40:	8d 44 38 01          	lea    0x1(%eax,%edi,1),%eax
 8048b44:	a2 c2 c7 04 08       	mov    %al,0x804c7c2
 8048b49:	89 f0                	mov    %esi,%eax
 8048b4b:	a2 c1 c7 04 08       	mov    %al,0x804c7c1
      swap_byte (s + s_i, s + s_j);

      s_k = s[s_i] + s[s_j];
      *buf = s[s_k];
    }
}
 8048b50:	83 c4 08             	add    $0x8,%esp
 8048b53:	5b                   	pop    %ebx
 8048b54:	5e                   	pop    %esi
 8048b55:	5f                   	pop    %edi
 8048b56:	5d                   	pop    %ebp
 8048b57:	c3                   	ret    

08048b58 <random_ulong>:
/* Returns a pseudo-random unsigned long.
   Use random_ulong() % n to obtain a random number in the range
   0...n (exclusive). */
unsigned long
random_ulong (void) 
{
 8048b58:	83 ec 10             	sub    $0x10,%esp
  unsigned long ul;
  random_bytes (&ul, sizeof ul);
 8048b5b:	6a 04                	push   $0x4
 8048b5d:	8d 44 24 10          	lea    0x10(%esp),%eax
 8048b61:	50                   	push   %eax
 8048b62:	e8 37 ff ff ff       	call   8048a9e <random_bytes>
  return ul;
}
 8048b67:	8b 44 24 14          	mov    0x14(%esp),%eax
 8048b6b:	83 c4 18             	add    $0x18,%esp
 8048b6e:	c3                   	ret    

08048b6f <vsnprintf_helper>:
}

/* Helper function for vsnprintf(). */
static void
vsnprintf_helper (char ch, void *aux_)
{
 8048b6f:	53                   	push   %ebx
 8048b70:	8b 5c 24 08          	mov    0x8(%esp),%ebx
 8048b74:	8b 44 24 0c          	mov    0xc(%esp),%eax
  struct vsnprintf_aux *aux = aux_;

  if (aux->length++ < aux->max_length)
 8048b78:	8b 50 04             	mov    0x4(%eax),%edx
 8048b7b:	8d 4a 01             	lea    0x1(%edx),%ecx
 8048b7e:	89 48 04             	mov    %ecx,0x4(%eax)
 8048b81:	3b 50 08             	cmp    0x8(%eax),%edx
 8048b84:	7d 09                	jge    8048b8f <vsnprintf_helper+0x20>
    *aux->p++ = ch;
 8048b86:	8b 10                	mov    (%eax),%edx
 8048b88:	8d 4a 01             	lea    0x1(%edx),%ecx
 8048b8b:	89 08                	mov    %ecx,(%eax)
 8048b8d:	88 1a                	mov    %bl,(%edx)
}
 8048b8f:	5b                   	pop    %ebx
 8048b90:	c3                   	ret    

08048b91 <output_dup>:
}

/* Writes CH to OUTPUT with auxiliary data AUX, CNT times. */
static void
output_dup (char ch, size_t cnt, void (*output) (char, void *), void *aux) 
{
 8048b91:	55                   	push   %ebp
 8048b92:	57                   	push   %edi
 8048b93:	56                   	push   %esi
 8048b94:	53                   	push   %ebx
 8048b95:	83 ec 0c             	sub    $0xc,%esp
 8048b98:	8b 7c 24 20          	mov    0x20(%esp),%edi
  while (cnt-- > 0)
 8048b9c:	85 d2                	test   %edx,%edx
 8048b9e:	74 16                	je     8048bb6 <output_dup+0x25>
 8048ba0:	89 cd                	mov    %ecx,%ebp
 8048ba2:	89 d3                	mov    %edx,%ebx
    output (ch, aux);
 8048ba4:	0f be f0             	movsbl %al,%esi
 8048ba7:	83 ec 08             	sub    $0x8,%esp
 8048baa:	57                   	push   %edi
 8048bab:	56                   	push   %esi
 8048bac:	ff d5                	call   *%ebp

/* Writes CH to OUTPUT with auxiliary data AUX, CNT times. */
static void
output_dup (char ch, size_t cnt, void (*output) (char, void *), void *aux) 
{
  while (cnt-- > 0)
 8048bae:	83 c4 10             	add    $0x10,%esp
 8048bb1:	83 eb 01             	sub    $0x1,%ebx
 8048bb4:	75 f1                	jne    8048ba7 <output_dup+0x16>
    output (ch, aux);
}
 8048bb6:	83 c4 0c             	add    $0xc,%esp
 8048bb9:	5b                   	pop    %ebx
 8048bba:	5e                   	pop    %esi
 8048bbb:	5f                   	pop    %edi
 8048bbc:	5d                   	pop    %ebp
 8048bbd:	c3                   	ret    

08048bbe <format_integer>:
static void
format_integer (uintmax_t value, bool is_signed, bool negative, 
                const struct integer_base *b,
                const struct printf_conversion *c,
                void (*output) (char, void *), void *aux)
{
 8048bbe:	55                   	push   %ebp
 8048bbf:	57                   	push   %edi
 8048bc0:	56                   	push   %esi
 8048bc1:	53                   	push   %ebx
 8048bc2:	83 ec 7c             	sub    $0x7c,%esp
 8048bc5:	89 c6                	mov    %eax,%esi
 8048bc7:	89 d7                	mov    %edx,%edi
 8048bc9:	8b 84 24 90 00 00 00 	mov    0x90(%esp),%eax
  int digit_cnt;                /* # of digits output so far. */

  /* Determine sign character, if any.
     An unsigned conversion will never have a sign character,
     even if one of the flags requests one. */
  sign = 0;
 8048bd0:	c7 44 24 20 00 00 00 	movl   $0x0,0x20(%esp)
 8048bd7:	00 
  if (is_signed) 
 8048bd8:	84 c9                	test   %cl,%cl
 8048bda:	74 40                	je     8048c1c <format_integer+0x5e>
    {
      if (c->flags & PLUS)
 8048bdc:	8b 94 24 98 00 00 00 	mov    0x98(%esp),%edx
 8048be3:	8b 12                	mov    (%edx),%edx
 8048be5:	f6 c2 02             	test   $0x2,%dl
 8048be8:	74 10                	je     8048bfa <format_integer+0x3c>
        sign = negative ? '-' : '+';
 8048bea:	3c 01                	cmp    $0x1,%al
 8048bec:	19 c0                	sbb    %eax,%eax
 8048bee:	83 e0 fe             	and    $0xfffffffe,%eax
 8048bf1:	83 c0 2d             	add    $0x2d,%eax
 8048bf4:	89 44 24 20          	mov    %eax,0x20(%esp)
 8048bf8:	eb 22                	jmp    8048c1c <format_integer+0x5e>
      else if (c->flags & SPACE)
 8048bfa:	f6 c2 04             	test   $0x4,%dl
 8048bfd:	74 10                	je     8048c0f <format_integer+0x51>
        sign = negative ? '-' : ' ';
 8048bff:	3c 01                	cmp    $0x1,%al
 8048c01:	19 c0                	sbb    %eax,%eax
 8048c03:	83 e0 f3             	and    $0xfffffff3,%eax
 8048c06:	83 c0 2d             	add    $0x2d,%eax
 8048c09:	89 44 24 20          	mov    %eax,0x20(%esp)
 8048c0d:	eb 0d                	jmp    8048c1c <format_integer+0x5e>
      else if (negative)
        sign = '-';
 8048c0f:	3c 01                	cmp    $0x1,%al
 8048c11:	19 c0                	sbb    %eax,%eax
 8048c13:	f7 d0                	not    %eax
 8048c15:	83 e0 2d             	and    $0x2d,%eax
 8048c18:	89 44 24 20          	mov    %eax,0x20(%esp)
    }

  /* Determine whether to include `0x' or `0X'.
     It will only be included with a hexadecimal conversion of a
     nonzero value with the # flag. */
  x = (c->flags & POUND) && value ? b->x : 0;
 8048c1c:	8b 84 24 98 00 00 00 	mov    0x98(%esp),%eax
 8048c23:	8b 00                	mov    (%eax),%eax
 8048c25:	89 44 24 28          	mov    %eax,0x28(%esp)
 8048c29:	83 e0 08             	and    $0x8,%eax
 8048c2c:	89 44 24 2c          	mov    %eax,0x2c(%esp)
 8048c30:	89 f2                	mov    %esi,%edx
 8048c32:	09 fa                	or     %edi,%edx
 8048c34:	74 14                	je     8048c4a <format_integer+0x8c>
 8048c36:	85 c0                	test   %eax,%eax
 8048c38:	74 10                	je     8048c4a <format_integer+0x8c>
 8048c3a:	8b 84 24 94 00 00 00 	mov    0x94(%esp),%eax
 8048c41:	8b 40 08             	mov    0x8(%eax),%eax
 8048c44:	89 44 24 24          	mov    %eax,0x24(%esp)
 8048c48:	eb 08                	jmp    8048c52 <format_integer+0x94>
 8048c4a:	c7 44 24 24 00 00 00 	movl   $0x0,0x24(%esp)
 8048c51:	00 
  /* Accumulate digits into buffer.
     This algorithm produces digits in reverse order, so later we
     will output the buffer's content in reverse. */
  cp = buf;
  digit_cnt = 0;
  while (value > 0) 
 8048c52:	89 f8                	mov    %edi,%eax
 8048c54:	09 f0                	or     %esi,%eax
 8048c56:	0f 84 ad 00 00 00    	je     8048d09 <format_integer+0x14b>
    {
      if ((c->flags & GROUP) && digit_cnt > 0 && digit_cnt % b->group == 0)
        *cp++ = ',';
      *cp++ = b->digits[value % b->base];
 8048c5c:	8b 84 24 94 00 00 00 	mov    0x94(%esp),%eax
 8048c63:	8b 40 04             	mov    0x4(%eax),%eax
 8048c66:	89 44 24 18          	mov    %eax,0x18(%esp)
 8048c6a:	8b 84 24 94 00 00 00 	mov    0x94(%esp),%eax
 8048c71:	8b 00                	mov    (%eax),%eax
 8048c73:	89 44 24 08          	mov    %eax,0x8(%esp)
 8048c77:	99                   	cltd   
 8048c78:	89 54 24 0c          	mov    %edx,0xc(%esp)
 8048c7c:	bb 00 00 00 00       	mov    $0x0,%ebx
 8048c81:	8d 6c 24 30          	lea    0x30(%esp),%ebp
     will output the buffer's content in reverse. */
  cp = buf;
  digit_cnt = 0;
  while (value > 0) 
    {
      if ((c->flags & GROUP) && digit_cnt > 0 && digit_cnt % b->group == 0)
 8048c85:	8b 44 24 28          	mov    0x28(%esp),%eax
 8048c89:	c1 e8 05             	shr    $0x5,%eax
 8048c8c:	83 e0 01             	and    $0x1,%eax
 8048c8f:	88 44 24 1f          	mov    %al,0x1f(%esp)
 8048c93:	eb 2b                	jmp    8048cc0 <format_integer+0x102>
 8048c95:	80 7c 24 1f 00       	cmpb   $0x0,0x1f(%esp)
 8048c9a:	74 20                	je     8048cbc <format_integer+0xfe>
 8048c9c:	85 db                	test   %ebx,%ebx
 8048c9e:	7e 1c                	jle    8048cbc <format_integer+0xfe>
 8048ca0:	8b 8c 24 94 00 00 00 	mov    0x94(%esp),%ecx
 8048ca7:	89 d8                	mov    %ebx,%eax
 8048ca9:	99                   	cltd   
 8048caa:	f7 79 0c             	idivl  0xc(%ecx)
 8048cad:	85 d2                	test   %edx,%edx
 8048caf:	75 0b                	jne    8048cbc <format_integer+0xfe>
        *cp++ = ',';
 8048cb1:	8d 45 02             	lea    0x2(%ebp),%eax
 8048cb4:	89 44 24 14          	mov    %eax,0x14(%esp)
 8048cb8:	c6 45 01 2c          	movb   $0x2c,0x1(%ebp)
    }

  /* Determine whether to include `0x' or `0X'.
     It will only be included with a hexadecimal conversion of a
     nonzero value with the # flag. */
  x = (c->flags & POUND) && value ? b->x : 0;
 8048cbc:	8b 6c 24 14          	mov    0x14(%esp),%ebp
  digit_cnt = 0;
  while (value > 0) 
    {
      if ((c->flags & GROUP) && digit_cnt > 0 && digit_cnt % b->group == 0)
        *cp++ = ',';
      *cp++ = b->digits[value % b->base];
 8048cc0:	8d 45 01             	lea    0x1(%ebp),%eax
 8048cc3:	89 44 24 14          	mov    %eax,0x14(%esp)
 8048cc7:	ff 74 24 0c          	pushl  0xc(%esp)
 8048ccb:	ff 74 24 0c          	pushl  0xc(%esp)
 8048ccf:	57                   	push   %edi
 8048cd0:	56                   	push   %esi
 8048cd1:	e8 d8 15 00 00       	call   804a2ae <__umoddi3>
 8048cd6:	83 c4 10             	add    $0x10,%esp
 8048cd9:	8b 4c 24 18          	mov    0x18(%esp),%ecx
 8048cdd:	0f b6 04 01          	movzbl (%ecx,%eax,1),%eax
 8048ce1:	88 45 00             	mov    %al,0x0(%ebp)
      value /= b->base;
 8048ce4:	ff 74 24 0c          	pushl  0xc(%esp)
 8048ce8:	ff 74 24 0c          	pushl  0xc(%esp)
 8048cec:	57                   	push   %edi
 8048ced:	56                   	push   %esi
 8048cee:	e8 9f 15 00 00       	call   804a292 <__udivdi3>
 8048cf3:	83 c4 10             	add    $0x10,%esp
 8048cf6:	89 c6                	mov    %eax,%esi
 8048cf8:	89 d7                	mov    %edx,%edi
      digit_cnt++;
 8048cfa:	83 c3 01             	add    $0x1,%ebx
  /* Accumulate digits into buffer.
     This algorithm produces digits in reverse order, so later we
     will output the buffer's content in reverse. */
  cp = buf;
  digit_cnt = 0;
  while (value > 0) 
 8048cfd:	89 d0                	mov    %edx,%eax
 8048cff:	09 f0                	or     %esi,%eax
 8048d01:	75 92                	jne    8048c95 <format_integer+0xd7>
 8048d03:	8b 5c 24 14          	mov    0x14(%esp),%ebx
 8048d07:	eb 04                	jmp    8048d0d <format_integer+0x14f>
  x = (c->flags & POUND) && value ? b->x : 0;

  /* Accumulate digits into buffer.
     This algorithm produces digits in reverse order, so later we
     will output the buffer's content in reverse. */
  cp = buf;
 8048d09:	8d 5c 24 30          	lea    0x30(%esp),%ebx
  /* Append enough zeros to match precision.
     If requested precision is 0, then a value of zero is
     rendered as a null string, otherwise as "0".
     If the # flag is used with base 8, the result must always
     begin with a zero. */
  precision = c->precision < 0 ? 1 : c->precision;
 8048d0d:	8b 84 24 98 00 00 00 	mov    0x98(%esp),%eax
 8048d14:	8b 50 08             	mov    0x8(%eax),%edx
 8048d17:	85 d2                	test   %edx,%edx
 8048d19:	b8 01 00 00 00       	mov    $0x1,%eax
 8048d1e:	0f 48 d0             	cmovs  %eax,%edx
  while (cp - buf < precision && cp < buf + sizeof buf - 1)
 8048d21:	8d 7c 24 30          	lea    0x30(%esp),%edi
 8048d25:	89 d8                	mov    %ebx,%eax
 8048d27:	29 f8                	sub    %edi,%eax
 8048d29:	39 c2                	cmp    %eax,%edx
 8048d2b:	7e 1f                	jle    8048d4c <format_integer+0x18e>
 8048d2d:	8d 44 24 6f          	lea    0x6f(%esp),%eax
 8048d31:	39 c3                	cmp    %eax,%ebx
 8048d33:	73 17                	jae    8048d4c <format_integer+0x18e>
 8048d35:	89 f9                	mov    %edi,%ecx
 8048d37:	89 c6                	mov    %eax,%esi
    *cp++ = '0';
 8048d39:	83 c3 01             	add    $0x1,%ebx
 8048d3c:	c6 43 ff 30          	movb   $0x30,-0x1(%ebx)
     If requested precision is 0, then a value of zero is
     rendered as a null string, otherwise as "0".
     If the # flag is used with base 8, the result must always
     begin with a zero. */
  precision = c->precision < 0 ? 1 : c->precision;
  while (cp - buf < precision && cp < buf + sizeof buf - 1)
 8048d40:	89 d8                	mov    %ebx,%eax
 8048d42:	29 c8                	sub    %ecx,%eax
 8048d44:	39 c2                	cmp    %eax,%edx
 8048d46:	7e 04                	jle    8048d4c <format_integer+0x18e>
 8048d48:	39 f3                	cmp    %esi,%ebx
 8048d4a:	72 ed                	jb     8048d39 <format_integer+0x17b>
    *cp++ = '0';
  if ((c->flags & POUND) && b->base == 8 && (cp == buf || cp[-1] != '0'))
 8048d4c:	83 7c 24 2c 00       	cmpl   $0x0,0x2c(%esp)
 8048d51:	74 20                	je     8048d73 <format_integer+0x1b5>
 8048d53:	8b 84 24 94 00 00 00 	mov    0x94(%esp),%eax
 8048d5a:	83 38 08             	cmpl   $0x8,(%eax)
 8048d5d:	75 14                	jne    8048d73 <format_integer+0x1b5>
 8048d5f:	8d 44 24 30          	lea    0x30(%esp),%eax
 8048d63:	39 c3                	cmp    %eax,%ebx
 8048d65:	74 06                	je     8048d6d <format_integer+0x1af>
 8048d67:	80 7b ff 30          	cmpb   $0x30,-0x1(%ebx)
 8048d6b:	74 06                	je     8048d73 <format_integer+0x1b5>
    *cp++ = '0';
 8048d6d:	c6 03 30             	movb   $0x30,(%ebx)
 8048d70:	8d 5b 01             	lea    0x1(%ebx),%ebx

  /* Calculate number of pad characters to fill field width. */
  pad_cnt = c->width - (cp - buf) - (x ? 2 : 0) - (sign != 0);
 8048d73:	29 df                	sub    %ebx,%edi
 8048d75:	8b 84 24 98 00 00 00 	mov    0x98(%esp),%eax
 8048d7c:	03 78 04             	add    0x4(%eax),%edi
 8048d7f:	89 fe                	mov    %edi,%esi
 8048d81:	83 7c 24 24 01       	cmpl   $0x1,0x24(%esp)
 8048d86:	19 c0                	sbb    %eax,%eax
 8048d88:	f7 d0                	not    %eax
 8048d8a:	83 e0 02             	and    $0x2,%eax
 8048d8d:	29 c6                	sub    %eax,%esi
 8048d8f:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
 8048d94:	0f 95 c0             	setne  %al
 8048d97:	0f b6 c0             	movzbl %al,%eax
 8048d9a:	29 c6                	sub    %eax,%esi
 8048d9c:	b8 00 00 00 00       	mov    $0x0,%eax
 8048da1:	0f 48 f0             	cmovs  %eax,%esi
  if (pad_cnt < 0)
    pad_cnt = 0;

  /* Do output. */
  if ((c->flags & (MINUS | ZERO)) == 0)
 8048da4:	f6 44 24 28 11       	testb  $0x11,0x28(%esp)
 8048da9:	75 20                	jne    8048dcb <format_integer+0x20d>
    output_dup (' ', pad_cnt, output, aux);
 8048dab:	83 ec 0c             	sub    $0xc,%esp
 8048dae:	ff b4 24 ac 00 00 00 	pushl  0xac(%esp)
 8048db5:	8b 8c 24 ac 00 00 00 	mov    0xac(%esp),%ecx
 8048dbc:	89 f2                	mov    %esi,%edx
 8048dbe:	b8 20 00 00 00       	mov    $0x20,%eax
 8048dc3:	e8 c9 fd ff ff       	call   8048b91 <output_dup>
 8048dc8:	83 c4 10             	add    $0x10,%esp
  if (sign)
 8048dcb:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
 8048dd0:	74 18                	je     8048dea <format_integer+0x22c>
    output (sign, aux);
 8048dd2:	83 ec 08             	sub    $0x8,%esp
 8048dd5:	ff b4 24 a8 00 00 00 	pushl  0xa8(%esp)
 8048ddc:	ff 74 24 2c          	pushl  0x2c(%esp)
 8048de0:	ff 94 24 ac 00 00 00 	call   *0xac(%esp)
 8048de7:	83 c4 10             	add    $0x10,%esp
  if (x) 
 8048dea:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
 8048def:	74 2d                	je     8048e1e <format_integer+0x260>
    {
      output ('0', aux);
 8048df1:	83 ec 08             	sub    $0x8,%esp
 8048df4:	ff b4 24 a8 00 00 00 	pushl  0xa8(%esp)
 8048dfb:	6a 30                	push   $0x30
 8048dfd:	ff 94 24 ac 00 00 00 	call   *0xac(%esp)
      output (x, aux); 
 8048e04:	83 c4 08             	add    $0x8,%esp
 8048e07:	ff b4 24 a8 00 00 00 	pushl  0xa8(%esp)
 8048e0e:	0f be 44 24 30       	movsbl 0x30(%esp),%eax
 8048e13:	50                   	push   %eax
 8048e14:	ff 94 24 ac 00 00 00 	call   *0xac(%esp)
 8048e1b:	83 c4 10             	add    $0x10,%esp
    }
  if (c->flags & ZERO)
 8048e1e:	8b 84 24 98 00 00 00 	mov    0x98(%esp),%eax
 8048e25:	f6 00 10             	testb  $0x10,(%eax)
 8048e28:	74 20                	je     8048e4a <format_integer+0x28c>
    output_dup ('0', pad_cnt, output, aux);
 8048e2a:	83 ec 0c             	sub    $0xc,%esp
 8048e2d:	ff b4 24 ac 00 00 00 	pushl  0xac(%esp)
 8048e34:	8b 8c 24 ac 00 00 00 	mov    0xac(%esp),%ecx
 8048e3b:	89 f2                	mov    %esi,%edx
 8048e3d:	b8 30 00 00 00       	mov    $0x30,%eax
 8048e42:	e8 4a fd ff ff       	call   8048b91 <output_dup>
 8048e47:	83 c4 10             	add    $0x10,%esp
  while (cp > buf)
 8048e4a:	8d 44 24 30          	lea    0x30(%esp),%eax
 8048e4e:	39 c3                	cmp    %eax,%ebx
 8048e50:	76 2c                	jbe    8048e7e <format_integer+0x2c0>
 8048e52:	89 c7                	mov    %eax,%edi
 8048e54:	89 74 24 08          	mov    %esi,0x8(%esp)
 8048e58:	8b b4 24 9c 00 00 00 	mov    0x9c(%esp),%esi
 8048e5f:	8b ac 24 a0 00 00 00 	mov    0xa0(%esp),%ebp
    output (*--cp, aux);
 8048e66:	83 eb 01             	sub    $0x1,%ebx
 8048e69:	83 ec 08             	sub    $0x8,%esp
 8048e6c:	55                   	push   %ebp
 8048e6d:	0f be 03             	movsbl (%ebx),%eax
 8048e70:	50                   	push   %eax
 8048e71:	ff d6                	call   *%esi
      output ('0', aux);
      output (x, aux); 
    }
  if (c->flags & ZERO)
    output_dup ('0', pad_cnt, output, aux);
  while (cp > buf)
 8048e73:	83 c4 10             	add    $0x10,%esp
 8048e76:	39 fb                	cmp    %edi,%ebx
 8048e78:	75 ec                	jne    8048e66 <format_integer+0x2a8>
 8048e7a:	8b 74 24 08          	mov    0x8(%esp),%esi
    output (*--cp, aux);
  if (c->flags & MINUS)
 8048e7e:	8b 84 24 98 00 00 00 	mov    0x98(%esp),%eax
 8048e85:	f6 00 01             	testb  $0x1,(%eax)
 8048e88:	74 20                	je     8048eaa <format_integer+0x2ec>
    output_dup (' ', pad_cnt, output, aux);
 8048e8a:	83 ec 0c             	sub    $0xc,%esp
 8048e8d:	ff b4 24 ac 00 00 00 	pushl  0xac(%esp)
 8048e94:	8b 8c 24 ac 00 00 00 	mov    0xac(%esp),%ecx
 8048e9b:	89 f2                	mov    %esi,%edx
 8048e9d:	b8 20 00 00 00       	mov    $0x20,%eax
 8048ea2:	e8 ea fc ff ff       	call   8048b91 <output_dup>
 8048ea7:	83 c4 10             	add    $0x10,%esp
}
 8048eaa:	83 c4 7c             	add    $0x7c,%esp
 8048ead:	5b                   	pop    %ebx
 8048eae:	5e                   	pop    %esi
 8048eaf:	5f                   	pop    %edi
 8048eb0:	5d                   	pop    %ebp
 8048eb1:	c3                   	ret    

08048eb2 <format_string>:
   auxiliary data AUX. */
static void
format_string (const char *string, int length,
               struct printf_conversion *c,
               void (*output) (char, void *), void *aux) 
{
 8048eb2:	55                   	push   %ebp
 8048eb3:	57                   	push   %edi
 8048eb4:	56                   	push   %esi
 8048eb5:	53                   	push   %ebx
 8048eb6:	83 ec 1c             	sub    $0x1c,%esp
 8048eb9:	89 c5                	mov    %eax,%ebp
 8048ebb:	89 d6                	mov    %edx,%esi
 8048ebd:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
 8048ec1:	8b 7c 24 34          	mov    0x34(%esp),%edi
  int i;
  if (c->width > length && (c->flags & MINUS) == 0)
 8048ec5:	8b 51 04             	mov    0x4(%ecx),%edx
 8048ec8:	39 f2                	cmp    %esi,%edx
 8048eca:	7e 6c                	jle    8048f38 <format_string+0x86>
 8048ecc:	f6 01 01             	testb  $0x1,(%ecx)
 8048ecf:	75 61                	jne    8048f32 <format_string+0x80>
    output_dup (' ', c->width - length, output, aux);
 8048ed1:	29 f2                	sub    %esi,%edx
 8048ed3:	83 ec 0c             	sub    $0xc,%esp
 8048ed6:	57                   	push   %edi
 8048ed7:	8b 4c 24 40          	mov    0x40(%esp),%ecx
 8048edb:	b8 20 00 00 00       	mov    $0x20,%eax
 8048ee0:	e8 ac fc ff ff       	call   8048b91 <output_dup>
  for (i = 0; i < length; i++)
 8048ee5:	83 c4 10             	add    $0x10,%esp
 8048ee8:	85 f6                	test   %esi,%esi
 8048eea:	7e 1d                	jle    8048f09 <format_string+0x57>
   auxiliary data AUX. */
static void
format_string (const char *string, int length,
               struct printf_conversion *c,
               void (*output) (char, void *), void *aux) 
{
 8048eec:	bb 00 00 00 00       	mov    $0x0,%ebx
  int i;
  if (c->width > length && (c->flags & MINUS) == 0)
    output_dup (' ', c->width - length, output, aux);
  for (i = 0; i < length; i++)
    output (string[i], aux);
 8048ef1:	83 ec 08             	sub    $0x8,%esp
 8048ef4:	57                   	push   %edi
 8048ef5:	0f be 44 1d 00       	movsbl 0x0(%ebp,%ebx,1),%eax
 8048efa:	50                   	push   %eax
 8048efb:	ff 54 24 40          	call   *0x40(%esp)
               void (*output) (char, void *), void *aux) 
{
  int i;
  if (c->width > length && (c->flags & MINUS) == 0)
    output_dup (' ', c->width - length, output, aux);
  for (i = 0; i < length; i++)
 8048eff:	83 c3 01             	add    $0x1,%ebx
 8048f02:	83 c4 10             	add    $0x10,%esp
 8048f05:	39 de                	cmp    %ebx,%esi
 8048f07:	7f e8                	jg     8048ef1 <format_string+0x3f>
    output (string[i], aux);
  if (c->width > length && (c->flags & MINUS) != 0)
 8048f09:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8048f0d:	8b 50 04             	mov    0x4(%eax),%edx
 8048f10:	39 d6                	cmp    %edx,%esi
 8048f12:	7d 28                	jge    8048f3c <format_string+0x8a>
 8048f14:	f6 00 01             	testb  $0x1,(%eax)
 8048f17:	74 23                	je     8048f3c <format_string+0x8a>
    output_dup (' ', c->width - length, output, aux);
 8048f19:	29 f2                	sub    %esi,%edx
 8048f1b:	83 ec 0c             	sub    $0xc,%esp
 8048f1e:	57                   	push   %edi
 8048f1f:	8b 4c 24 40          	mov    0x40(%esp),%ecx
 8048f23:	b8 20 00 00 00       	mov    $0x20,%eax
 8048f28:	e8 64 fc ff ff       	call   8048b91 <output_dup>
 8048f2d:	83 c4 10             	add    $0x10,%esp
}
 8048f30:	eb 0a                	jmp    8048f3c <format_string+0x8a>
               void (*output) (char, void *), void *aux) 
{
  int i;
  if (c->width > length && (c->flags & MINUS) == 0)
    output_dup (' ', c->width - length, output, aux);
  for (i = 0; i < length; i++)
 8048f32:	85 f6                	test   %esi,%esi
 8048f34:	7f b6                	jg     8048eec <format_string+0x3a>
 8048f36:	eb e1                	jmp    8048f19 <format_string+0x67>
 8048f38:	85 f6                	test   %esi,%esi
 8048f3a:	7f b0                	jg     8048eec <format_string+0x3a>
    output (string[i], aux);
  if (c->width > length && (c->flags & MINUS) != 0)
    output_dup (' ', c->width - length, output, aux);
}
 8048f3c:	83 c4 1c             	add    $0x1c,%esp
 8048f3f:	5b                   	pop    %ebx
 8048f40:	5e                   	pop    %esi
 8048f41:	5f                   	pop    %edi
 8048f42:	5d                   	pop    %ebp
 8048f43:	c3                   	ret    

08048f44 <printf>:
   In the kernel, the console is both the video display and first
   serial port.
   In userspace, the console is file descriptor 1. */
int
printf (const char *format, ...) 
{
 8048f44:	83 ec 0c             	sub    $0xc,%esp
  va_list args;
  int retval;

  va_start (args, format);
 8048f47:	8d 44 24 14          	lea    0x14(%esp),%eax
  retval = vprintf (format, args);
 8048f4b:	83 ec 08             	sub    $0x8,%esp
 8048f4e:	50                   	push   %eax
 8048f4f:	ff 74 24 1c          	pushl  0x1c(%esp)
 8048f53:	e8 31 16 00 00       	call   804a589 <vprintf>
  va_end (args);

  return retval;
}
 8048f58:	83 c4 1c             	add    $0x1c,%esp
 8048f5b:	c3                   	ret    

08048f5c <__printf>:
/* Wrapper for __vprintf() that converts varargs into a
   va_list. */
void
__printf (const char *format,
          void (*output) (char, void *), void *aux, ...) 
{
 8048f5c:	83 ec 0c             	sub    $0xc,%esp
  va_list args;

  va_start (args, aux);
 8048f5f:	8d 44 24 1c          	lea    0x1c(%esp),%eax
  __vprintf (format, args, output, aux);
 8048f63:	ff 74 24 18          	pushl  0x18(%esp)
 8048f67:	ff 74 24 18          	pushl  0x18(%esp)
 8048f6b:	50                   	push   %eax
 8048f6c:	ff 74 24 1c          	pushl  0x1c(%esp)
 8048f70:	e8 04 00 00 00       	call   8048f79 <__vprintf>
  va_end (args);
}
 8048f75:	83 c4 1c             	add    $0x1c,%esp
 8048f78:	c3                   	ret    

08048f79 <__vprintf>:
                           void (*output) (char, void *), void *aux);

void
__vprintf (const char *format, va_list args,
           void (*output) (char, void *), void *aux)
{
 8048f79:	55                   	push   %ebp
 8048f7a:	57                   	push   %edi
 8048f7b:	56                   	push   %esi
 8048f7c:	53                   	push   %ebx
 8048f7d:	83 ec 4c             	sub    $0x4c,%esp
 8048f80:	8b 74 24 60          	mov    0x60(%esp),%esi
 8048f84:	8b 6c 24 64          	mov    0x64(%esp),%ebp
  for (; *format != '\0'; format++)
 8048f88:	0f b6 06             	movzbl (%esi),%eax
 8048f8b:	84 c0                	test   %al,%al
 8048f8d:	0f 84 49 06 00 00    	je     80495dc <__vprintf+0x663>
    {
      struct printf_conversion c;

      /* Literally copy non-conversions to output. */
      if (*format != '%') 
 8048f93:	3c 25                	cmp    $0x25,%al
 8048f95:	74 19                	je     8048fb0 <__vprintf+0x37>
        {
          output (*format, aux);
 8048f97:	83 ec 08             	sub    $0x8,%esp
 8048f9a:	ff 74 24 74          	pushl  0x74(%esp)
 8048f9e:	0f be c0             	movsbl %al,%eax
 8048fa1:	50                   	push   %eax
 8048fa2:	ff 54 24 78          	call   *0x78(%esp)
          continue;
 8048fa6:	83 c4 10             	add    $0x10,%esp
 8048fa9:	89 f3                	mov    %esi,%ebx
 8048fab:	e9 12 06 00 00       	jmp    80495c2 <__vprintf+0x649>
        }
      format++;
 8048fb0:	8d 5e 01             	lea    0x1(%esi),%ebx

      /* %% => %. */
      if (*format == '%') 
 8048fb3:	80 7e 01 25          	cmpb   $0x25,0x1(%esi)
 8048fb7:	75 15                	jne    8048fce <__vprintf+0x55>
        {
          output ('%', aux);
 8048fb9:	83 ec 08             	sub    $0x8,%esp
 8048fbc:	ff 74 24 74          	pushl  0x74(%esp)
 8048fc0:	6a 25                	push   $0x25
 8048fc2:	ff 54 24 78          	call   *0x78(%esp)
          continue;
 8048fc6:	83 c4 10             	add    $0x10,%esp
 8048fc9:	e9 f4 05 00 00       	jmp    80495c2 <__vprintf+0x649>
static const char *
parse_conversion (const char *format, struct printf_conversion *c,
                  va_list *args) 
{
  /* Parse flag characters. */
  c->flags = 0;
 8048fce:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%esp)
 8048fd5:	00 
 8048fd6:	bf 00 00 00 00       	mov    $0x0,%edi
 8048fdb:	be 00 00 00 00       	mov    $0x0,%esi
 8048fe0:	eb 07                	jmp    8048fe9 <__vprintf+0x70>
  for (;;) 
    {
      switch (*format++) 
 8048fe2:	89 cb                	mov    %ecx,%ebx
 8048fe4:	bf 01 00 00 00       	mov    $0x1,%edi
 8048fe9:	8d 4b 01             	lea    0x1(%ebx),%ecx
 8048fec:	0f b6 41 ff          	movzbl -0x1(%ecx),%eax
 8048ff0:	8d 50 e0             	lea    -0x20(%eax),%edx
 8048ff3:	80 fa 10             	cmp    $0x10,%dl
 8048ff6:	77 28                	ja     8049020 <__vprintf+0xa7>
 8048ff8:	0f b6 d2             	movzbl %dl,%edx
 8048ffb:	ff 24 95 3c a6 04 08 	jmp    *0x804a63c(,%edx,4)
        {
        case '-':
          c->flags |= MINUS;
 8049002:	83 ce 01             	or     $0x1,%esi
 8049005:	eb db                	jmp    8048fe2 <__vprintf+0x69>
          break;
        case '+':
          c->flags |= PLUS;
 8049007:	83 ce 02             	or     $0x2,%esi
 804900a:	eb d6                	jmp    8048fe2 <__vprintf+0x69>
          break;
        case ' ':
          c->flags |= SPACE;
 804900c:	83 ce 04             	or     $0x4,%esi
 804900f:	eb d1                	jmp    8048fe2 <__vprintf+0x69>
          break;
        case '#':
          c->flags |= POUND;
 8049011:	83 ce 08             	or     $0x8,%esi
 8049014:	eb cc                	jmp    8048fe2 <__vprintf+0x69>
          break;
        case '0':
          c->flags |= ZERO;
 8049016:	83 ce 10             	or     $0x10,%esi
 8049019:	eb c7                	jmp    8048fe2 <__vprintf+0x69>
          break;
        case '\'':
          c->flags |= GROUP;
 804901b:	83 ce 20             	or     $0x20,%esi
 804901e:	eb c2                	jmp    8048fe2 <__vprintf+0x69>
 8049020:	89 fa                	mov    %edi,%edx
 8049022:	84 d2                	test   %dl,%dl
 8049024:	74 13                	je     8049039 <__vprintf+0xc0>
 8049026:	89 74 24 30          	mov    %esi,0x30(%esp)
          format--;
          goto not_a_flag;
        }
    }
 not_a_flag:
  if (c->flags & MINUS)
 804902a:	f7 c6 01 00 00 00    	test   $0x1,%esi
 8049030:	74 07                	je     8049039 <__vprintf+0xc0>
    c->flags &= ~ZERO;
 8049032:	83 e6 ef             	and    $0xffffffef,%esi
 8049035:	89 74 24 30          	mov    %esi,0x30(%esp)
  if (c->flags & PLUS)
 8049039:	8b 54 24 30          	mov    0x30(%esp),%edx
 804903d:	f6 c2 02             	test   $0x2,%dl
 8049040:	74 07                	je     8049049 <__vprintf+0xd0>
    c->flags &= ~SPACE;
 8049042:	83 e2 fb             	and    $0xfffffffb,%edx
 8049045:	89 54 24 30          	mov    %edx,0x30(%esp)

  /* Parse field width. */
  c->width = 0;
 8049049:	c7 44 24 34 00 00 00 	movl   $0x0,0x34(%esp)
 8049050:	00 
  if (*format == '*')
 8049051:	3c 2a                	cmp    $0x2a,%al
 8049053:	74 12                	je     8049067 <__vprintf+0xee>
      format++;
      c->width = va_arg (*args, int);
    }
  else 
    {
      for (; isdigit (*format); format++)
 8049055:	0f be d0             	movsbl %al,%edx
 8049058:	83 ea 30             	sub    $0x30,%edx
 804905b:	b9 00 00 00 00       	mov    $0x0,%ecx
 8049060:	83 fa 09             	cmp    $0x9,%edx
 8049063:	76 10                	jbe    8049075 <__vprintf+0xfc>
 8049065:	eb 40                	jmp    80490a7 <__vprintf+0x12e>
  /* Parse field width. */
  c->width = 0;
  if (*format == '*')
    {
      format++;
      c->width = va_arg (*args, int);
 8049067:	8b 45 00             	mov    0x0(%ebp),%eax
 804906a:	89 44 24 34          	mov    %eax,0x34(%esp)
 804906e:	8d 6d 04             	lea    0x4(%ebp),%ebp
{
  /* Parse flag characters. */
  c->flags = 0;
  for (;;) 
    {
      switch (*format++) 
 8049071:	89 cb                	mov    %ecx,%ebx
 8049073:	eb 1f                	jmp    8049094 <__vprintf+0x11b>
      c->width = va_arg (*args, int);
    }
  else 
    {
      for (; isdigit (*format); format++)
        c->width = c->width * 10 + *format - '0';
 8049075:	8d 14 89             	lea    (%ecx,%ecx,4),%edx
 8049078:	0f be c0             	movsbl %al,%eax
 804907b:	8d 4c 50 d0          	lea    -0x30(%eax,%edx,2),%ecx
      format++;
      c->width = va_arg (*args, int);
    }
  else 
    {
      for (; isdigit (*format); format++)
 804907f:	83 c3 01             	add    $0x1,%ebx
 8049082:	0f b6 03             	movzbl (%ebx),%eax
 8049085:	0f be d0             	movsbl %al,%edx
 8049088:	83 ea 30             	sub    $0x30,%edx
 804908b:	83 fa 09             	cmp    $0x9,%edx
 804908e:	76 e5                	jbe    8049075 <__vprintf+0xfc>
 8049090:	89 4c 24 34          	mov    %ecx,0x34(%esp)
        c->width = c->width * 10 + *format - '0';
    }
  if (c->width < 0) 
 8049094:	8b 44 24 34          	mov    0x34(%esp),%eax
 8049098:	85 c0                	test   %eax,%eax
 804909a:	79 0b                	jns    80490a7 <__vprintf+0x12e>
    {
      c->width = -c->width;
 804909c:	f7 d8                	neg    %eax
 804909e:	89 44 24 34          	mov    %eax,0x34(%esp)
      c->flags |= MINUS;
 80490a2:	83 4c 24 30 01       	orl    $0x1,0x30(%esp)
    }
      
  /* Parse precision. */
  c->precision = -1;
 80490a7:	c7 44 24 38 ff ff ff 	movl   $0xffffffff,0x38(%esp)
 80490ae:	ff 
  if (*format == '.') 
 80490af:	80 3b 2e             	cmpb   $0x2e,(%ebx)
 80490b2:	0f 85 1b 05 00 00    	jne    80495d3 <__vprintf+0x65a>
    {
      format++;
      if (*format == '*') 
 80490b8:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
 80490bc:	3c 2a                	cmp    $0x2a,%al
 80490be:	75 0f                	jne    80490cf <__vprintf+0x156>
        {
          format++;
 80490c0:	83 c3 02             	add    $0x2,%ebx
          c->precision = va_arg (*args, int);
 80490c3:	8b 45 00             	mov    0x0(%ebp),%eax
 80490c6:	89 44 24 38          	mov    %eax,0x38(%esp)
 80490ca:	8d 6d 04             	lea    0x4(%ebp),%ebp
 80490cd:	eb 3a                	jmp    8049109 <__vprintf+0x190>
      
  /* Parse precision. */
  c->precision = -1;
  if (*format == '.') 
    {
      format++;
 80490cf:	83 c3 01             	add    $0x1,%ebx
          format++;
          c->precision = va_arg (*args, int);
        }
      else 
        {
          c->precision = 0;
 80490d2:	c7 44 24 38 00 00 00 	movl   $0x0,0x38(%esp)
 80490d9:	00 
          for (; isdigit (*format); format++)
 80490da:	0f be d0             	movsbl %al,%edx
 80490dd:	83 ea 30             	sub    $0x30,%edx
 80490e0:	83 fa 09             	cmp    $0x9,%edx
 80490e3:	77 39                	ja     804911e <__vprintf+0x1a5>
 80490e5:	b9 00 00 00 00       	mov    $0x0,%ecx
            c->precision = c->precision * 10 + *format - '0';
 80490ea:	8d 14 89             	lea    (%ecx,%ecx,4),%edx
 80490ed:	0f be c0             	movsbl %al,%eax
 80490f0:	8d 4c 50 d0          	lea    -0x30(%eax,%edx,2),%ecx
          c->precision = va_arg (*args, int);
        }
      else 
        {
          c->precision = 0;
          for (; isdigit (*format); format++)
 80490f4:	83 c3 01             	add    $0x1,%ebx
 80490f7:	0f b6 03             	movzbl (%ebx),%eax
 80490fa:	0f be d0             	movsbl %al,%edx
 80490fd:	83 ea 30             	sub    $0x30,%edx
 8049100:	83 fa 09             	cmp    $0x9,%edx
 8049103:	76 e5                	jbe    80490ea <__vprintf+0x171>
 8049105:	89 4c 24 38          	mov    %ecx,0x38(%esp)
            c->precision = c->precision * 10 + *format - '0';
        }
      if (c->precision < 0) 
 8049109:	8b 4c 24 38          	mov    0x38(%esp),%ecx
 804910d:	85 c9                	test   %ecx,%ecx
 804910f:	79 12                	jns    8049123 <__vprintf+0x1aa>
        c->precision = -1;
 8049111:	c7 44 24 38 ff ff ff 	movl   $0xffffffff,0x38(%esp)
 8049118:	ff 
 8049119:	e9 b5 04 00 00       	jmp    80495d3 <__vprintf+0x65a>
    }
  if (c->precision >= 0)
 804911e:	b9 00 00 00 00       	mov    $0x0,%ecx
    c->flags &= ~ZERO;
 8049123:	83 64 24 30 ef       	andl   $0xffffffef,0x30(%esp)

  /* Parse type. */
  c->type = INT;
 8049128:	c7 44 24 3c 03 00 00 	movl   $0x3,0x3c(%esp)
 804912f:	00 
  switch (*format++) 
 8049130:	8d 73 01             	lea    0x1(%ebx),%esi
 8049133:	0f b6 03             	movzbl (%ebx),%eax
 8049136:	8d 50 98             	lea    -0x68(%eax),%edx
 8049139:	80 fa 12             	cmp    $0x12,%dl
 804913c:	0f 87 06 01 00 00    	ja     8049248 <__vprintf+0x2cf>
 8049142:	0f b6 d2             	movzbl %dl,%edx
 8049145:	ff 24 95 80 a6 04 08 	jmp    *0x804a680(,%edx,4)
    {
    case 'h':
      if (*format == 'h') 
 804914c:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
 8049150:	3c 68                	cmp    $0x68,%al
 8049152:	75 25                	jne    8049179 <__vprintf+0x200>
        {
          format++;
 8049154:	8d 73 02             	lea    0x2(%ebx),%esi
          c->type = CHAR;
 8049157:	c7 44 24 3c 01 00 00 	movl   $0x1,0x3c(%esp)
 804915e:	00 

      /* Parse conversion specifiers. */
      format = parse_conversion (format, &c, &args);

      /* Do conversion. */
      switch (*format) 
 804915f:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
 8049163:	8d 50 bb             	lea    -0x45(%eax),%edx
 8049166:	80 fa 33             	cmp    $0x33,%dl
 8049169:	0f 87 38 04 00 00    	ja     80495a7 <__vprintf+0x62e>
 804916f:	0f b6 d2             	movzbl %dl,%edx
 8049172:	ff 24 95 cc a6 04 08 	jmp    *0x804a6cc(,%edx,4)
        {
          format++;
          c->type = CHAR;
        }
      else
        c->type = SHORT;
 8049179:	c7 44 24 3c 02 00 00 	movl   $0x2,0x3c(%esp)
 8049180:	00 

      /* Parse conversion specifiers. */
      format = parse_conversion (format, &c, &args);

      /* Do conversion. */
      switch (*format) 
 8049181:	8d 50 bb             	lea    -0x45(%eax),%edx
 8049184:	80 fa 33             	cmp    $0x33,%dl
 8049187:	0f 87 1a 04 00 00    	ja     80495a7 <__vprintf+0x62e>
 804918d:	0f b6 d2             	movzbl %dl,%edx
 8049190:	ff 24 95 9c a7 04 08 	jmp    *0x804a79c(,%edx,4)
      else
        c->type = SHORT;
      break;
      
    case 'j':
      c->type = INTMAX;
 8049197:	c7 44 24 3c 04 00 00 	movl   $0x4,0x3c(%esp)
 804919e:	00 

      /* Parse conversion specifiers. */
      format = parse_conversion (format, &c, &args);

      /* Do conversion. */
      switch (*format) 
 804919f:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
 80491a3:	8d 50 bb             	lea    -0x45(%eax),%edx
 80491a6:	80 fa 33             	cmp    $0x33,%dl
 80491a9:	0f 87 f8 03 00 00    	ja     80495a7 <__vprintf+0x62e>
 80491af:	0f b6 d2             	movzbl %dl,%edx
 80491b2:	ff 24 95 6c a8 04 08 	jmp    *0x804a86c(,%edx,4)
    case 'j':
      c->type = INTMAX;
      break;

    case 'l':
      if (*format == 'l')
 80491b9:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
 80491bd:	3c 6c                	cmp    $0x6c,%al
 80491bf:	75 25                	jne    80491e6 <__vprintf+0x26d>
        {
          format++;
 80491c1:	8d 73 02             	lea    0x2(%ebx),%esi
          c->type = LONGLONG;
 80491c4:	c7 44 24 3c 06 00 00 	movl   $0x6,0x3c(%esp)
 80491cb:	00 

      /* Parse conversion specifiers. */
      format = parse_conversion (format, &c, &args);

      /* Do conversion. */
      switch (*format) 
 80491cc:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
 80491d0:	8d 50 bb             	lea    -0x45(%eax),%edx
 80491d3:	80 fa 33             	cmp    $0x33,%dl
 80491d6:	0f 87 cb 03 00 00    	ja     80495a7 <__vprintf+0x62e>
 80491dc:	0f b6 d2             	movzbl %dl,%edx
 80491df:	ff 24 95 3c a9 04 08 	jmp    *0x804a93c(,%edx,4)
        {
          format++;
          c->type = LONGLONG;
        }
      else
        c->type = LONG;
 80491e6:	c7 44 24 3c 05 00 00 	movl   $0x5,0x3c(%esp)
 80491ed:	00 

      /* Parse conversion specifiers. */
      format = parse_conversion (format, &c, &args);

      /* Do conversion. */
      switch (*format) 
 80491ee:	8d 50 bb             	lea    -0x45(%eax),%edx
 80491f1:	80 fa 33             	cmp    $0x33,%dl
 80491f4:	0f 87 ad 03 00 00    	ja     80495a7 <__vprintf+0x62e>
 80491fa:	0f b6 d2             	movzbl %dl,%edx
 80491fd:	ff 24 95 0c aa 04 08 	jmp    *0x804aa0c(,%edx,4)
      else
        c->type = LONG;
      break;

    case 't':
      c->type = PTRDIFFT;
 8049204:	c7 44 24 3c 07 00 00 	movl   $0x7,0x3c(%esp)
 804920b:	00 

      /* Parse conversion specifiers. */
      format = parse_conversion (format, &c, &args);

      /* Do conversion. */
      switch (*format) 
 804920c:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
 8049210:	8d 50 bb             	lea    -0x45(%eax),%edx
 8049213:	80 fa 33             	cmp    $0x33,%dl
 8049216:	0f 87 8b 03 00 00    	ja     80495a7 <__vprintf+0x62e>
 804921c:	0f b6 d2             	movzbl %dl,%edx
 804921f:	ff 24 95 dc aa 04 08 	jmp    *0x804aadc(,%edx,4)
    case 't':
      c->type = PTRDIFFT;
      break;

    case 'z':
      c->type = SIZET;
 8049226:	c7 44 24 3c 08 00 00 	movl   $0x8,0x3c(%esp)
 804922d:	00 

      /* Parse conversion specifiers. */
      format = parse_conversion (format, &c, &args);

      /* Do conversion. */
      switch (*format) 
 804922e:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
 8049232:	8d 50 bb             	lea    -0x45(%eax),%edx
 8049235:	80 fa 33             	cmp    $0x33,%dl
 8049238:	0f 87 69 03 00 00    	ja     80495a7 <__vprintf+0x62e>
 804923e:	0f b6 d2             	movzbl %dl,%edx
 8049241:	ff 24 95 ac ab 04 08 	jmp    *0x804abac(,%edx,4)
 8049248:	8d 50 bb             	lea    -0x45(%eax),%edx
 804924b:	80 fa 33             	cmp    $0x33,%dl
 804924e:	0f 87 51 03 00 00    	ja     80495a5 <__vprintf+0x62c>
 8049254:	0f b6 d2             	movzbl %dl,%edx
 8049257:	ff 24 95 7c ac 04 08 	jmp    *0x804ac7c(,%edx,4)
 804925e:	89 de                	mov    %ebx,%esi
        case 'i': 
          {
            /* Signed integer conversions. */
            intmax_t value;
            
            switch (c.type) 
 8049260:	83 7c 24 3c 08       	cmpl   $0x8,0x3c(%esp)
 8049265:	0f 87 c4 00 00 00    	ja     804932f <__vprintf+0x3b6>
 804926b:	8b 44 24 3c          	mov    0x3c(%esp),%eax
 804926f:	ff 24 85 4c ad 04 08 	jmp    *0x804ad4c(,%eax,4)
              {
              case CHAR: 
                value = (signed char) va_arg (args, int);
 8049276:	0f be 4d 00          	movsbl 0x0(%ebp),%ecx
 804927a:	89 c8                	mov    %ecx,%eax
 804927c:	99                   	cltd   
 804927d:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049281:	89 54 24 0c          	mov    %edx,0xc(%esp)
 8049285:	8d 6d 04             	lea    0x4(%ebp),%ebp
                break;
 8049288:	e9 bb 00 00 00       	jmp    8049348 <__vprintf+0x3cf>
              case SHORT:
                value = (short) va_arg (args, int);
 804928d:	0f bf 4d 00          	movswl 0x0(%ebp),%ecx
 8049291:	89 c8                	mov    %ecx,%eax
 8049293:	99                   	cltd   
 8049294:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049298:	89 54 24 0c          	mov    %edx,0xc(%esp)
 804929c:	8d 6d 04             	lea    0x4(%ebp),%ebp
                break;
 804929f:	e9 a4 00 00 00       	jmp    8049348 <__vprintf+0x3cf>
              case INT:
                value = va_arg (args, int);
 80492a4:	8b 4d 00             	mov    0x0(%ebp),%ecx
 80492a7:	89 c8                	mov    %ecx,%eax
 80492a9:	99                   	cltd   
 80492aa:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80492ae:	89 54 24 0c          	mov    %edx,0xc(%esp)
 80492b2:	8d 6d 04             	lea    0x4(%ebp),%ebp
                break;
 80492b5:	e9 8e 00 00 00       	jmp    8049348 <__vprintf+0x3cf>
              case INTMAX:
                value = va_arg (args, intmax_t);
 80492ba:	8b 45 00             	mov    0x0(%ebp),%eax
 80492bd:	8b 55 04             	mov    0x4(%ebp),%edx
 80492c0:	89 44 24 08          	mov    %eax,0x8(%esp)
 80492c4:	89 54 24 0c          	mov    %edx,0xc(%esp)
 80492c8:	8d 6d 08             	lea    0x8(%ebp),%ebp
                break;
 80492cb:	eb 7b                	jmp    8049348 <__vprintf+0x3cf>
              case LONG:
                value = va_arg (args, long);
 80492cd:	8b 4d 00             	mov    0x0(%ebp),%ecx
 80492d0:	89 c8                	mov    %ecx,%eax
 80492d2:	99                   	cltd   
 80492d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80492d7:	89 54 24 0c          	mov    %edx,0xc(%esp)
 80492db:	8d 6d 04             	lea    0x4(%ebp),%ebp
                break;
 80492de:	eb 68                	jmp    8049348 <__vprintf+0x3cf>
              case LONGLONG:
                value = va_arg (args, long long);
 80492e0:	8b 45 00             	mov    0x0(%ebp),%eax
 80492e3:	8b 55 04             	mov    0x4(%ebp),%edx
 80492e6:	89 44 24 08          	mov    %eax,0x8(%esp)
 80492ea:	89 54 24 0c          	mov    %edx,0xc(%esp)
 80492ee:	8d 6d 08             	lea    0x8(%ebp),%ebp
                break;
 80492f1:	eb 55                	jmp    8049348 <__vprintf+0x3cf>
              case PTRDIFFT:
                value = va_arg (args, ptrdiff_t);
 80492f3:	8b 4d 00             	mov    0x0(%ebp),%ecx
 80492f6:	89 c8                	mov    %ecx,%eax
 80492f8:	99                   	cltd   
 80492f9:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80492fd:	89 54 24 0c          	mov    %edx,0xc(%esp)
 8049301:	8d 6d 04             	lea    0x4(%ebp),%ebp
                break;
 8049304:	eb 42                	jmp    8049348 <__vprintf+0x3cf>
              case SIZET:
                value = va_arg (args, size_t);
 8049306:	8d 45 04             	lea    0x4(%ebp),%eax
 8049309:	8b 7d 00             	mov    0x0(%ebp),%edi
 804930c:	bd 00 00 00 00       	mov    $0x0,%ebp
 8049311:	89 7c 24 08          	mov    %edi,0x8(%esp)
 8049315:	89 6c 24 0c          	mov    %ebp,0xc(%esp)
 8049319:	89 c5                	mov    %eax,%ebp
                if (value > SIZE_MAX / 2)
 804931b:	81 ff ff ff ff 7f    	cmp    $0x7fffffff,%edi
 8049321:	76 25                	jbe    8049348 <__vprintf+0x3cf>
                  value = value - SIZE_MAX - 1;
 8049323:	83 44 24 08 00       	addl   $0x0,0x8(%esp)
 8049328:	83 54 24 0c ff       	adcl   $0xffffffff,0xc(%esp)
 804932d:	eb 19                	jmp    8049348 <__vprintf+0x3cf>
                break;
              default:
                NOT_REACHED ();
 804932f:	68 88 b2 04 08       	push   $0x804b288
 8049334:	68 70 ad 04 08       	push   $0x804ad70
 8049339:	68 dc 00 00 00       	push   $0xdc
 804933e:	68 07 af 04 08       	push   $0x804af07
 8049343:	e8 95 0f 00 00       	call   804a2dd <debug_panic>
              }

            format_integer (value < 0 ? -value : value,
 8049348:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804934c:	8b 5c 24 0c          	mov    0xc(%esp),%ebx
 8049350:	89 da                	mov    %ebx,%edx
 8049352:	c1 fa 1f             	sar    $0x1f,%edx
 8049355:	89 d7                	mov    %edx,%edi
 8049357:	31 cf                	xor    %ecx,%edi
 8049359:	89 7c 24 10          	mov    %edi,0x10(%esp)
 804935d:	89 d7                	mov    %edx,%edi
 804935f:	33 7c 24 0c          	xor    0xc(%esp),%edi
 8049363:	89 7c 24 14          	mov    %edi,0x14(%esp)
 8049367:	8b 4c 24 10          	mov    0x10(%esp),%ecx
 804936b:	8b 5c 24 14          	mov    0x14(%esp),%ebx
 804936f:	29 d1                	sub    %edx,%ecx
 8049371:	19 d3                	sbb    %edx,%ebx
 8049373:	89 c8                	mov    %ecx,%eax
 8049375:	89 da                	mov    %ebx,%edx
 8049377:	83 ec 0c             	sub    $0xc,%esp
 804937a:	ff 74 24 78          	pushl  0x78(%esp)
 804937e:	ff 74 24 78          	pushl  0x78(%esp)
 8049382:	8d 7c 24 44          	lea    0x44(%esp),%edi
 8049386:	57                   	push   %edi
 8049387:	68 ac ad 04 08       	push   $0x804adac
 804938c:	8b 4c 24 28          	mov    0x28(%esp),%ecx
 8049390:	c1 e9 1f             	shr    $0x1f,%ecx
 8049393:	51                   	push   %ecx
 8049394:	b9 01 00 00 00       	mov    $0x1,%ecx
 8049399:	e8 20 f8 ff ff       	call   8048bbe <format_integer>
                            true, value < 0, &base_d, &c, output, aux);
          }
          break;
 804939e:	83 c4 20             	add    $0x20,%esp
 80493a1:	89 f3                	mov    %esi,%ebx
 80493a3:	e9 1a 02 00 00       	jmp    80495c2 <__vprintf+0x649>
                break;
              case SHORT:
                value = (unsigned short) va_arg (args, unsigned);
                break;
              case INT:
                value = va_arg (args, unsigned);
 80493a8:	8b 75 00             	mov    0x0(%ebp),%esi
 80493ab:	bf 00 00 00 00       	mov    $0x0,%edi
 80493b0:	89 74 24 18          	mov    %esi,0x18(%esp)
 80493b4:	89 7c 24 1c          	mov    %edi,0x1c(%esp)
 80493b8:	8d 6d 04             	lea    0x4(%ebp),%ebp
                break;
 80493bb:	e9 9d 00 00 00       	jmp    804945d <__vprintf+0x4e4>
            const struct integer_base *b;

            switch (c.type) 
              {
              case CHAR: 
                value = (unsigned char) va_arg (args, unsigned);
 80493c0:	0f b6 55 00          	movzbl 0x0(%ebp),%edx
 80493c4:	89 54 24 18          	mov    %edx,0x18(%esp)
 80493c8:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
 80493cf:	00 
                break;
 80493d0:	89 f3                	mov    %esi,%ebx
            const struct integer_base *b;

            switch (c.type) 
              {
              case CHAR: 
                value = (unsigned char) va_arg (args, unsigned);
 80493d2:	8d 6d 04             	lea    0x4(%ebp),%ebp
                break;
 80493d5:	e9 83 00 00 00       	jmp    804945d <__vprintf+0x4e4>
              case SHORT:
                value = (unsigned short) va_arg (args, unsigned);
 80493da:	0f b7 55 00          	movzwl 0x0(%ebp),%edx
 80493de:	89 54 24 18          	mov    %edx,0x18(%esp)
 80493e2:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
 80493e9:	00 
                break;
 80493ea:	89 f3                	mov    %esi,%ebx
              {
              case CHAR: 
                value = (unsigned char) va_arg (args, unsigned);
                break;
              case SHORT:
                value = (unsigned short) va_arg (args, unsigned);
 80493ec:	8d 6d 04             	lea    0x4(%ebp),%ebp
                break;
 80493ef:	eb 6c                	jmp    804945d <__vprintf+0x4e4>
              case INT:
                value = va_arg (args, unsigned);
                break;
              case INTMAX:
                value = va_arg (args, uintmax_t);
 80493f1:	8b 4d 00             	mov    0x0(%ebp),%ecx
 80493f4:	8b 5d 04             	mov    0x4(%ebp),%ebx
 80493f7:	89 4c 24 18          	mov    %ecx,0x18(%esp)
 80493fb:	89 5c 24 1c          	mov    %ebx,0x1c(%esp)
                break;
 80493ff:	89 f3                	mov    %esi,%ebx
                break;
              case INT:
                value = va_arg (args, unsigned);
                break;
              case INTMAX:
                value = va_arg (args, uintmax_t);
 8049401:	8d 6d 08             	lea    0x8(%ebp),%ebp
                break;
 8049404:	eb 57                	jmp    804945d <__vprintf+0x4e4>
              case LONG:
                value = va_arg (args, unsigned long);
 8049406:	8b 4d 00             	mov    0x0(%ebp),%ecx
 8049409:	bb 00 00 00 00       	mov    $0x0,%ebx
 804940e:	89 4c 24 18          	mov    %ecx,0x18(%esp)
 8049412:	89 5c 24 1c          	mov    %ebx,0x1c(%esp)
                break;
 8049416:	89 f3                	mov    %esi,%ebx
                break;
              case INTMAX:
                value = va_arg (args, uintmax_t);
                break;
              case LONG:
                value = va_arg (args, unsigned long);
 8049418:	8d 6d 04             	lea    0x4(%ebp),%ebp
                break;
 804941b:	eb 40                	jmp    804945d <__vprintf+0x4e4>
              case LONGLONG:
                value = va_arg (args, unsigned long long);
 804941d:	8b 4d 00             	mov    0x0(%ebp),%ecx
 8049420:	8b 5d 04             	mov    0x4(%ebp),%ebx
 8049423:	89 4c 24 18          	mov    %ecx,0x18(%esp)
 8049427:	89 5c 24 1c          	mov    %ebx,0x1c(%esp)
                break;
 804942b:	89 f3                	mov    %esi,%ebx
                break;
              case LONG:
                value = va_arg (args, unsigned long);
                break;
              case LONGLONG:
                value = va_arg (args, unsigned long long);
 804942d:	8d 6d 08             	lea    0x8(%ebp),%ebp
                break;
 8049430:	eb 2b                	jmp    804945d <__vprintf+0x4e4>
              case PTRDIFFT:
                value = va_arg (args, ptrdiff_t);
#if UINTMAX_MAX != PTRDIFF_MAX
                value &= ((uintmax_t) PTRDIFF_MAX << 1) | 1;
 8049432:	8b 7d 00             	mov    0x0(%ebp),%edi
 8049435:	89 7c 24 18          	mov    %edi,0x18(%esp)
 8049439:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
 8049440:	00 
#endif
                break;
 8049441:	89 f3                	mov    %esi,%ebx
                break;
              case LONGLONG:
                value = va_arg (args, unsigned long long);
                break;
              case PTRDIFFT:
                value = va_arg (args, ptrdiff_t);
 8049443:	8d 6d 04             	lea    0x4(%ebp),%ebp
#if UINTMAX_MAX != PTRDIFF_MAX
                value &= ((uintmax_t) PTRDIFF_MAX << 1) | 1;
#endif
                break;
 8049446:	eb 15                	jmp    804945d <__vprintf+0x4e4>
              case SIZET:
                value = va_arg (args, size_t);
 8049448:	8b 4d 00             	mov    0x0(%ebp),%ecx
 804944b:	bb 00 00 00 00       	mov    $0x0,%ebx
 8049450:	89 4c 24 18          	mov    %ecx,0x18(%esp)
 8049454:	89 5c 24 1c          	mov    %ebx,0x1c(%esp)
                break;
 8049458:	89 f3                	mov    %esi,%ebx
#if UINTMAX_MAX != PTRDIFF_MAX
                value &= ((uintmax_t) PTRDIFF_MAX << 1) | 1;
#endif
                break;
              case SIZET:
                value = va_arg (args, size_t);
 804945a:	8d 6d 04             	lea    0x4(%ebp),%ebp
                break;
              default:
                NOT_REACHED ();
              }

            switch (*format) 
 804945d:	3c 6f                	cmp    $0x6f,%al
 804945f:	74 3b                	je     804949c <__vprintf+0x523>
 8049461:	3c 6f                	cmp    $0x6f,%al
 8049463:	7f 06                	jg     804946b <__vprintf+0x4f2>
 8049465:	3c 58                	cmp    $0x58,%al
 8049467:	74 13                	je     804947c <__vprintf+0x503>
 8049469:	eb 18                	jmp    8049483 <__vprintf+0x50a>
 804946b:	3c 75                	cmp    $0x75,%al
 804946d:	74 06                	je     8049475 <__vprintf+0x4fc>
 804946f:	3c 78                	cmp    $0x78,%al
 8049471:	74 30                	je     80494a3 <__vprintf+0x52a>
 8049473:	eb 0e                	jmp    8049483 <__vprintf+0x50a>
              {
              case 'o': b = &base_o; break;
              case 'u': b = &base_d; break;
 8049475:	b8 ac ad 04 08       	mov    $0x804adac,%eax
 804947a:	eb 2c                	jmp    80494a8 <__vprintf+0x52f>
              case 'x': b = &base_x; break;
              case 'X': b = &base_X; break;
 804947c:	b8 7c ad 04 08       	mov    $0x804ad7c,%eax
 8049481:	eb 25                	jmp    80494a8 <__vprintf+0x52f>
              default: NOT_REACHED ();
 8049483:	68 88 b2 04 08       	push   $0x804b288
 8049488:	68 70 ad 04 08       	push   $0x804ad70
 804948d:	68 14 01 00 00       	push   $0x114
 8049492:	68 07 af 04 08       	push   $0x804af07
 8049497:	e8 41 0e 00 00       	call   804a2dd <debug_panic>
                NOT_REACHED ();
              }

            switch (*format) 
              {
              case 'o': b = &base_o; break;
 804949c:	b8 9c ad 04 08       	mov    $0x804ad9c,%eax
 80494a1:	eb 05                	jmp    80494a8 <__vprintf+0x52f>
              case 'u': b = &base_d; break;
              case 'x': b = &base_x; break;
 80494a3:	b8 8c ad 04 08       	mov    $0x804ad8c,%eax
              case 'X': b = &base_X; break;
              default: NOT_REACHED ();
              }

            format_integer (value, false, false, b, &c, output, aux);
 80494a8:	83 ec 0c             	sub    $0xc,%esp
 80494ab:	ff 74 24 78          	pushl  0x78(%esp)
 80494af:	ff 74 24 78          	pushl  0x78(%esp)
 80494b3:	8d 7c 24 44          	lea    0x44(%esp),%edi
 80494b7:	57                   	push   %edi
 80494b8:	50                   	push   %eax
 80494b9:	6a 00                	push   $0x0
 80494bb:	b9 00 00 00 00       	mov    $0x0,%ecx
 80494c0:	8b 44 24 38          	mov    0x38(%esp),%eax
 80494c4:	8b 54 24 3c          	mov    0x3c(%esp),%edx
 80494c8:	e8 f1 f6 ff ff       	call   8048bbe <format_integer>
          }
          break;
 80494cd:	83 c4 20             	add    $0x20,%esp
 80494d0:	e9 ed 00 00 00       	jmp    80495c2 <__vprintf+0x649>

      /* Parse conversion specifiers. */
      format = parse_conversion (format, &c, &args);

      /* Do conversion. */
      switch (*format) 
 80494d5:	89 de                	mov    %ebx,%esi
          break;

        case 'c': 
          {
            /* Treat character as single-character string. */
            char ch = va_arg (args, int);
 80494d7:	8d 7d 04             	lea    0x4(%ebp),%edi
 80494da:	8b 45 00             	mov    0x0(%ebp),%eax
 80494dd:	88 44 24 2f          	mov    %al,0x2f(%esp)
            format_string (&ch, 1, &c, output, aux);
 80494e1:	83 ec 08             	sub    $0x8,%esp
 80494e4:	ff 74 24 74          	pushl  0x74(%esp)
 80494e8:	ff 74 24 74          	pushl  0x74(%esp)
 80494ec:	8d 4c 24 40          	lea    0x40(%esp),%ecx
 80494f0:	ba 01 00 00 00       	mov    $0x1,%edx
 80494f5:	8d 44 24 3f          	lea    0x3f(%esp),%eax
 80494f9:	e8 b4 f9 ff ff       	call   8048eb2 <format_string>
          }
          break;
 80494fe:	83 c4 10             	add    $0x10,%esp
 8049501:	89 f3                	mov    %esi,%ebx
          break;

        case 'c': 
          {
            /* Treat character as single-character string. */
            char ch = va_arg (args, int);
 8049503:	89 fd                	mov    %edi,%ebp
            format_string (&ch, 1, &c, output, aux);
          }
          break;
 8049505:	e9 b8 00 00 00       	jmp    80495c2 <__vprintf+0x649>

      /* Parse conversion specifiers. */
      format = parse_conversion (format, &c, &args);

      /* Do conversion. */
      switch (*format) 
 804950a:	89 de                	mov    %ebx,%esi
          break;

        case 's':
          {
            /* String conversion. */
            const char *s = va_arg (args, char *);
 804950c:	8d 7d 04             	lea    0x4(%ebp),%edi
 804950f:	8b 5d 00             	mov    0x0(%ebp),%ebx
            if (s == NULL)
              s = "(null)";
 8049512:	85 db                	test   %ebx,%ebx
 8049514:	b8 00 af 04 08       	mov    $0x804af00,%eax
 8049519:	0f 44 d8             	cmove  %eax,%ebx

            /* Limit string length according to precision.
               Note: if c.precision == -1 then strnlen() will get
               SIZE_MAX for MAXLEN, which is just what we want. */
            format_string (s, strnlen (s, c.precision), &c, output, aux);
 804951c:	83 ec 08             	sub    $0x8,%esp
 804951f:	51                   	push   %ecx
 8049520:	53                   	push   %ebx
 8049521:	e8 d9 09 00 00       	call   8049eff <strnlen>
 8049526:	83 c4 08             	add    $0x8,%esp
 8049529:	ff 74 24 74          	pushl  0x74(%esp)
 804952d:	ff 74 24 74          	pushl  0x74(%esp)
 8049531:	8d 4c 24 40          	lea    0x40(%esp),%ecx
 8049535:	89 c2                	mov    %eax,%edx
 8049537:	89 d8                	mov    %ebx,%eax
 8049539:	e8 74 f9 ff ff       	call   8048eb2 <format_string>
          }
          break;
 804953e:	83 c4 10             	add    $0x10,%esp
 8049541:	89 f3                	mov    %esi,%ebx
          break;

        case 's':
          {
            /* String conversion. */
            const char *s = va_arg (args, char *);
 8049543:	89 fd                	mov    %edi,%ebp
            /* Limit string length according to precision.
               Note: if c.precision == -1 then strnlen() will get
               SIZE_MAX for MAXLEN, which is just what we want. */
            format_string (s, strnlen (s, c.precision), &c, output, aux);
          }
          break;
 8049545:	eb 7b                	jmp    80495c2 <__vprintf+0x649>

      /* Parse conversion specifiers. */
      format = parse_conversion (format, &c, &args);

      /* Do conversion. */
      switch (*format) 
 8049547:	89 de                	mov    %ebx,%esi
          
        case 'p':
          {
            /* Pointer conversion.
               Format pointers as %#x. */
            void *p = va_arg (args, void *);
 8049549:	8d 7d 04             	lea    0x4(%ebp),%edi
 804954c:	8b 45 00             	mov    0x0(%ebp),%eax

            c.flags = POUND;
 804954f:	c7 44 24 30 08 00 00 	movl   $0x8,0x30(%esp)
 8049556:	00 
            format_integer ((uintptr_t) p, false, false,
 8049557:	ba 00 00 00 00       	mov    $0x0,%edx
 804955c:	83 ec 0c             	sub    $0xc,%esp
 804955f:	ff 74 24 78          	pushl  0x78(%esp)
 8049563:	ff 74 24 78          	pushl  0x78(%esp)
 8049567:	8d 4c 24 44          	lea    0x44(%esp),%ecx
 804956b:	51                   	push   %ecx
 804956c:	68 8c ad 04 08       	push   $0x804ad8c
 8049571:	6a 00                	push   $0x0
 8049573:	b9 00 00 00 00       	mov    $0x0,%ecx
 8049578:	e8 41 f6 ff ff       	call   8048bbe <format_integer>
                            &base_x, &c, output, aux);
          }
          break;
 804957d:	83 c4 20             	add    $0x20,%esp
 8049580:	89 f3                	mov    %esi,%ebx
          
        case 'p':
          {
            /* Pointer conversion.
               Format pointers as %#x. */
            void *p = va_arg (args, void *);
 8049582:	89 fd                	mov    %edi,%ebp

            c.flags = POUND;
            format_integer ((uintptr_t) p, false, false,
                            &base_x, &c, output, aux);
          }
          break;
 8049584:	eb 3c                	jmp    80495c2 <__vprintf+0x649>

      /* Parse conversion specifiers. */
      format = parse_conversion (format, &c, &args);

      /* Do conversion. */
      switch (*format) 
 8049586:	89 de                	mov    %ebx,%esi
        case 'g':
        case 'G':
        case 'n':
          /* We don't support floating-point arithmetic,
             and %n can be part of a security hole. */
          __printf ("<<no %%%c in kernel>>", output, aux, *format);
 8049588:	0f be c0             	movsbl %al,%eax
 804958b:	50                   	push   %eax
 804958c:	ff 74 24 70          	pushl  0x70(%esp)
 8049590:	ff 74 24 70          	pushl  0x70(%esp)
 8049594:	68 19 af 04 08       	push   $0x804af19
 8049599:	e8 be f9 ff ff       	call   8048f5c <__printf>
          break;
 804959e:	83 c4 10             	add    $0x10,%esp
 80495a1:	89 f3                	mov    %esi,%ebx
 80495a3:	eb 1d                	jmp    80495c2 <__vprintf+0x649>

      /* Parse conversion specifiers. */
      format = parse_conversion (format, &c, &args);

      /* Do conversion. */
      switch (*format) 
 80495a5:	89 de                	mov    %ebx,%esi
             and %n can be part of a security hole. */
          __printf ("<<no %%%c in kernel>>", output, aux, *format);
          break;

        default:
          __printf ("<<no %%%c conversion>>", output, aux, *format);
 80495a7:	0f be c0             	movsbl %al,%eax
 80495aa:	50                   	push   %eax
 80495ab:	ff 74 24 70          	pushl  0x70(%esp)
 80495af:	ff 74 24 70          	pushl  0x70(%esp)
 80495b3:	68 2f af 04 08       	push   $0x804af2f
 80495b8:	e8 9f f9 ff ff       	call   8048f5c <__printf>
          break;
 80495bd:	83 c4 10             	add    $0x10,%esp
 80495c0:	89 f3                	mov    %esi,%ebx

void
__vprintf (const char *format, va_list args,
           void (*output) (char, void *), void *aux)
{
  for (; *format != '\0'; format++)
 80495c2:	8d 73 01             	lea    0x1(%ebx),%esi
 80495c5:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
 80495c9:	84 c0                	test   %al,%al
 80495cb:	0f 85 c2 f9 ff ff    	jne    8048f93 <__vprintf+0x1a>
 80495d1:	eb 09                	jmp    80495dc <__vprintf+0x663>
            c->precision = c->precision * 10 + *format - '0';
        }
      if (c->precision < 0) 
        c->precision = -1;
    }
  if (c->precision >= 0)
 80495d3:	8b 4c 24 38          	mov    0x38(%esp),%ecx
 80495d7:	e9 4c fb ff ff       	jmp    8049128 <__vprintf+0x1af>
        default:
          __printf ("<<no %%%c conversion>>", output, aux, *format);
          break;
        }
    }
}
 80495dc:	83 c4 4c             	add    $0x4c,%esp
 80495df:	5b                   	pop    %ebx
 80495e0:	5e                   	pop    %esi
 80495e1:	5f                   	pop    %edi
 80495e2:	5d                   	pop    %ebp
 80495e3:	c3                   	ret    

080495e4 <vsnprintf>:
   BUF_SIZE is zero.  Returns the number of characters that would
   have been written to BUFFER, not including a null terminator,
   had there been enough room. */
int
vsnprintf (char *buffer, size_t buf_size, const char *format, va_list args) 
{
 80495e4:	53                   	push   %ebx
 80495e5:	83 ec 18             	sub    $0x18,%esp
 80495e8:	8b 44 24 24          	mov    0x24(%esp),%eax
 80495ec:	8b 54 24 28          	mov    0x28(%esp),%edx
 80495f0:	8b 4c 24 2c          	mov    0x2c(%esp),%ecx
  /* Set up aux data for vsnprintf_helper(). */
  struct vsnprintf_aux aux;
  aux.p = buffer;
 80495f4:	8b 5c 24 20          	mov    0x20(%esp),%ebx
 80495f8:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  aux.length = 0;
 80495fc:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8049603:	00 
  aux.max_length = buf_size > 0 ? buf_size - 1 : 0;
 8049604:	85 c0                	test   %eax,%eax
 8049606:	74 24                	je     804962c <vsnprintf+0x48>
 8049608:	83 e8 01             	sub    $0x1,%eax
 804960b:	89 44 24 0c          	mov    %eax,0xc(%esp)

  /* Do most of the work. */
  __vprintf (format, args, vsnprintf_helper, &aux);
 804960f:	8d 44 24 04          	lea    0x4(%esp),%eax
 8049613:	50                   	push   %eax
 8049614:	68 6f 8b 04 08       	push   $0x8048b6f
 8049619:	51                   	push   %ecx
 804961a:	52                   	push   %edx
 804961b:	e8 59 f9 ff ff       	call   8048f79 <__vprintf>

  /* Add null terminator. */
  if (buf_size > 0)
    *aux.p = '\0';
 8049620:	8b 44 24 14          	mov    0x14(%esp),%eax
 8049624:	c6 00 00             	movb   $0x0,(%eax)
 8049627:	83 c4 10             	add    $0x10,%esp
 804962a:	eb 1c                	jmp    8049648 <vsnprintf+0x64>
{
  /* Set up aux data for vsnprintf_helper(). */
  struct vsnprintf_aux aux;
  aux.p = buffer;
  aux.length = 0;
  aux.max_length = buf_size > 0 ? buf_size - 1 : 0;
 804962c:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
 8049633:	00 

  /* Do most of the work. */
  __vprintf (format, args, vsnprintf_helper, &aux);
 8049634:	8d 44 24 04          	lea    0x4(%esp),%eax
 8049638:	50                   	push   %eax
 8049639:	68 6f 8b 04 08       	push   $0x8048b6f
 804963e:	51                   	push   %ecx
 804963f:	52                   	push   %edx
 8049640:	e8 34 f9 ff ff       	call   8048f79 <__vprintf>
 8049645:	83 c4 10             	add    $0x10,%esp

  /* Add null terminator. */
  if (buf_size > 0)
    *aux.p = '\0';

  return aux.length;
 8049648:	8b 44 24 08          	mov    0x8(%esp),%eax
}
 804964c:	83 c4 18             	add    $0x18,%esp
 804964f:	5b                   	pop    %ebx
 8049650:	c3                   	ret    

08049651 <snprintf>:
   BUF_SIZE is zero.  Returns the number of characters that would
   have been written to BUFFER, not including a null terminator,
   had there been enough room. */
int
snprintf (char *buffer, size_t buf_size, const char *format, ...) 
{
 8049651:	83 ec 0c             	sub    $0xc,%esp
  va_list args;
  int retval;

  va_start (args, format);
 8049654:	8d 44 24 1c          	lea    0x1c(%esp),%eax
  retval = vsnprintf (buffer, buf_size, format, args);
 8049658:	50                   	push   %eax
 8049659:	ff 74 24 1c          	pushl  0x1c(%esp)
 804965d:	ff 74 24 1c          	pushl  0x1c(%esp)
 8049661:	ff 74 24 1c          	pushl  0x1c(%esp)
 8049665:	e8 7a ff ff ff       	call   80495e4 <vsnprintf>
  va_end (args);

  return retval;
}
 804966a:	83 c4 1c             	add    $0x1c,%esp
 804966d:	c3                   	ret    

0804966e <hex_dump>:
   starting at OFS for the first byte in BUF.  If ASCII is true
   then the corresponding ASCII characters are also rendered
   alongside. */   
void
hex_dump (uintptr_t ofs, const void *buf_, size_t size, bool ascii)
{
 804966e:	55                   	push   %ebp
 804966f:	57                   	push   %edi
 8049670:	56                   	push   %esi
 8049671:	53                   	push   %ebx
 8049672:	83 ec 1c             	sub    $0x1c,%esp
 8049675:	0f b6 44 24 3c       	movzbl 0x3c(%esp),%eax
 804967a:	88 44 24 0f          	mov    %al,0xf(%esp)
  const uint8_t *buf = buf_;
  const size_t per_line = 16; /* Maximum bytes per line. */

  while (size > 0)
 804967e:	83 7c 24 38 00       	cmpl   $0x0,0x38(%esp)
 8049683:	0f 84 cb 01 00 00    	je     8049854 <hex_dump+0x1e6>
    {
      size_t start, end, n;
      size_t i;
      
      /* Number of bytes on this line. */
      start = ofs % per_line;
 8049689:	8b 74 24 30          	mov    0x30(%esp),%esi
 804968d:	83 e6 0f             	and    $0xf,%esi
      end = per_line;
      if (end - start > size)
 8049690:	b8 10 00 00 00       	mov    $0x10,%eax
 8049695:	29 f0                	sub    %esi,%eax
 8049697:	89 44 24 08          	mov    %eax,0x8(%esp)
 804969b:	3b 44 24 38          	cmp    0x38(%esp),%eax
 804969f:	0f 86 6e 01 00 00    	jbe    8049813 <hex_dump+0x1a5>
        end = start + size;
 80496a5:	89 f7                	mov    %esi,%edi
 80496a7:	03 7c 24 38          	add    0x38(%esp),%edi
      n = end - start;

      /* Print line. */
      printf ("%08jx  ", (uintmax_t) ROUND_DOWN (ofs, per_line));
 80496ab:	83 ec 04             	sub    $0x4,%esp
 80496ae:	8b 44 24 34          	mov    0x34(%esp),%eax
 80496b2:	83 e0 f0             	and    $0xfffffff0,%eax
 80496b5:	ba 00 00 00 00       	mov    $0x0,%edx
 80496ba:	52                   	push   %edx
 80496bb:	50                   	push   %eax
 80496bc:	68 46 af 04 08       	push   $0x804af46
 80496c1:	e8 7e f8 ff ff       	call   8048f44 <printf>
      for (i = 0; i < start; i++)
 80496c6:	83 c4 10             	add    $0x10,%esp
 80496c9:	85 f6                	test   %esi,%esi
 80496cb:	74 26                	je     80496f3 <hex_dump+0x85>
      /* Number of bytes on this line. */
      start = ofs % per_line;
      end = per_line;
      if (end - start > size)
        end = start + size;
      n = end - start;
 80496cd:	8b 44 24 38          	mov    0x38(%esp),%eax
 80496d1:	89 44 24 08          	mov    %eax,0x8(%esp)
      size_t start, end, n;
      size_t i;
      
      /* Number of bytes on this line. */
      start = ofs % per_line;
      end = per_line;
 80496d5:	bb 00 00 00 00       	mov    $0x0,%ebx
      n = end - start;

      /* Print line. */
      printf ("%08jx  ", (uintmax_t) ROUND_DOWN (ofs, per_line));
      for (i = 0; i < start; i++)
        printf ("   ");
 80496da:	83 ec 0c             	sub    $0xc,%esp
 80496dd:	68 4e af 04 08       	push   $0x804af4e
 80496e2:	e8 5d f8 ff ff       	call   8048f44 <printf>
        end = start + size;
      n = end - start;

      /* Print line. */
      printf ("%08jx  ", (uintmax_t) ROUND_DOWN (ofs, per_line));
      for (i = 0; i < start; i++)
 80496e7:	83 c3 01             	add    $0x1,%ebx
 80496ea:	83 c4 10             	add    $0x10,%esp
 80496ed:	39 de                	cmp    %ebx,%esi
 80496ef:	77 e9                	ja     80496da <hex_dump+0x6c>
 80496f1:	eb 0a                	jmp    80496fd <hex_dump+0x8f>
      /* Number of bytes on this line. */
      start = ofs % per_line;
      end = per_line;
      if (end - start > size)
        end = start + size;
      n = end - start;
 80496f3:	8b 44 24 38          	mov    0x38(%esp),%eax
 80496f7:	89 44 24 08          	mov    %eax,0x8(%esp)

      /* Print line. */
      printf ("%08jx  ", (uintmax_t) ROUND_DOWN (ofs, per_line));
      for (i = 0; i < start; i++)
 80496fb:	89 f3                	mov    %esi,%ebx
        printf ("   ");
      for (; i < end; i++) 
 80496fd:	39 df                	cmp    %ebx,%edi
 80496ff:	76 34                	jbe    8049735 <hex_dump+0xc7>
        printf ("%02hhx%c",
                buf[i - start], i == per_line / 2 - 1? '-' : ' ');
 8049701:	8b 6c 24 34          	mov    0x34(%esp),%ebp
 8049705:	29 f5                	sub    %esi,%ebp
      /* Print line. */
      printf ("%08jx  ", (uintmax_t) ROUND_DOWN (ofs, per_line));
      for (i = 0; i < start; i++)
        printf ("   ");
      for (; i < end; i++) 
        printf ("%02hhx%c",
 8049707:	83 fb 07             	cmp    $0x7,%ebx
 804970a:	b8 20 00 00 00       	mov    $0x20,%eax
 804970f:	b9 2d 00 00 00       	mov    $0x2d,%ecx
 8049714:	0f 44 c1             	cmove  %ecx,%eax
 8049717:	83 ec 04             	sub    $0x4,%esp
 804971a:	50                   	push   %eax
 804971b:	0f b6 44 1d 00       	movzbl 0x0(%ebp,%ebx,1),%eax
 8049720:	50                   	push   %eax
 8049721:	68 52 af 04 08       	push   $0x804af52
 8049726:	e8 19 f8 ff ff       	call   8048f44 <printf>

      /* Print line. */
      printf ("%08jx  ", (uintmax_t) ROUND_DOWN (ofs, per_line));
      for (i = 0; i < start; i++)
        printf ("   ");
      for (; i < end; i++) 
 804972b:	83 c3 01             	add    $0x1,%ebx
 804972e:	83 c4 10             	add    $0x10,%esp
 8049731:	39 fb                	cmp    %edi,%ebx
 8049733:	72 d2                	jb     8049707 <hex_dump+0x99>
        printf ("%02hhx%c",
                buf[i - start], i == per_line / 2 - 1? '-' : ' ');
      if (ascii) 
 8049735:	80 7c 24 0f 00       	cmpb   $0x0,0xf(%esp)
 804973a:	0f 84 ae 00 00 00    	je     80497ee <hex_dump+0x180>
        {
          for (; i < per_line; i++)
 8049740:	83 fb 0f             	cmp    $0xf,%ebx
 8049743:	77 18                	ja     804975d <hex_dump+0xef>
            printf ("   ");
 8049745:	83 ec 0c             	sub    $0xc,%esp
 8049748:	68 4e af 04 08       	push   $0x804af4e
 804974d:	e8 f2 f7 ff ff       	call   8048f44 <printf>
      for (; i < end; i++) 
        printf ("%02hhx%c",
                buf[i - start], i == per_line / 2 - 1? '-' : ' ');
      if (ascii) 
        {
          for (; i < per_line; i++)
 8049752:	83 c3 01             	add    $0x1,%ebx
 8049755:	83 c4 10             	add    $0x10,%esp
 8049758:	83 fb 10             	cmp    $0x10,%ebx
 804975b:	75 e8                	jne    8049745 <hex_dump+0xd7>
            printf ("   ");
          printf ("|");
 804975d:	83 ec 0c             	sub    $0xc,%esp
 8049760:	6a 7c                	push   $0x7c
 8049762:	e8 88 0d 00 00       	call   804a4ef <putchar>
          for (i = 0; i < start; i++)
 8049767:	83 c4 10             	add    $0x10,%esp
 804976a:	85 f6                	test   %esi,%esi
 804976c:	0f 84 d3 00 00 00    	je     8049845 <hex_dump+0x1d7>
 8049772:	bb 00 00 00 00       	mov    $0x0,%ebx
            printf (" ");
 8049777:	83 ec 0c             	sub    $0xc,%esp
 804977a:	6a 20                	push   $0x20
 804977c:	e8 6e 0d 00 00       	call   804a4ef <putchar>
      if (ascii) 
        {
          for (; i < per_line; i++)
            printf ("   ");
          printf ("|");
          for (i = 0; i < start; i++)
 8049781:	83 c3 01             	add    $0x1,%ebx
 8049784:	83 c4 10             	add    $0x10,%esp
 8049787:	39 de                	cmp    %ebx,%esi
 8049789:	75 ec                	jne    8049777 <hex_dump+0x109>
            printf (" ");
          for (; i < end; i++)
 804978b:	39 fe                	cmp    %edi,%esi
 804978d:	73 36                	jae    80497c5 <hex_dump+0x157>
      if (ascii) 
        {
          for (; i < per_line; i++)
            printf ("   ");
          printf ("|");
          for (i = 0; i < start; i++)
 804978f:	89 f3                	mov    %esi,%ebx
            printf (" ");
          for (; i < end; i++)
            printf ("%c",
                    isprint (buf[i - start]) ? buf[i - start] : '.');
 8049791:	8b 6c 24 34          	mov    0x34(%esp),%ebp
 8049795:	29 f5                	sub    %esi,%ebp
            printf ("   ");
          printf ("|");
          for (i = 0; i < start; i++)
            printf (" ");
          for (; i < end; i++)
            printf ("%c",
 8049797:	be 2e 00 00 00       	mov    $0x2e,%esi
                    isprint (buf[i - start]) ? buf[i - start] : '.');
 804979c:	0f b6 44 1d 00       	movzbl 0x0(%ebp,%ebx,1),%eax
            printf ("   ");
          printf ("|");
          for (i = 0; i < start; i++)
            printf (" ");
          for (; i < end; i++)
            printf ("%c",
 80497a1:	0f b6 d0             	movzbl %al,%edx
 80497a4:	83 ea 20             	sub    $0x20,%edx
 80497a7:	0f b6 c0             	movzbl %al,%eax
 80497aa:	83 fa 5e             	cmp    $0x5e,%edx
 80497ad:	0f 47 c6             	cmova  %esi,%eax
 80497b0:	83 ec 0c             	sub    $0xc,%esp
 80497b3:	50                   	push   %eax
 80497b4:	e8 36 0d 00 00       	call   804a4ef <putchar>
          for (; i < per_line; i++)
            printf ("   ");
          printf ("|");
          for (i = 0; i < start; i++)
            printf (" ");
          for (; i < end; i++)
 80497b9:	83 c3 01             	add    $0x1,%ebx
 80497bc:	83 c4 10             	add    $0x10,%esp
 80497bf:	39 fb                	cmp    %edi,%ebx
 80497c1:	72 d9                	jb     804979c <hex_dump+0x12e>
 80497c3:	eb 02                	jmp    80497c7 <hex_dump+0x159>
      if (ascii) 
        {
          for (; i < per_line; i++)
            printf ("   ");
          printf ("|");
          for (i = 0; i < start; i++)
 80497c5:	89 f3                	mov    %esi,%ebx
            printf (" ");
          for (; i < end; i++)
            printf ("%c",
                    isprint (buf[i - start]) ? buf[i - start] : '.');
          for (; i < per_line; i++)
 80497c7:	83 fb 0f             	cmp    $0xf,%ebx
 80497ca:	77 15                	ja     80497e1 <hex_dump+0x173>
            printf (" ");
 80497cc:	83 ec 0c             	sub    $0xc,%esp
 80497cf:	6a 20                	push   $0x20
 80497d1:	e8 19 0d 00 00       	call   804a4ef <putchar>
          for (i = 0; i < start; i++)
            printf (" ");
          for (; i < end; i++)
            printf ("%c",
                    isprint (buf[i - start]) ? buf[i - start] : '.');
          for (; i < per_line; i++)
 80497d6:	83 c3 01             	add    $0x1,%ebx
 80497d9:	83 c4 10             	add    $0x10,%esp
 80497dc:	83 fb 0f             	cmp    $0xf,%ebx
 80497df:	76 eb                	jbe    80497cc <hex_dump+0x15e>
            printf (" ");
          printf ("|");
 80497e1:	83 ec 0c             	sub    $0xc,%esp
 80497e4:	6a 7c                	push   $0x7c
 80497e6:	e8 04 0d 00 00       	call   804a4ef <putchar>
 80497eb:	83 c4 10             	add    $0x10,%esp
        }
      printf ("\n");
 80497ee:	83 ec 0c             	sub    $0xc,%esp
 80497f1:	6a 0a                	push   $0xa
 80497f3:	e8 f7 0c 00 00       	call   804a4ef <putchar>

      ofs += n;
 80497f8:	8b 44 24 18          	mov    0x18(%esp),%eax
 80497fc:	01 44 24 40          	add    %eax,0x40(%esp)
      buf += n;
 8049800:	01 44 24 44          	add    %eax,0x44(%esp)
hex_dump (uintptr_t ofs, const void *buf_, size_t size, bool ascii)
{
  const uint8_t *buf = buf_;
  const size_t per_line = 16; /* Maximum bytes per line. */

  while (size > 0)
 8049804:	83 c4 10             	add    $0x10,%esp
 8049807:	29 44 24 38          	sub    %eax,0x38(%esp)
 804980b:	0f 85 78 fe ff ff    	jne    8049689 <hex_dump+0x1b>
 8049811:	eb 41                	jmp    8049854 <hex_dump+0x1e6>
      if (end - start > size)
        end = start + size;
      n = end - start;

      /* Print line. */
      printf ("%08jx  ", (uintmax_t) ROUND_DOWN (ofs, per_line));
 8049813:	83 ec 04             	sub    $0x4,%esp
 8049816:	8b 44 24 34          	mov    0x34(%esp),%eax
 804981a:	83 e0 f0             	and    $0xfffffff0,%eax
 804981d:	ba 00 00 00 00       	mov    $0x0,%edx
 8049822:	52                   	push   %edx
 8049823:	50                   	push   %eax
 8049824:	68 46 af 04 08       	push   $0x804af46
 8049829:	e8 16 f7 ff ff       	call   8048f44 <printf>
      for (i = 0; i < start; i++)
 804982e:	83 c4 10             	add    $0x10,%esp
      size_t start, end, n;
      size_t i;
      
      /* Number of bytes on this line. */
      start = ofs % per_line;
      end = per_line;
 8049831:	bf 10 00 00 00       	mov    $0x10,%edi
        end = start + size;
      n = end - start;

      /* Print line. */
      printf ("%08jx  ", (uintmax_t) ROUND_DOWN (ofs, per_line));
      for (i = 0; i < start; i++)
 8049836:	89 f3                	mov    %esi,%ebx
 8049838:	85 f6                	test   %esi,%esi
 804983a:	0f 84 c1 fe ff ff    	je     8049701 <hex_dump+0x93>
 8049840:	e9 90 fe ff ff       	jmp    80496d5 <hex_dump+0x67>
      if (ascii) 
        {
          for (; i < per_line; i++)
            printf ("   ");
          printf ("|");
          for (i = 0; i < start; i++)
 8049845:	89 f3                	mov    %esi,%ebx
            printf (" ");
          for (; i < end; i++)
 8049847:	85 ff                	test   %edi,%edi
 8049849:	0f 85 42 ff ff ff    	jne    8049791 <hex_dump+0x123>
 804984f:	e9 78 ff ff ff       	jmp    80497cc <hex_dump+0x15e>

      ofs += n;
      buf += n;
      size -= n;
    }
}
 8049854:	83 c4 1c             	add    $0x1c,%esp
 8049857:	5b                   	pop    %ebx
 8049858:	5e                   	pop    %esi
 8049859:	5f                   	pop    %edi
 804985a:	5d                   	pop    %ebp
 804985b:	c3                   	ret    

0804985c <print_human_readable_size>:

/* Prints SIZE, which represents a number of bytes, in a
   human-readable format, e.g. "256 kB". */
void
print_human_readable_size (uint64_t size) 
{
 804985c:	57                   	push   %edi
 804985d:	56                   	push   %esi
 804985e:	83 ec 04             	sub    $0x4,%esp
 8049861:	8b 74 24 10          	mov    0x10(%esp),%esi
 8049865:	8b 7c 24 14          	mov    0x14(%esp),%edi
  if (size == 1)
 8049869:	89 f0                	mov    %esi,%eax
 804986b:	83 f0 01             	xor    $0x1,%eax
 804986e:	09 f8                	or     %edi,%eax
 8049870:	74 22                	je     8049894 <print_human_readable_size+0x38>
  else 
    {
      static const char *factors[] = {"bytes", "kB", "MB", "GB", "TB", NULL};
      const char **fp;

      for (fp = factors; size >= 1024 && fp[1] != NULL; fp++)
 8049872:	83 ff 00             	cmp    $0x0,%edi
 8049875:	77 0d                	ja     8049884 <print_human_readable_size+0x28>
 8049877:	b9 70 c3 04 08       	mov    $0x804c370,%ecx
 804987c:	81 fe ff 03 00 00    	cmp    $0x3ff,%esi
 8049882:	76 46                	jbe    80498ca <print_human_readable_size+0x6e>
 8049884:	b9 70 c3 04 08       	mov    $0x804c370,%ecx
 8049889:	83 3d 74 c3 04 08 00 	cmpl   $0x0,0x804c374
 8049890:	75 14                	jne    80498a6 <print_human_readable_size+0x4a>
 8049892:	eb 36                	jmp    80498ca <print_human_readable_size+0x6e>
   human-readable format, e.g. "256 kB". */
void
print_human_readable_size (uint64_t size) 
{
  if (size == 1)
    printf ("1 byte");
 8049894:	83 ec 0c             	sub    $0xc,%esp
 8049897:	68 5b af 04 08       	push   $0x804af5b
 804989c:	e8 a3 f6 ff ff       	call   8048f44 <printf>
 80498a1:	83 c4 10             	add    $0x10,%esp
 80498a4:	eb 35                	jmp    80498db <print_human_readable_size+0x7f>
    {
      static const char *factors[] = {"bytes", "kB", "MB", "GB", "TB", NULL};
      const char **fp;

      for (fp = factors; size >= 1024 && fp[1] != NULL; fp++)
        size /= 1024;
 80498a6:	89 f0                	mov    %esi,%eax
 80498a8:	89 fa                	mov    %edi,%edx
 80498aa:	0f ac f8 0a          	shrd   $0xa,%edi,%eax
 80498ae:	c1 ea 0a             	shr    $0xa,%edx
 80498b1:	89 c6                	mov    %eax,%esi
 80498b3:	89 d7                	mov    %edx,%edi
  else 
    {
      static const char *factors[] = {"bytes", "kB", "MB", "GB", "TB", NULL};
      const char **fp;

      for (fp = factors; size >= 1024 && fp[1] != NULL; fp++)
 80498b5:	83 c1 04             	add    $0x4,%ecx
 80498b8:	83 fa 00             	cmp    $0x0,%edx
 80498bb:	77 07                	ja     80498c4 <print_human_readable_size+0x68>
 80498bd:	3d ff 03 00 00       	cmp    $0x3ff,%eax
 80498c2:	76 06                	jbe    80498ca <print_human_readable_size+0x6e>
 80498c4:	83 79 04 00          	cmpl   $0x0,0x4(%ecx)
 80498c8:	75 dc                	jne    80498a6 <print_human_readable_size+0x4a>
        size /= 1024;
      printf ("%"PRIu64" %s", size, *fp);
 80498ca:	ff 31                	pushl  (%ecx)
 80498cc:	57                   	push   %edi
 80498cd:	56                   	push   %esi
 80498ce:	68 62 af 04 08       	push   $0x804af62
 80498d3:	e8 6c f6 ff ff       	call   8048f44 <printf>
 80498d8:	83 c4 10             	add    $0x10,%esp
    }
}
 80498db:	83 c4 04             	add    $0x4,%esp
 80498de:	5e                   	pop    %esi
 80498df:	5f                   	pop    %edi
 80498e0:	c3                   	ret    

080498e1 <memcpy>:

/* Copies SIZE bytes from SRC to DST, which must not overlap.
   Returns DST. */
void *
memcpy (void *dst_, const void *src_, size_t size) 
{
 80498e1:	56                   	push   %esi
 80498e2:	53                   	push   %ebx
 80498e3:	83 ec 04             	sub    $0x4,%esp
 80498e6:	8b 44 24 10          	mov    0x10(%esp),%eax
 80498ea:	8b 74 24 14          	mov    0x14(%esp),%esi
 80498ee:	8b 5c 24 18          	mov    0x18(%esp),%ebx
  unsigned char *dst = dst_;
  const unsigned char *src = src_;

  ASSERT (dst != NULL || size == 0);
 80498f2:	85 db                	test   %ebx,%ebx
 80498f4:	0f 94 c2             	sete   %dl
 80498f7:	85 c0                	test   %eax,%eax
 80498f9:	75 22                	jne    804991d <memcpy+0x3c>
 80498fb:	84 d2                	test   %dl,%dl
 80498fd:	75 1e                	jne    804991d <memcpy+0x3c>
 80498ff:	83 ec 0c             	sub    $0xc,%esp
 8049902:	68 b2 af 04 08       	push   $0x804afb2
 8049907:	68 cb af 04 08       	push   $0x804afcb
 804990c:	68 10 ae 04 08       	push   $0x804ae10
 8049911:	6a 0c                	push   $0xc
 8049913:	68 e2 af 04 08       	push   $0x804afe2
 8049918:	e8 c0 09 00 00       	call   804a2dd <debug_panic>
  ASSERT (src != NULL || size == 0);
 804991d:	85 f6                	test   %esi,%esi
 804991f:	75 04                	jne    8049925 <memcpy+0x44>
 8049921:	84 d2                	test   %dl,%dl
 8049923:	74 0b                	je     8049930 <memcpy+0x4f>

  while (size-- > 0)
 8049925:	ba 00 00 00 00       	mov    $0x0,%edx
 804992a:	85 db                	test   %ebx,%ebx
 804992c:	75 20                	jne    804994e <memcpy+0x6d>
 804992e:	eb 2c                	jmp    804995c <memcpy+0x7b>
{
  unsigned char *dst = dst_;
  const unsigned char *src = src_;

  ASSERT (dst != NULL || size == 0);
  ASSERT (src != NULL || size == 0);
 8049930:	83 ec 0c             	sub    $0xc,%esp
 8049933:	68 f5 af 04 08       	push   $0x804aff5
 8049938:	68 cb af 04 08       	push   $0x804afcb
 804993d:	68 10 ae 04 08       	push   $0x804ae10
 8049942:	6a 0d                	push   $0xd
 8049944:	68 e2 af 04 08       	push   $0x804afe2
 8049949:	e8 8f 09 00 00       	call   804a2dd <debug_panic>

  while (size-- > 0)
    *dst++ = *src++;
 804994e:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
 8049952:	88 0c 10             	mov    %cl,(%eax,%edx,1)
 8049955:	83 c2 01             	add    $0x1,%edx
  const unsigned char *src = src_;

  ASSERT (dst != NULL || size == 0);
  ASSERT (src != NULL || size == 0);

  while (size-- > 0)
 8049958:	39 da                	cmp    %ebx,%edx
 804995a:	75 f2                	jne    804994e <memcpy+0x6d>
    *dst++ = *src++;

  return dst_;
}
 804995c:	83 c4 04             	add    $0x4,%esp
 804995f:	5b                   	pop    %ebx
 8049960:	5e                   	pop    %esi
 8049961:	c3                   	ret    

08049962 <memmove>:

/* Copies SIZE bytes from SRC to DST, which are allowed to
   overlap.  Returns DST. */
void *
memmove (void *dst_, const void *src_, size_t size) 
{
 8049962:	57                   	push   %edi
 8049963:	56                   	push   %esi
 8049964:	53                   	push   %ebx
 8049965:	8b 44 24 10          	mov    0x10(%esp),%eax
 8049969:	8b 5c 24 14          	mov    0x14(%esp),%ebx
 804996d:	8b 7c 24 18          	mov    0x18(%esp),%edi
  unsigned char *dst = dst_;
  const unsigned char *src = src_;

  ASSERT (dst != NULL || size == 0);
 8049971:	85 ff                	test   %edi,%edi
 8049973:	0f 94 c2             	sete   %dl
 8049976:	85 c0                	test   %eax,%eax
 8049978:	75 22                	jne    804999c <memmove+0x3a>
 804997a:	84 d2                	test   %dl,%dl
 804997c:	75 1e                	jne    804999c <memmove+0x3a>
 804997e:	83 ec 0c             	sub    $0xc,%esp
 8049981:	68 b2 af 04 08       	push   $0x804afb2
 8049986:	68 cb af 04 08       	push   $0x804afcb
 804998b:	68 08 ae 04 08       	push   $0x804ae08
 8049990:	6a 1d                	push   $0x1d
 8049992:	68 e2 af 04 08       	push   $0x804afe2
 8049997:	e8 41 09 00 00       	call   804a2dd <debug_panic>
  ASSERT (src != NULL || size == 0);
 804999c:	85 db                	test   %ebx,%ebx
 804999e:	75 22                	jne    80499c2 <memmove+0x60>
 80499a0:	84 d2                	test   %dl,%dl
 80499a2:	75 1e                	jne    80499c2 <memmove+0x60>
 80499a4:	83 ec 0c             	sub    $0xc,%esp
 80499a7:	68 f5 af 04 08       	push   $0x804aff5
 80499ac:	68 cb af 04 08       	push   $0x804afcb
 80499b1:	68 08 ae 04 08       	push   $0x804ae08
 80499b6:	6a 1e                	push   $0x1e
 80499b8:	68 e2 af 04 08       	push   $0x804afe2
 80499bd:	e8 1b 09 00 00       	call   804a2dd <debug_panic>

  if (dst < src) 
 80499c2:	39 d8                	cmp    %ebx,%eax
 80499c4:	73 1b                	jae    80499e1 <memmove+0x7f>
    {
      while (size-- > 0)
 80499c6:	85 ff                	test   %edi,%edi
 80499c8:	74 38                	je     8049a02 <memmove+0xa0>
 80499ca:	ba 00 00 00 00       	mov    $0x0,%edx
        *dst++ = *src++;
 80499cf:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
 80499d3:	88 0c 10             	mov    %cl,(%eax,%edx,1)
 80499d6:	83 c2 01             	add    $0x1,%edx
  ASSERT (dst != NULL || size == 0);
  ASSERT (src != NULL || size == 0);

  if (dst < src) 
    {
      while (size-- > 0)
 80499d9:	39 fa                	cmp    %edi,%edx
 80499db:	75 f2                	jne    80499cf <memmove+0x6d>
 80499dd:	01 f8                	add    %edi,%eax
 80499df:	eb 21                	jmp    8049a02 <memmove+0xa0>
        *dst++ = *src++;
    }
  else 
    {
      dst += size;
 80499e1:	8d 34 38             	lea    (%eax,%edi,1),%esi
      src += size;
      while (size-- > 0)
 80499e4:	8d 57 ff             	lea    -0x1(%edi),%edx
 80499e7:	85 ff                	test   %edi,%edi
 80499e9:	74 15                	je     8049a00 <memmove+0x9e>
 80499eb:	89 f0                	mov    %esi,%eax
 80499ed:	29 f8                	sub    %edi,%eax
        *--dst = *--src;
 80499ef:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
 80499f3:	88 0c 10             	mov    %cl,(%eax,%edx,1)
    }
  else 
    {
      dst += size;
      src += size;
      while (size-- > 0)
 80499f6:	83 ea 01             	sub    $0x1,%edx
 80499f9:	83 fa ff             	cmp    $0xffffffff,%edx
 80499fc:	75 ed                	jne    80499eb <memmove+0x89>
 80499fe:	eb 02                	jmp    8049a02 <memmove+0xa0>
      while (size-- > 0)
        *dst++ = *src++;
    }
  else 
    {
      dst += size;
 8049a00:	89 f0                	mov    %esi,%eax
      while (size-- > 0)
        *--dst = *--src;
    }

  return dst;
}
 8049a02:	5b                   	pop    %ebx
 8049a03:	5e                   	pop    %esi
 8049a04:	5f                   	pop    %edi
 8049a05:	c3                   	ret    

08049a06 <memcmp>:
   at A and B.  Returns a positive value if the byte in A is
   greater, a negative value if the byte in B is greater, or zero
   if blocks A and B are equal. */
int
memcmp (const void *a_, const void *b_, size_t size) 
{
 8049a06:	57                   	push   %edi
 8049a07:	56                   	push   %esi
 8049a08:	53                   	push   %ebx
 8049a09:	8b 5c 24 10          	mov    0x10(%esp),%ebx
 8049a0d:	8b 74 24 14          	mov    0x14(%esp),%esi
 8049a11:	8b 44 24 18          	mov    0x18(%esp),%eax
  const unsigned char *a = a_;
  const unsigned char *b = b_;

  ASSERT (a != NULL || size == 0);
 8049a15:	85 c0                	test   %eax,%eax
 8049a17:	0f 94 c2             	sete   %dl
 8049a1a:	85 db                	test   %ebx,%ebx
 8049a1c:	75 22                	jne    8049a40 <memcmp+0x3a>
 8049a1e:	84 d2                	test   %dl,%dl
 8049a20:	75 1e                	jne    8049a40 <memcmp+0x3a>
 8049a22:	83 ec 0c             	sub    $0xc,%esp
 8049a25:	68 0e b0 04 08       	push   $0x804b00e
 8049a2a:	68 cb af 04 08       	push   $0x804afcb
 8049a2f:	68 00 ae 04 08       	push   $0x804ae00
 8049a34:	6a 3a                	push   $0x3a
 8049a36:	68 e2 af 04 08       	push   $0x804afe2
 8049a3b:	e8 9d 08 00 00       	call   804a2dd <debug_panic>
  ASSERT (b != NULL || size == 0);
 8049a40:	85 f6                	test   %esi,%esi
 8049a42:	75 04                	jne    8049a48 <memcmp+0x42>
 8049a44:	84 d2                	test   %dl,%dl
 8049a46:	74 18                	je     8049a60 <memcmp+0x5a>

  for (; size-- > 0; a++, b++)
 8049a48:	8d 78 ff             	lea    -0x1(%eax),%edi
 8049a4b:	85 c0                	test   %eax,%eax
 8049a4d:	74 56                	je     8049aa5 <memcmp+0x9f>
    if (*a != *b)
 8049a4f:	0f b6 13             	movzbl (%ebx),%edx
 8049a52:	0f b6 0e             	movzbl (%esi),%ecx
 8049a55:	38 ca                	cmp    %cl,%dl
 8049a57:	75 35                	jne    8049a8e <memcmp+0x88>
 8049a59:	b8 00 00 00 00       	mov    $0x0,%eax
 8049a5e:	eb 3a                	jmp    8049a9a <memcmp+0x94>
{
  const unsigned char *a = a_;
  const unsigned char *b = b_;

  ASSERT (a != NULL || size == 0);
  ASSERT (b != NULL || size == 0);
 8049a60:	83 ec 0c             	sub    $0xc,%esp
 8049a63:	68 25 b0 04 08       	push   $0x804b025
 8049a68:	68 cb af 04 08       	push   $0x804afcb
 8049a6d:	68 00 ae 04 08       	push   $0x804ae00
 8049a72:	6a 3b                	push   $0x3b
 8049a74:	68 e2 af 04 08       	push   $0x804afe2
 8049a79:	e8 5f 08 00 00       	call   804a2dd <debug_panic>

  for (; size-- > 0; a++, b++)
    if (*a != *b)
 8049a7e:	0f b6 54 03 01       	movzbl 0x1(%ebx,%eax,1),%edx
 8049a83:	83 c0 01             	add    $0x1,%eax
 8049a86:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
 8049a8a:	38 ca                	cmp    %cl,%dl
 8049a8c:	74 0c                	je     8049a9a <memcmp+0x94>
      return *a > *b ? +1 : -1;
 8049a8e:	38 d1                	cmp    %dl,%cl
 8049a90:	19 c0                	sbb    %eax,%eax
 8049a92:	83 e0 02             	and    $0x2,%eax
 8049a95:	83 e8 01             	sub    $0x1,%eax
 8049a98:	eb 10                	jmp    8049aaa <memcmp+0xa4>
  const unsigned char *b = b_;

  ASSERT (a != NULL || size == 0);
  ASSERT (b != NULL || size == 0);

  for (; size-- > 0; a++, b++)
 8049a9a:	39 f8                	cmp    %edi,%eax
 8049a9c:	75 e0                	jne    8049a7e <memcmp+0x78>
    if (*a != *b)
      return *a > *b ? +1 : -1;
  return 0;
 8049a9e:	b8 00 00 00 00       	mov    $0x0,%eax
 8049aa3:	eb 05                	jmp    8049aaa <memcmp+0xa4>
 8049aa5:	b8 00 00 00 00       	mov    $0x0,%eax
}
 8049aaa:	5b                   	pop    %ebx
 8049aab:	5e                   	pop    %esi
 8049aac:	5f                   	pop    %edi
 8049aad:	c3                   	ret    

08049aae <strcmp>:
   char) is greater, a negative value if the character in B (as
   an unsigned char) is greater, or zero if strings A and B are
   equal. */
int
strcmp (const char *a_, const char *b_) 
{
 8049aae:	83 ec 0c             	sub    $0xc,%esp
 8049ab1:	8b 4c 24 10          	mov    0x10(%esp),%ecx
 8049ab5:	8b 54 24 14          	mov    0x14(%esp),%edx
  const unsigned char *a = (const unsigned char *) a_;
  const unsigned char *b = (const unsigned char *) b_;

  ASSERT (a != NULL);
 8049ab9:	85 c9                	test   %ecx,%ecx
 8049abb:	75 1e                	jne    8049adb <strcmp+0x2d>
 8049abd:	83 ec 0c             	sub    $0xc,%esp
 8049ac0:	68 3c b0 04 08       	push   $0x804b03c
 8049ac5:	68 cb af 04 08       	push   $0x804afcb
 8049aca:	68 f8 ad 04 08       	push   $0x804adf8
 8049acf:	6a 4e                	push   $0x4e
 8049ad1:	68 e2 af 04 08       	push   $0x804afe2
 8049ad6:	e8 02 08 00 00       	call   804a2dd <debug_panic>
  ASSERT (b != NULL);
 8049adb:	85 d2                	test   %edx,%edx
 8049add:	74 0d                	je     8049aec <strcmp+0x3e>

  while (*a != '\0' && *a == *b) 
 8049adf:	0f b6 01             	movzbl (%ecx),%eax
 8049ae2:	84 c0                	test   %al,%al
 8049ae4:	74 35                	je     8049b1b <strcmp+0x6d>
 8049ae6:	3a 02                	cmp    (%edx),%al
 8049ae8:	74 20                	je     8049b0a <strcmp+0x5c>
 8049aea:	eb 2f                	jmp    8049b1b <strcmp+0x6d>
{
  const unsigned char *a = (const unsigned char *) a_;
  const unsigned char *b = (const unsigned char *) b_;

  ASSERT (a != NULL);
  ASSERT (b != NULL);
 8049aec:	83 ec 0c             	sub    $0xc,%esp
 8049aef:	68 46 b0 04 08       	push   $0x804b046
 8049af4:	68 cb af 04 08       	push   $0x804afcb
 8049af9:	68 f8 ad 04 08       	push   $0x804adf8
 8049afe:	6a 4f                	push   $0x4f
 8049b00:	68 e2 af 04 08       	push   $0x804afe2
 8049b05:	e8 d3 07 00 00       	call   804a2dd <debug_panic>

  while (*a != '\0' && *a == *b) 
    {
      a++;
 8049b0a:	83 c1 01             	add    $0x1,%ecx
      b++;
 8049b0d:	83 c2 01             	add    $0x1,%edx
  const unsigned char *b = (const unsigned char *) b_;

  ASSERT (a != NULL);
  ASSERT (b != NULL);

  while (*a != '\0' && *a == *b) 
 8049b10:	0f b6 01             	movzbl (%ecx),%eax
 8049b13:	84 c0                	test   %al,%al
 8049b15:	74 04                	je     8049b1b <strcmp+0x6d>
 8049b17:	3a 02                	cmp    (%edx),%al
 8049b19:	74 ef                	je     8049b0a <strcmp+0x5c>
    {
      a++;
      b++;
    }

  return *a < *b ? -1 : *a > *b;
 8049b1b:	0f b6 12             	movzbl (%edx),%edx
 8049b1e:	38 c2                	cmp    %al,%dl
 8049b20:	77 08                	ja     8049b2a <strcmp+0x7c>
 8049b22:	0f 92 c0             	setb   %al
 8049b25:	0f b6 c0             	movzbl %al,%eax
 8049b28:	eb 05                	jmp    8049b2f <strcmp+0x81>
 8049b2a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
 8049b2f:	83 c4 0c             	add    $0xc,%esp
 8049b32:	c3                   	ret    

08049b33 <memchr>:
/* Returns a pointer to the first occurrence of CH in the first
   SIZE bytes starting at BLOCK.  Returns a null pointer if CH
   does not occur in BLOCK. */
void *
memchr (const void *block_, int ch_, size_t size) 
{
 8049b33:	53                   	push   %ebx
 8049b34:	83 ec 08             	sub    $0x8,%esp
 8049b37:	8b 44 24 10          	mov    0x10(%esp),%eax
 8049b3b:	8b 54 24 14          	mov    0x14(%esp),%edx
 8049b3f:	8b 4c 24 18          	mov    0x18(%esp),%ecx
  const unsigned char *block = block_;
  unsigned char ch = ch_;
 8049b43:	89 d3                	mov    %edx,%ebx

  ASSERT (block != NULL || size == 0);
 8049b45:	85 c0                	test   %eax,%eax
 8049b47:	75 04                	jne    8049b4d <memchr+0x1a>
 8049b49:	85 c9                	test   %ecx,%ecx
 8049b4b:	75 0f                	jne    8049b5c <memchr+0x29>

  for (; size-- > 0; block++)
 8049b4d:	85 c9                	test   %ecx,%ecx
 8049b4f:	74 3e                	je     8049b8f <memchr+0x5c>
    if (*block == ch)
 8049b51:	3a 10                	cmp    (%eax),%dl
 8049b53:	74 3f                	je     8049b94 <memchr+0x61>
 8049b55:	8d 50 01             	lea    0x1(%eax),%edx
 8049b58:	01 c1                	add    %eax,%ecx
 8049b5a:	eb 26                	jmp    8049b82 <memchr+0x4f>
memchr (const void *block_, int ch_, size_t size) 
{
  const unsigned char *block = block_;
  unsigned char ch = ch_;

  ASSERT (block != NULL || size == 0);
 8049b5c:	83 ec 0c             	sub    $0xc,%esp
 8049b5f:	68 50 b0 04 08       	push   $0x804b050
 8049b64:	68 cb af 04 08       	push   $0x804afcb
 8049b69:	68 f0 ad 04 08       	push   $0x804adf0
 8049b6e:	6a 63                	push   $0x63
 8049b70:	68 e2 af 04 08       	push   $0x804afe2
 8049b75:	e8 63 07 00 00       	call   804a2dd <debug_panic>
 8049b7a:	83 c2 01             	add    $0x1,%edx

  for (; size-- > 0; block++)
    if (*block == ch)
 8049b7d:	3a 5a ff             	cmp    -0x1(%edx),%bl
 8049b80:	74 12                	je     8049b94 <memchr+0x61>
  const unsigned char *block = block_;
  unsigned char ch = ch_;

  ASSERT (block != NULL || size == 0);

  for (; size-- > 0; block++)
 8049b82:	89 d0                	mov    %edx,%eax
 8049b84:	39 ca                	cmp    %ecx,%edx
 8049b86:	75 f2                	jne    8049b7a <memchr+0x47>
    if (*block == ch)
      return (void *) block;

  return NULL;
 8049b88:	b8 00 00 00 00       	mov    $0x0,%eax
 8049b8d:	eb 05                	jmp    8049b94 <memchr+0x61>
 8049b8f:	b8 00 00 00 00       	mov    $0x0,%eax
}
 8049b94:	83 c4 08             	add    $0x8,%esp
 8049b97:	5b                   	pop    %ebx
 8049b98:	c3                   	ret    

08049b99 <strchr>:
   null pointer if C does not appear in STRING.  If C == '\0'
   then returns a pointer to the null terminator at the end of
   STRING. */
char *
strchr (const char *string, int c_) 
{
 8049b99:	53                   	push   %ebx
 8049b9a:	83 ec 08             	sub    $0x8,%esp
 8049b9d:	8b 44 24 10          	mov    0x10(%esp),%eax
 8049ba1:	8b 54 24 14          	mov    0x14(%esp),%edx
  char c = c_;

  ASSERT (string != NULL);
 8049ba5:	85 c0                	test   %eax,%eax
 8049ba7:	74 0b                	je     8049bb4 <strchr+0x1b>
 8049ba9:	89 d1                	mov    %edx,%ecx

  for (;;) 
    if (*string == c)
 8049bab:	0f b6 18             	movzbl (%eax),%ebx
 8049bae:	38 da                	cmp    %bl,%dl
 8049bb0:	75 20                	jne    8049bd2 <strchr+0x39>
 8049bb2:	eb 40                	jmp    8049bf4 <strchr+0x5b>
char *
strchr (const char *string, int c_) 
{
  char c = c_;

  ASSERT (string != NULL);
 8049bb4:	83 ec 0c             	sub    $0xc,%esp
 8049bb7:	68 6b b0 04 08       	push   $0x804b06b
 8049bbc:	68 cb af 04 08       	push   $0x804afcb
 8049bc1:	68 e8 ad 04 08       	push   $0x804ade8
 8049bc6:	6a 75                	push   $0x75
 8049bc8:	68 e2 af 04 08       	push   $0x804afe2
 8049bcd:	e8 0b 07 00 00       	call   804a2dd <debug_panic>

  for (;;) 
    if (*string == c)
      return (char *) string;
    else if (*string == '\0')
 8049bd2:	84 db                	test   %bl,%bl
 8049bd4:	75 06                	jne    8049bdc <strchr+0x43>
 8049bd6:	eb 10                	jmp    8049be8 <strchr+0x4f>
 8049bd8:	84 d2                	test   %dl,%dl
 8049bda:	74 13                	je     8049bef <strchr+0x56>
      return NULL;
    else
      string++;
 8049bdc:	83 c0 01             	add    $0x1,%eax
  char c = c_;

  ASSERT (string != NULL);

  for (;;) 
    if (*string == c)
 8049bdf:	0f b6 10             	movzbl (%eax),%edx
 8049be2:	38 d1                	cmp    %dl,%cl
 8049be4:	75 f2                	jne    8049bd8 <strchr+0x3f>
 8049be6:	eb 0c                	jmp    8049bf4 <strchr+0x5b>
      return (char *) string;
    else if (*string == '\0')
      return NULL;
 8049be8:	b8 00 00 00 00       	mov    $0x0,%eax
 8049bed:	eb 05                	jmp    8049bf4 <strchr+0x5b>
 8049bef:	b8 00 00 00 00       	mov    $0x0,%eax
    else
      string++;
}
 8049bf4:	83 c4 08             	add    $0x8,%esp
 8049bf7:	5b                   	pop    %ebx
 8049bf8:	c3                   	ret    

08049bf9 <strcspn>:

/* Returns the length of the initial substring of STRING that
   consists of characters that are not in STOP. */
size_t
strcspn (const char *string, const char *stop) 
{
 8049bf9:	57                   	push   %edi
 8049bfa:	56                   	push   %esi
 8049bfb:	53                   	push   %ebx
 8049bfc:	8b 74 24 10          	mov    0x10(%esp),%esi
 8049c00:	8b 7c 24 14          	mov    0x14(%esp),%edi
  size_t length;

  for (length = 0; string[length] != '\0'; length++)
 8049c04:	0f b6 06             	movzbl (%esi),%eax
 8049c07:	84 c0                	test   %al,%al
 8049c09:	74 26                	je     8049c31 <strcspn+0x38>
 8049c0b:	bb 00 00 00 00       	mov    $0x0,%ebx
    if (strchr (stop, string[length]) != NULL)
 8049c10:	83 ec 08             	sub    $0x8,%esp
 8049c13:	0f be c0             	movsbl %al,%eax
 8049c16:	50                   	push   %eax
 8049c17:	57                   	push   %edi
 8049c18:	e8 7c ff ff ff       	call   8049b99 <strchr>
 8049c1d:	83 c4 10             	add    $0x10,%esp
 8049c20:	85 c0                	test   %eax,%eax
 8049c22:	75 12                	jne    8049c36 <strcspn+0x3d>
size_t
strcspn (const char *string, const char *stop) 
{
  size_t length;

  for (length = 0; string[length] != '\0'; length++)
 8049c24:	83 c3 01             	add    $0x1,%ebx
 8049c27:	0f b6 04 1e          	movzbl (%esi,%ebx,1),%eax
 8049c2b:	84 c0                	test   %al,%al
 8049c2d:	75 e1                	jne    8049c10 <strcspn+0x17>
 8049c2f:	eb 05                	jmp    8049c36 <strcspn+0x3d>
 8049c31:	bb 00 00 00 00       	mov    $0x0,%ebx
    if (strchr (stop, string[length]) != NULL)
      break;
  return length;
}
 8049c36:	89 d8                	mov    %ebx,%eax
 8049c38:	5b                   	pop    %ebx
 8049c39:	5e                   	pop    %esi
 8049c3a:	5f                   	pop    %edi
 8049c3b:	c3                   	ret    

08049c3c <strpbrk>:
/* Returns a pointer to the first character in STRING that is
   also in STOP.  If no character in STRING is in STOP, returns a
   null pointer. */
char *
strpbrk (const char *string, const char *stop) 
{
 8049c3c:	56                   	push   %esi
 8049c3d:	53                   	push   %ebx
 8049c3e:	83 ec 04             	sub    $0x4,%esp
 8049c41:	8b 5c 24 10          	mov    0x10(%esp),%ebx
 8049c45:	8b 74 24 14          	mov    0x14(%esp),%esi
  for (; *string != '\0'; string++)
 8049c49:	0f b6 13             	movzbl (%ebx),%edx
 8049c4c:	84 d2                	test   %dl,%dl
 8049c4e:	74 20                	je     8049c70 <strpbrk+0x34>
    if (strchr (stop, *string) != NULL)
 8049c50:	83 ec 08             	sub    $0x8,%esp
 8049c53:	0f be d2             	movsbl %dl,%edx
 8049c56:	52                   	push   %edx
 8049c57:	56                   	push   %esi
 8049c58:	e8 3c ff ff ff       	call   8049b99 <strchr>
 8049c5d:	83 c4 10             	add    $0x10,%esp
 8049c60:	85 c0                	test   %eax,%eax
 8049c62:	75 13                	jne    8049c77 <strpbrk+0x3b>
   also in STOP.  If no character in STRING is in STOP, returns a
   null pointer. */
char *
strpbrk (const char *string, const char *stop) 
{
  for (; *string != '\0'; string++)
 8049c64:	83 c3 01             	add    $0x1,%ebx
 8049c67:	0f b6 13             	movzbl (%ebx),%edx
 8049c6a:	84 d2                	test   %dl,%dl
 8049c6c:	75 e2                	jne    8049c50 <strpbrk+0x14>
 8049c6e:	eb 09                	jmp    8049c79 <strpbrk+0x3d>
    if (strchr (stop, *string) != NULL)
      return (char *) string;
  return NULL;
 8049c70:	b8 00 00 00 00       	mov    $0x0,%eax
 8049c75:	eb 02                	jmp    8049c79 <strpbrk+0x3d>
 8049c77:	89 d8                	mov    %ebx,%eax
}
 8049c79:	83 c4 04             	add    $0x4,%esp
 8049c7c:	5b                   	pop    %ebx
 8049c7d:	5e                   	pop    %esi
 8049c7e:	c3                   	ret    

08049c7f <strrchr>:

/* Returns a pointer to the last occurrence of C in STRING.
   Returns a null pointer if C does not occur in STRING. */
char *
strrchr (const char *string, int c_) 
{
 8049c7f:	53                   	push   %ebx
 8049c80:	8b 54 24 08          	mov    0x8(%esp),%edx
  char c = c_;
 8049c84:	0f b6 5c 24 0c       	movzbl 0xc(%esp),%ebx
  const char *p = NULL;

  for (; *string != '\0'; string++)
 8049c89:	0f b6 0a             	movzbl (%edx),%ecx
 8049c8c:	84 c9                	test   %cl,%cl
 8049c8e:	74 16                	je     8049ca6 <strrchr+0x27>
 8049c90:	b8 00 00 00 00       	mov    $0x0,%eax
    if (*string == c)
 8049c95:	38 cb                	cmp    %cl,%bl
 8049c97:	0f 44 c2             	cmove  %edx,%eax
strrchr (const char *string, int c_) 
{
  char c = c_;
  const char *p = NULL;

  for (; *string != '\0'; string++)
 8049c9a:	83 c2 01             	add    $0x1,%edx
 8049c9d:	0f b6 0a             	movzbl (%edx),%ecx
 8049ca0:	84 c9                	test   %cl,%cl
 8049ca2:	75 f1                	jne    8049c95 <strrchr+0x16>
 8049ca4:	eb 05                	jmp    8049cab <strrchr+0x2c>
   Returns a null pointer if C does not occur in STRING. */
char *
strrchr (const char *string, int c_) 
{
  char c = c_;
  const char *p = NULL;
 8049ca6:	b8 00 00 00 00       	mov    $0x0,%eax

  for (; *string != '\0'; string++)
    if (*string == c)
      p = string;
  return (char *) p;
}
 8049cab:	5b                   	pop    %ebx
 8049cac:	c3                   	ret    

08049cad <strspn>:

/* Returns the length of the initial substring of STRING that
   consists of characters in SKIP. */
size_t
strspn (const char *string, const char *skip) 
{
 8049cad:	57                   	push   %edi
 8049cae:	56                   	push   %esi
 8049caf:	53                   	push   %ebx
 8049cb0:	8b 74 24 10          	mov    0x10(%esp),%esi
 8049cb4:	8b 7c 24 14          	mov    0x14(%esp),%edi
  size_t length;
  
  for (length = 0; string[length] != '\0'; length++)
 8049cb8:	0f b6 06             	movzbl (%esi),%eax
 8049cbb:	84 c0                	test   %al,%al
 8049cbd:	74 26                	je     8049ce5 <strspn+0x38>
 8049cbf:	bb 00 00 00 00       	mov    $0x0,%ebx
    if (strchr (skip, string[length]) == NULL)
 8049cc4:	83 ec 08             	sub    $0x8,%esp
 8049cc7:	0f be c0             	movsbl %al,%eax
 8049cca:	50                   	push   %eax
 8049ccb:	57                   	push   %edi
 8049ccc:	e8 c8 fe ff ff       	call   8049b99 <strchr>
 8049cd1:	83 c4 10             	add    $0x10,%esp
 8049cd4:	85 c0                	test   %eax,%eax
 8049cd6:	74 12                	je     8049cea <strspn+0x3d>
size_t
strspn (const char *string, const char *skip) 
{
  size_t length;
  
  for (length = 0; string[length] != '\0'; length++)
 8049cd8:	83 c3 01             	add    $0x1,%ebx
 8049cdb:	0f b6 04 1e          	movzbl (%esi,%ebx,1),%eax
 8049cdf:	84 c0                	test   %al,%al
 8049ce1:	75 e1                	jne    8049cc4 <strspn+0x17>
 8049ce3:	eb 05                	jmp    8049cea <strspn+0x3d>
 8049ce5:	bb 00 00 00 00       	mov    $0x0,%ebx
    if (strchr (skip, string[length]) == NULL)
      break;
  return length;
}
 8049cea:	89 d8                	mov    %ebx,%eax
 8049cec:	5b                   	pop    %ebx
 8049ced:	5e                   	pop    %esi
 8049cee:	5f                   	pop    %edi
 8049cef:	c3                   	ret    

08049cf0 <strtok_r>:
     'to'
     'tokenize.'
*/
char *
strtok_r (char *s, const char *delimiters, char **save_ptr) 
{
 8049cf0:	55                   	push   %ebp
 8049cf1:	57                   	push   %edi
 8049cf2:	56                   	push   %esi
 8049cf3:	53                   	push   %ebx
 8049cf4:	83 ec 0c             	sub    $0xc,%esp
 8049cf7:	8b 5c 24 20          	mov    0x20(%esp),%ebx
 8049cfb:	8b 74 24 24          	mov    0x24(%esp),%esi
  char *token;
  
  ASSERT (delimiters != NULL);
 8049cff:	85 f6                	test   %esi,%esi
 8049d01:	75 21                	jne    8049d24 <strtok_r+0x34>
 8049d03:	83 ec 0c             	sub    $0xc,%esp
 8049d06:	68 7a b0 04 08       	push   $0x804b07a
 8049d0b:	68 cb af 04 08       	push   $0x804afcb
 8049d10:	68 dc ad 04 08       	push   $0x804addc
 8049d15:	68 ef 00 00 00       	push   $0xef
 8049d1a:	68 e2 af 04 08       	push   $0x804afe2
 8049d1f:	e8 b9 05 00 00       	call   804a2dd <debug_panic>
  ASSERT (save_ptr != NULL);
 8049d24:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
 8049d29:	75 21                	jne    8049d4c <strtok_r+0x5c>
 8049d2b:	83 ec 0c             	sub    $0xc,%esp
 8049d2e:	68 8d b0 04 08       	push   $0x804b08d
 8049d33:	68 cb af 04 08       	push   $0x804afcb
 8049d38:	68 dc ad 04 08       	push   $0x804addc
 8049d3d:	68 f0 00 00 00       	push   $0xf0
 8049d42:	68 e2 af 04 08       	push   $0x804afe2
 8049d47:	e8 91 05 00 00       	call   804a2dd <debug_panic>

  /* If S is nonnull, start from it.
     If S is null, start from saved position. */
  if (s == NULL)
 8049d4c:	85 db                	test   %ebx,%ebx
 8049d4e:	75 41                	jne    8049d91 <strtok_r+0xa1>
    s = *save_ptr;
 8049d50:	8b 44 24 28          	mov    0x28(%esp),%eax
 8049d54:	8b 18                	mov    (%eax),%ebx
  ASSERT (s != NULL);
 8049d56:	85 db                	test   %ebx,%ebx
 8049d58:	75 37                	jne    8049d91 <strtok_r+0xa1>
 8049d5a:	83 ec 0c             	sub    $0xc,%esp
 8049d5d:	68 83 b0 04 08       	push   $0x804b083
 8049d62:	68 cb af 04 08       	push   $0x804afcb
 8049d67:	68 dc ad 04 08       	push   $0x804addc
 8049d6c:	68 f6 00 00 00       	push   $0xf6
 8049d71:	68 e2 af 04 08       	push   $0x804afe2
 8049d76:	e8 62 05 00 00       	call   804a2dd <debug_panic>
  while (strchr (delimiters, *s) != NULL) 
    {
      /* strchr() will always return nonnull if we're searching
         for a null byte, because every string contains a null
         byte (at the end). */
      if (*s == '\0')
 8049d7b:	89 f8                	mov    %edi,%eax
 8049d7d:	84 c0                	test   %al,%al
 8049d7f:	75 0d                	jne    8049d8e <strtok_r+0x9e>
        {
          *save_ptr = s;
 8049d81:	8b 44 24 28          	mov    0x28(%esp),%eax
 8049d85:	89 18                	mov    %ebx,(%eax)
          return NULL;
 8049d87:	b8 00 00 00 00       	mov    $0x0,%eax
 8049d8c:	eb 58                	jmp    8049de6 <strtok_r+0xf6>
        }

      s++;
 8049d8e:	83 c3 01             	add    $0x1,%ebx
  if (s == NULL)
    s = *save_ptr;
  ASSERT (s != NULL);

  /* Skip any DELIMITERS at our current position. */
  while (strchr (delimiters, *s) != NULL) 
 8049d91:	0f b6 3b             	movzbl (%ebx),%edi
 8049d94:	83 ec 08             	sub    $0x8,%esp
 8049d97:	89 f8                	mov    %edi,%eax
 8049d99:	0f be c0             	movsbl %al,%eax
 8049d9c:	50                   	push   %eax
 8049d9d:	56                   	push   %esi
 8049d9e:	e8 f6 fd ff ff       	call   8049b99 <strchr>
 8049da3:	83 c4 10             	add    $0x10,%esp
 8049da6:	85 c0                	test   %eax,%eax
 8049da8:	75 d1                	jne    8049d7b <strtok_r+0x8b>
 8049daa:	89 df                	mov    %ebx,%edi
    }

  /* Skip any non-DELIMITERS up to the end of the string. */
  token = s;
  while (strchr (delimiters, *s) == NULL)
    s++;
 8049dac:	83 c7 01             	add    $0x1,%edi
      s++;
    }

  /* Skip any non-DELIMITERS up to the end of the string. */
  token = s;
  while (strchr (delimiters, *s) == NULL)
 8049daf:	0f b6 2f             	movzbl (%edi),%ebp
 8049db2:	83 ec 08             	sub    $0x8,%esp
 8049db5:	89 e8                	mov    %ebp,%eax
 8049db7:	0f be c0             	movsbl %al,%eax
 8049dba:	50                   	push   %eax
 8049dbb:	56                   	push   %esi
 8049dbc:	e8 d8 fd ff ff       	call   8049b99 <strchr>
 8049dc1:	83 c4 10             	add    $0x10,%esp
 8049dc4:	85 c0                	test   %eax,%eax
 8049dc6:	74 e4                	je     8049dac <strtok_r+0xbc>
    s++;
  if (*s != '\0') 
 8049dc8:	89 e8                	mov    %ebp,%eax
 8049dca:	84 c0                	test   %al,%al
 8049dcc:	74 10                	je     8049dde <strtok_r+0xee>
    {
      *s = '\0';
 8049dce:	c6 07 00             	movb   $0x0,(%edi)
      *save_ptr = s + 1;
 8049dd1:	83 c7 01             	add    $0x1,%edi
 8049dd4:	8b 44 24 28          	mov    0x28(%esp),%eax
 8049dd8:	89 38                	mov    %edi,(%eax)
 8049dda:	89 d8                	mov    %ebx,%eax
 8049ddc:	eb 08                	jmp    8049de6 <strtok_r+0xf6>
    }
  else 
    *save_ptr = s;
 8049dde:	8b 44 24 28          	mov    0x28(%esp),%eax
 8049de2:	89 38                	mov    %edi,(%eax)
 8049de4:	89 d8                	mov    %ebx,%eax
  return token;
}
 8049de6:	83 c4 0c             	add    $0xc,%esp
 8049de9:	5b                   	pop    %ebx
 8049dea:	5e                   	pop    %esi
 8049deb:	5f                   	pop    %edi
 8049dec:	5d                   	pop    %ebp
 8049ded:	c3                   	ret    

08049dee <memset>:

/* Sets the SIZE bytes in DST to VALUE. */
void *
memset (void *dst_, int value, size_t size) 
{
 8049dee:	56                   	push   %esi
 8049def:	53                   	push   %ebx
 8049df0:	83 ec 04             	sub    $0x4,%esp
 8049df3:	8b 44 24 10          	mov    0x10(%esp),%eax
 8049df7:	8b 5c 24 14          	mov    0x14(%esp),%ebx
 8049dfb:	8b 74 24 18          	mov    0x18(%esp),%esi
  unsigned char *dst = dst_;

  ASSERT (dst != NULL || size == 0);
 8049dff:	85 c0                	test   %eax,%eax
 8049e01:	75 04                	jne    8049e07 <memset+0x19>
 8049e03:	85 f6                	test   %esi,%esi
 8049e05:	75 0b                	jne    8049e12 <memset+0x24>
 8049e07:	8d 0c 30             	lea    (%eax,%esi,1),%ecx
  
  while (size-- > 0)
 8049e0a:	89 c2                	mov    %eax,%edx
 8049e0c:	85 f6                	test   %esi,%esi
 8049e0e:	75 23                	jne    8049e33 <memset+0x45>
 8049e10:	eb 2b                	jmp    8049e3d <memset+0x4f>
void *
memset (void *dst_, int value, size_t size) 
{
  unsigned char *dst = dst_;

  ASSERT (dst != NULL || size == 0);
 8049e12:	83 ec 0c             	sub    $0xc,%esp
 8049e15:	68 b2 af 04 08       	push   $0x804afb2
 8049e1a:	68 cb af 04 08       	push   $0x804afcb
 8049e1f:	68 d4 ad 04 08       	push   $0x804add4
 8049e24:	68 1b 01 00 00       	push   $0x11b
 8049e29:	68 e2 af 04 08       	push   $0x804afe2
 8049e2e:	e8 aa 04 00 00       	call   804a2dd <debug_panic>
  
  while (size-- > 0)
    *dst++ = value;
 8049e33:	83 c2 01             	add    $0x1,%edx
 8049e36:	88 5a ff             	mov    %bl,-0x1(%edx)
{
  unsigned char *dst = dst_;

  ASSERT (dst != NULL || size == 0);
  
  while (size-- > 0)
 8049e39:	39 d1                	cmp    %edx,%ecx
 8049e3b:	75 f6                	jne    8049e33 <memset+0x45>
    *dst++ = value;

  return dst_;
}
 8049e3d:	83 c4 04             	add    $0x4,%esp
 8049e40:	5b                   	pop    %ebx
 8049e41:	5e                   	pop    %esi
 8049e42:	c3                   	ret    

08049e43 <strlen>:

/* Returns the length of STRING. */
size_t
strlen (const char *string) 
{
 8049e43:	83 ec 0c             	sub    $0xc,%esp
 8049e46:	8b 54 24 10          	mov    0x10(%esp),%edx
  const char *p;

  ASSERT (string != NULL);
 8049e4a:	85 d2                	test   %edx,%edx
 8049e4c:	74 09                	je     8049e57 <strlen+0x14>

  for (p = string; *p != '\0'; p++)
 8049e4e:	89 d0                	mov    %edx,%eax
 8049e50:	80 3a 00             	cmpb   $0x0,(%edx)
 8049e53:	74 2d                	je     8049e82 <strlen+0x3f>
 8049e55:	eb 21                	jmp    8049e78 <strlen+0x35>
size_t
strlen (const char *string) 
{
  const char *p;

  ASSERT (string != NULL);
 8049e57:	83 ec 0c             	sub    $0xc,%esp
 8049e5a:	68 6b b0 04 08       	push   $0x804b06b
 8049e5f:	68 cb af 04 08       	push   $0x804afcb
 8049e64:	68 cc ad 04 08       	push   $0x804adcc
 8049e69:	68 29 01 00 00       	push   $0x129
 8049e6e:	68 e2 af 04 08       	push   $0x804afe2
 8049e73:	e8 65 04 00 00       	call   804a2dd <debug_panic>

  for (p = string; *p != '\0'; p++)
 8049e78:	89 d0                	mov    %edx,%eax
 8049e7a:	83 c0 01             	add    $0x1,%eax
 8049e7d:	80 38 00             	cmpb   $0x0,(%eax)
 8049e80:	75 f8                	jne    8049e7a <strlen+0x37>
    continue;
  return p - string;
 8049e82:	29 d0                	sub    %edx,%eax
}
 8049e84:	83 c4 0c             	add    $0xc,%esp
 8049e87:	c3                   	ret    

08049e88 <strstr>:
/* Returns a pointer to the first occurrence of NEEDLE within
   HAYSTACK.  Returns a null pointer if NEEDLE does not exist
   within HAYSTACK. */
char *
strstr (const char *haystack, const char *needle) 
{
 8049e88:	55                   	push   %ebp
 8049e89:	57                   	push   %edi
 8049e8a:	56                   	push   %esi
 8049e8b:	53                   	push   %ebx
 8049e8c:	83 ec 1c             	sub    $0x1c,%esp
 8049e8f:	8b 6c 24 34          	mov    0x34(%esp),%ebp
  size_t haystack_len = strlen (haystack);
 8049e93:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
 8049e98:	b8 00 00 00 00       	mov    $0x0,%eax
 8049e9d:	89 d9                	mov    %ebx,%ecx
 8049e9f:	8b 7c 24 30          	mov    0x30(%esp),%edi
 8049ea3:	f2 ae                	repnz scas %es:(%edi),%al
 8049ea5:	f7 d1                	not    %ecx
 8049ea7:	8d 51 ff             	lea    -0x1(%ecx),%edx
  size_t needle_len = strlen (needle);
 8049eaa:	89 d9                	mov    %ebx,%ecx
 8049eac:	89 ef                	mov    %ebp,%edi
 8049eae:	f2 ae                	repnz scas %es:(%edi),%al
 8049eb0:	89 c8                	mov    %ecx,%eax
 8049eb2:	f7 d0                	not    %eax
 8049eb4:	8d 78 ff             	lea    -0x1(%eax),%edi

  if (haystack_len >= needle_len) 
 8049eb7:	39 fa                	cmp    %edi,%edx
 8049eb9:	72 33                	jb     8049eee <strstr+0x66>
    {
      size_t i;

      for (i = 0; i <= haystack_len - needle_len; i++)
 8049ebb:	29 fa                	sub    %edi,%edx
 8049ebd:	89 54 24 0c          	mov    %edx,0xc(%esp)
 8049ec1:	bb 00 00 00 00       	mov    $0x0,%ebx
 8049ec6:	89 de                	mov    %ebx,%esi
 8049ec8:	03 74 24 30          	add    0x30(%esp),%esi
        if (!memcmp (haystack + i, needle, needle_len))
 8049ecc:	83 ec 04             	sub    $0x4,%esp
 8049ecf:	57                   	push   %edi
 8049ed0:	55                   	push   %ebp
 8049ed1:	56                   	push   %esi
 8049ed2:	e8 2f fb ff ff       	call   8049a06 <memcmp>
 8049ed7:	83 c4 10             	add    $0x10,%esp
 8049eda:	85 c0                	test   %eax,%eax
 8049edc:	74 17                	je     8049ef5 <strstr+0x6d>

  if (haystack_len >= needle_len) 
    {
      size_t i;

      for (i = 0; i <= haystack_len - needle_len; i++)
 8049ede:	83 c3 01             	add    $0x1,%ebx
 8049ee1:	3b 5c 24 0c          	cmp    0xc(%esp),%ebx
 8049ee5:	76 df                	jbe    8049ec6 <strstr+0x3e>
        if (!memcmp (haystack + i, needle, needle_len))
          return (char *) haystack + i;
    }

  return NULL;
 8049ee7:	b8 00 00 00 00       	mov    $0x0,%eax
 8049eec:	eb 09                	jmp    8049ef7 <strstr+0x6f>
 8049eee:	b8 00 00 00 00       	mov    $0x0,%eax
 8049ef3:	eb 02                	jmp    8049ef7 <strstr+0x6f>
  if (haystack_len >= needle_len) 
    {
      size_t i;

      for (i = 0; i <= haystack_len - needle_len; i++)
        if (!memcmp (haystack + i, needle, needle_len))
 8049ef5:	89 f0                	mov    %esi,%eax
          return (char *) haystack + i;
    }

  return NULL;
}
 8049ef7:	83 c4 1c             	add    $0x1c,%esp
 8049efa:	5b                   	pop    %ebx
 8049efb:	5e                   	pop    %esi
 8049efc:	5f                   	pop    %edi
 8049efd:	5d                   	pop    %ebp
 8049efe:	c3                   	ret    

08049eff <strnlen>:

/* If STRING is less than MAXLEN characters in length, returns
   its actual length.  Otherwise, returns MAXLEN. */
size_t
strnlen (const char *string, size_t maxlen) 
{
 8049eff:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049f03:	8b 4c 24 08          	mov    0x8(%esp),%ecx
  size_t length;

  for (length = 0; string[length] != '\0' && length < maxlen; length++)
 8049f07:	80 3a 00             	cmpb   $0x0,(%edx)
 8049f0a:	74 18                	je     8049f24 <strnlen+0x25>
 8049f0c:	85 c9                	test   %ecx,%ecx
 8049f0e:	74 14                	je     8049f24 <strnlen+0x25>
 8049f10:	b8 00 00 00 00       	mov    $0x0,%eax
 8049f15:	83 c0 01             	add    $0x1,%eax
 8049f18:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
 8049f1c:	74 0b                	je     8049f29 <strnlen+0x2a>
 8049f1e:	39 c1                	cmp    %eax,%ecx
 8049f20:	77 f3                	ja     8049f15 <strnlen+0x16>
 8049f22:	f3 c3                	repz ret 
 8049f24:	b8 00 00 00 00       	mov    $0x0,%eax
    continue;
  return length;
}
 8049f29:	f3 c3                	repz ret 

08049f2b <strlcpy>:
   increasingly popular extension.  See
   http://www.courtesan.com/todd/papers/strlcpy.html for
   information on strlcpy(). */
size_t
strlcpy (char *dst, const char *src, size_t size) 
{
 8049f2b:	55                   	push   %ebp
 8049f2c:	57                   	push   %edi
 8049f2d:	56                   	push   %esi
 8049f2e:	53                   	push   %ebx
 8049f2f:	83 ec 0c             	sub    $0xc,%esp
 8049f32:	8b 74 24 20          	mov    0x20(%esp),%esi
 8049f36:	8b 6c 24 24          	mov    0x24(%esp),%ebp
 8049f3a:	8b 54 24 28          	mov    0x28(%esp),%edx
  size_t src_len;

  ASSERT (dst != NULL);
 8049f3e:	85 f6                	test   %esi,%esi
 8049f40:	75 21                	jne    8049f63 <strlcpy+0x38>
 8049f42:	83 ec 0c             	sub    $0xc,%esp
 8049f45:	68 9e b0 04 08       	push   $0x804b09e
 8049f4a:	68 cb af 04 08       	push   $0x804afcb
 8049f4f:	68 c4 ad 04 08       	push   $0x804adc4
 8049f54:	68 4a 01 00 00       	push   $0x14a
 8049f59:	68 e2 af 04 08       	push   $0x804afe2
 8049f5e:	e8 7a 03 00 00       	call   804a2dd <debug_panic>
  ASSERT (src != NULL);
 8049f63:	85 ed                	test   %ebp,%ebp
 8049f65:	75 21                	jne    8049f88 <strlcpy+0x5d>
 8049f67:	83 ec 0c             	sub    $0xc,%esp
 8049f6a:	68 aa b0 04 08       	push   $0x804b0aa
 8049f6f:	68 cb af 04 08       	push   $0x804afcb
 8049f74:	68 c4 ad 04 08       	push   $0x804adc4
 8049f79:	68 4b 01 00 00       	push   $0x14b
 8049f7e:	68 e2 af 04 08       	push   $0x804afe2
 8049f83:	e8 55 03 00 00       	call   804a2dd <debug_panic>

  src_len = strlen (src);
 8049f88:	b8 00 00 00 00       	mov    $0x0,%eax
 8049f8d:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
 8049f92:	89 ef                	mov    %ebp,%edi
 8049f94:	f2 ae                	repnz scas %es:(%edi),%al
 8049f96:	f7 d1                	not    %ecx
 8049f98:	8d 59 ff             	lea    -0x1(%ecx),%ebx
  if (size > 0) 
 8049f9b:	85 d2                	test   %edx,%edx
 8049f9d:	74 1c                	je     8049fbb <strlcpy+0x90>
    {
      size_t dst_len = size - 1;
 8049f9f:	83 ea 01             	sub    $0x1,%edx
 8049fa2:	39 d3                	cmp    %edx,%ebx
 8049fa4:	89 d7                	mov    %edx,%edi
 8049fa6:	0f 46 fb             	cmovbe %ebx,%edi
      if (src_len < dst_len)
        dst_len = src_len;
      memcpy (dst, src, dst_len);
 8049fa9:	83 ec 04             	sub    $0x4,%esp
 8049fac:	57                   	push   %edi
 8049fad:	55                   	push   %ebp
 8049fae:	56                   	push   %esi
 8049faf:	e8 2d f9 ff ff       	call   80498e1 <memcpy>
      dst[dst_len] = '\0';
 8049fb4:	c6 04 3e 00          	movb   $0x0,(%esi,%edi,1)
 8049fb8:	83 c4 10             	add    $0x10,%esp
    }
  return src_len;
}
 8049fbb:	89 d8                	mov    %ebx,%eax
 8049fbd:	83 c4 0c             	add    $0xc,%esp
 8049fc0:	5b                   	pop    %ebx
 8049fc1:	5e                   	pop    %esi
 8049fc2:	5f                   	pop    %edi
 8049fc3:	5d                   	pop    %ebp
 8049fc4:	c3                   	ret    

08049fc5 <strlcat>:
   increasingly popular extension.  See
   http://www.courtesan.com/todd/papers/strlcpy.html for
   information on strlcpy(). */
size_t
strlcat (char *dst, const char *src, size_t size) 
{
 8049fc5:	55                   	push   %ebp
 8049fc6:	57                   	push   %edi
 8049fc7:	56                   	push   %esi
 8049fc8:	53                   	push   %ebx
 8049fc9:	83 ec 0c             	sub    $0xc,%esp
 8049fcc:	8b 54 24 24          	mov    0x24(%esp),%edx
  size_t src_len, dst_len;

  ASSERT (dst != NULL);
 8049fd0:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
 8049fd5:	75 21                	jne    8049ff8 <strlcat+0x33>
 8049fd7:	83 ec 0c             	sub    $0xc,%esp
 8049fda:	68 9e b0 04 08       	push   $0x804b09e
 8049fdf:	68 cb af 04 08       	push   $0x804afcb
 8049fe4:	68 bc ad 04 08       	push   $0x804adbc
 8049fe9:	68 68 01 00 00       	push   $0x168
 8049fee:	68 e2 af 04 08       	push   $0x804afe2
 8049ff3:	e8 e5 02 00 00       	call   804a2dd <debug_panic>
  ASSERT (src != NULL);
 8049ff8:	85 d2                	test   %edx,%edx
 8049ffa:	75 21                	jne    804a01d <strlcat+0x58>
 8049ffc:	83 ec 0c             	sub    $0xc,%esp
 8049fff:	68 aa b0 04 08       	push   $0x804b0aa
 804a004:	68 cb af 04 08       	push   $0x804afcb
 804a009:	68 bc ad 04 08       	push   $0x804adbc
 804a00e:	68 69 01 00 00       	push   $0x169
 804a013:	68 e2 af 04 08       	push   $0x804afe2
 804a018:	e8 c0 02 00 00       	call   804a2dd <debug_panic>

  src_len = strlen (src);
 804a01d:	be ff ff ff ff       	mov    $0xffffffff,%esi
 804a022:	b8 00 00 00 00       	mov    $0x0,%eax
 804a027:	89 f1                	mov    %esi,%ecx
 804a029:	89 d7                	mov    %edx,%edi
 804a02b:	f2 ae                	repnz scas %es:(%edi),%al
 804a02d:	f7 d1                	not    %ecx
 804a02f:	8d 69 ff             	lea    -0x1(%ecx),%ebp
  dst_len = strlen (dst);
 804a032:	89 f1                	mov    %esi,%ecx
 804a034:	8b 7c 24 20          	mov    0x20(%esp),%edi
 804a038:	f2 ae                	repnz scas %es:(%edi),%al
 804a03a:	89 c8                	mov    %ecx,%eax
 804a03c:	f7 d0                	not    %eax
 804a03e:	8d 58 ff             	lea    -0x1(%eax),%ebx
  if (size > 0 && dst_len < size) 
 804a041:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
 804a046:	74 2c                	je     804a074 <strlcat+0xaf>
 804a048:	3b 5c 24 28          	cmp    0x28(%esp),%ebx
 804a04c:	73 26                	jae    804a074 <strlcat+0xaf>
    {
      size_t copy_cnt = size - dst_len - 1;
 804a04e:	8b 44 24 28          	mov    0x28(%esp),%eax
 804a052:	8d 70 ff             	lea    -0x1(%eax),%esi
 804a055:	29 de                	sub    %ebx,%esi
 804a057:	39 f5                	cmp    %esi,%ebp
 804a059:	0f 46 f5             	cmovbe %ebp,%esi
      if (src_len < copy_cnt)
        copy_cnt = src_len;
      memcpy (dst + dst_len, src, copy_cnt);
 804a05c:	89 df                	mov    %ebx,%edi
 804a05e:	03 7c 24 20          	add    0x20(%esp),%edi
 804a062:	83 ec 04             	sub    $0x4,%esp
 804a065:	56                   	push   %esi
 804a066:	52                   	push   %edx
 804a067:	57                   	push   %edi
 804a068:	e8 74 f8 ff ff       	call   80498e1 <memcpy>
      dst[dst_len + copy_cnt] = '\0';
 804a06d:	c6 04 37 00          	movb   $0x0,(%edi,%esi,1)
 804a071:	83 c4 10             	add    $0x10,%esp
    }
  return src_len + dst_len;
 804a074:	8d 44 1d 00          	lea    0x0(%ebp,%ebx,1),%eax
}
 804a078:	83 c4 0c             	add    $0xc,%esp
 804a07b:	5b                   	pop    %ebx
 804a07c:	5e                   	pop    %esi
 804a07d:	5f                   	pop    %edi
 804a07e:	5d                   	pop    %ebp
 804a07f:	c3                   	ret    

0804a080 <udiv64>:

/* Divides unsigned 64-bit N by unsigned 64-bit D and returns the
   quotient. */
static uint64_t
udiv64 (uint64_t n, uint64_t d)
{
 804a080:	55                   	push   %ebp
 804a081:	57                   	push   %edi
 804a082:	56                   	push   %esi
 804a083:	53                   	push   %ebx
 804a084:	83 ec 1c             	sub    $0x1c,%esp
 804a087:	89 04 24             	mov    %eax,(%esp)
 804a08a:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a08e:	8b 74 24 30          	mov    0x30(%esp),%esi
 804a092:	8b 7c 24 34          	mov    0x34(%esp),%edi
  if ((d >> 32) == 0) 
 804a096:	85 ff                	test   %edi,%edi
 804a098:	75 43                	jne    804a0dd <udiv64+0x5d>
             <=> [b - 1/d] < b
         which is a tautology.

         Therefore, this code is correct and will not trap. */
      uint64_t b = 1ULL << 32;
      uint32_t n1 = n >> 32;
 804a09a:	8b 44 24 04          	mov    0x4(%esp),%eax
      uint32_t n0 = n; 
      uint32_t d0 = d;

      return divl (b * (n1 % d0) + n0, d0) + b * (n1 / d0); 
 804a09e:	ba 00 00 00 00       	mov    $0x0,%edx
 804a0a3:	f7 f6                	div    %esi
 804a0a5:	89 c7                	mov    %eax,%edi
 804a0a7:	89 d0                	mov    %edx,%eax
 804a0a9:	89 c2                	mov    %eax,%edx
 804a0ab:	b8 00 00 00 00       	mov    $0x0,%eax
 804a0b0:	8b 0c 24             	mov    (%esp),%ecx
 804a0b3:	bb 00 00 00 00       	mov    $0x0,%ebx
 804a0b8:	01 c8                	add    %ecx,%eax
 804a0ba:	11 da                	adc    %ebx,%edx
{
  uint32_t n1 = n >> 32;
  uint32_t n0 = n;
  uint32_t q, r;

  asm ("divl %4"
 804a0bc:	f7 f6                	div    %esi
      uint64_t b = 1ULL << 32;
      uint32_t n1 = n >> 32;
      uint32_t n0 = n; 
      uint32_t d0 = d;

      return divl (b * (n1 % d0) + n0, d0) + b * (n1 / d0); 
 804a0be:	89 f9                	mov    %edi,%ecx
 804a0c0:	89 cf                	mov    %ecx,%edi
 804a0c2:	be 00 00 00 00       	mov    $0x0,%esi
 804a0c7:	ba 00 00 00 00       	mov    $0x0,%edx
 804a0cc:	01 c6                	add    %eax,%esi
 804a0ce:	11 d7                	adc    %edx,%edi
 804a0d0:	89 74 24 08          	mov    %esi,0x8(%esp)
 804a0d4:	89 7c 24 0c          	mov    %edi,0xc(%esp)
 804a0d8:	e9 05 01 00 00       	jmp    804a1e2 <udiv64+0x162>
 804a0dd:	89 fa                	mov    %edi,%edx
    }
  else 
    {
      /* Based on the algorithm and proof available from
         http://www.hackersdelight.org/revisions.pdf. */
      if (n < d)
 804a0df:	8b 0c 24             	mov    (%esp),%ecx
 804a0e2:	8b 5c 24 04          	mov    0x4(%esp),%ebx
 804a0e6:	39 df                	cmp    %ebx,%edi
 804a0e8:	0f 87 e4 00 00 00    	ja     804a1d2 <udiv64+0x152>
 804a0ee:	72 08                	jb     804a0f8 <udiv64+0x78>
 804a0f0:	39 ce                	cmp    %ecx,%esi
 804a0f2:	0f 87 da 00 00 00    	ja     804a1d2 <udiv64+0x152>
        return 0;
      else 
        {
          uint32_t d1 = d >> 32;
 804a0f8:	89 d0                	mov    %edx,%eax
  /* This technique is portable, but there are better ways to do
     it on particular systems.  With sufficiently new enough GCC,
     you can use __builtin_clz() to take advantage of GCC's
     knowledge of how to do it.  Or you can use the x86 BSR
     instruction directly. */
  int n = 0;
 804a0fa:	bd 00 00 00 00       	mov    $0x0,%ebp
  if (x <= 0x0000FFFF)
 804a0ff:	81 fa ff ff 00 00    	cmp    $0xffff,%edx
 804a105:	77 08                	ja     804a10f <udiv64+0x8f>
    {
      n += 16;
      x <<= 16; 
 804a107:	c1 e0 10             	shl    $0x10,%eax
     knowledge of how to do it.  Or you can use the x86 BSR
     instruction directly. */
  int n = 0;
  if (x <= 0x0000FFFF)
    {
      n += 16;
 804a10a:	bd 10 00 00 00       	mov    $0x10,%ebp
      x <<= 16; 
    }
  if (x <= 0x00FFFFFF)
 804a10f:	3d ff ff ff 00       	cmp    $0xffffff,%eax
 804a114:	77 06                	ja     804a11c <udiv64+0x9c>
    {
      n += 8;
 804a116:	83 c5 08             	add    $0x8,%ebp
      x <<= 8; 
 804a119:	c1 e0 08             	shl    $0x8,%eax
    }
  if (x <= 0x0FFFFFFF)
 804a11c:	3d ff ff ff 0f       	cmp    $0xfffffff,%eax
 804a121:	77 06                	ja     804a129 <udiv64+0xa9>
    {
      n += 4;
 804a123:	83 c5 04             	add    $0x4,%ebp
      x <<= 4;
 804a126:	c1 e0 04             	shl    $0x4,%eax
    }
  if (x <= 0x3FFFFFFF)
 804a129:	3d ff ff ff 3f       	cmp    $0x3fffffff,%eax
 804a12e:	77 06                	ja     804a136 <udiv64+0xb6>
    {
      n += 2;
 804a130:	83 c5 02             	add    $0x2,%ebp
      x <<= 2; 
 804a133:	c1 e0 02             	shl    $0x2,%eax
    }
  if (x <= 0x7FFFFFFF)
    n++;
 804a136:	3d 00 00 00 80       	cmp    $0x80000000,%eax
 804a13b:	83 d5 00             	adc    $0x0,%ebp
        return 0;
      else 
        {
          uint32_t d1 = d >> 32;
          int s = nlz (d1);
          uint64_t q = divl (n >> 1, (d << s) >> 32) >> (31 - s);
 804a13e:	8b 04 24             	mov    (%esp),%eax
 804a141:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a145:	0f ac d0 01          	shrd   $0x1,%edx,%eax
 804a149:	d1 ea                	shr    %edx
 804a14b:	89 44 24 08          	mov    %eax,0x8(%esp)
 804a14f:	89 54 24 0c          	mov    %edx,0xc(%esp)
{
  uint32_t n1 = n >> 32;
  uint32_t n0 = n;
  uint32_t q, r;

  asm ("divl %4"
 804a153:	89 f0                	mov    %esi,%eax
 804a155:	89 fa                	mov    %edi,%edx
 804a157:	89 e9                	mov    %ebp,%ecx
 804a159:	0f a5 f2             	shld   %cl,%esi,%edx
 804a15c:	d3 e0                	shl    %cl,%eax
 804a15e:	f6 c1 20             	test   $0x20,%cl
 804a161:	74 02                	je     804a165 <udiv64+0xe5>
 804a163:	89 c2                	mov    %eax,%edx
 804a165:	89 d3                	mov    %edx,%ebx
 804a167:	8b 54 24 0c          	mov    0xc(%esp),%edx
 804a16b:	8b 44 24 08          	mov    0x8(%esp),%eax
 804a16f:	f7 f3                	div    %ebx
        return 0;
      else 
        {
          uint32_t d1 = d >> 32;
          int s = nlz (d1);
          uint64_t q = divl (n >> 1, (d << s) >> 32) >> (31 - s);
 804a171:	b9 1f 00 00 00       	mov    $0x1f,%ecx
 804a176:	29 e9                	sub    %ebp,%ecx
 804a178:	d3 e8                	shr    %cl,%eax
 804a17a:	89 c2                	mov    %eax,%edx
 804a17c:	b9 00 00 00 00       	mov    $0x0,%ecx
 804a181:	89 44 24 10          	mov    %eax,0x10(%esp)
 804a185:	89 4c 24 14          	mov    %ecx,0x14(%esp)
          return n - (q - 1) * d < d ? q - 1 : q; 
 804a189:	83 c2 ff             	add    $0xffffffff,%edx
 804a18c:	83 d1 ff             	adc    $0xffffffff,%ecx
 804a18f:	89 cb                	mov    %ecx,%ebx
 804a191:	89 54 24 08          	mov    %edx,0x8(%esp)
 804a195:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
 804a199:	89 fd                	mov    %edi,%ebp
 804a19b:	0f af ea             	imul   %edx,%ebp
 804a19e:	89 d8                	mov    %ebx,%eax
 804a1a0:	0f af c6             	imul   %esi,%eax
 804a1a3:	01 c5                	add    %eax,%ebp
 804a1a5:	89 f0                	mov    %esi,%eax
 804a1a7:	f7 e2                	mul    %edx
 804a1a9:	01 ea                	add    %ebp,%edx
 804a1ab:	8b 0c 24             	mov    (%esp),%ecx
 804a1ae:	8b 5c 24 04          	mov    0x4(%esp),%ebx
 804a1b2:	29 c1                	sub    %eax,%ecx
 804a1b4:	19 d3                	sbb    %edx,%ebx
 804a1b6:	39 df                	cmp    %ebx,%edi
 804a1b8:	77 28                	ja     804a1e2 <udiv64+0x162>
 804a1ba:	72 04                	jb     804a1c0 <udiv64+0x140>
 804a1bc:	39 ce                	cmp    %ecx,%esi
 804a1be:	77 22                	ja     804a1e2 <udiv64+0x162>
 804a1c0:	8b 44 24 10          	mov    0x10(%esp),%eax
 804a1c4:	8b 54 24 14          	mov    0x14(%esp),%edx
 804a1c8:	89 44 24 08          	mov    %eax,0x8(%esp)
 804a1cc:	89 54 24 0c          	mov    %edx,0xc(%esp)
 804a1d0:	eb 10                	jmp    804a1e2 <udiv64+0x162>
  else 
    {
      /* Based on the algorithm and proof available from
         http://www.hackersdelight.org/revisions.pdf. */
      if (n < d)
        return 0;
 804a1d2:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 804a1d9:	00 
 804a1da:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
 804a1e1:	00 
          int s = nlz (d1);
          uint64_t q = divl (n >> 1, (d << s) >> 32) >> (31 - s);
          return n - (q - 1) * d < d ? q - 1 : q; 
        }
    }
}
 804a1e2:	8b 44 24 08          	mov    0x8(%esp),%eax
 804a1e6:	8b 54 24 0c          	mov    0xc(%esp),%edx
 804a1ea:	83 c4 1c             	add    $0x1c,%esp
 804a1ed:	5b                   	pop    %ebx
 804a1ee:	5e                   	pop    %esi
 804a1ef:	5f                   	pop    %edi
 804a1f0:	5d                   	pop    %ebp
 804a1f1:	c3                   	ret    

0804a1f2 <sdiv64>:

/* Divides signed 64-bit N by signed 64-bit D and returns the
   quotient. */
static int64_t
sdiv64 (int64_t n, int64_t d)
{
 804a1f2:	57                   	push   %edi
 804a1f3:	56                   	push   %esi
 804a1f4:	53                   	push   %ebx
 804a1f5:	83 ec 08             	sub    $0x8,%esp
 804a1f8:	89 04 24             	mov    %eax,(%esp)
 804a1fb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a1ff:	8b 74 24 18          	mov    0x18(%esp),%esi
 804a203:	8b 7c 24 1c          	mov    0x1c(%esp),%edi
  uint64_t n_abs = n >= 0 ? (uint64_t) n : -(uint64_t) n;
 804a207:	85 d2                	test   %edx,%edx
 804a209:	79 07                	jns    804a212 <sdiv64+0x20>
 804a20b:	f7 d8                	neg    %eax
 804a20d:	83 d2 00             	adc    $0x0,%edx
 804a210:	f7 da                	neg    %edx
  uint64_t d_abs = d >= 0 ? (uint64_t) d : -(uint64_t) d;
 804a212:	89 f1                	mov    %esi,%ecx
 804a214:	89 fb                	mov    %edi,%ebx
 804a216:	85 ff                	test   %edi,%edi
 804a218:	79 07                	jns    804a221 <sdiv64+0x2f>
 804a21a:	f7 d9                	neg    %ecx
 804a21c:	83 d3 00             	adc    $0x0,%ebx
 804a21f:	f7 db                	neg    %ebx
  uint64_t q_abs = udiv64 (n_abs, d_abs);
 804a221:	53                   	push   %ebx
 804a222:	51                   	push   %ecx
 804a223:	e8 58 fe ff ff       	call   804a080 <udiv64>
 804a228:	83 c4 08             	add    $0x8,%esp
  return (n < 0) == (d < 0) ? (int64_t) q_abs : -(int64_t) q_abs;
 804a22b:	8b 4c 24 04          	mov    0x4(%esp),%ecx
 804a22f:	f7 d1                	not    %ecx
 804a231:	c1 e9 1f             	shr    $0x1f,%ecx
 804a234:	89 fb                	mov    %edi,%ebx
 804a236:	c1 eb 1f             	shr    $0x1f,%ebx
 804a239:	38 d9                	cmp    %bl,%cl
 804a23b:	75 07                	jne    804a244 <sdiv64+0x52>
 804a23d:	f7 d8                	neg    %eax
 804a23f:	83 d2 00             	adc    $0x0,%edx
 804a242:	f7 da                	neg    %edx
}
 804a244:	83 c4 08             	add    $0x8,%esp
 804a247:	5b                   	pop    %ebx
 804a248:	5e                   	pop    %esi
 804a249:	5f                   	pop    %edi
 804a24a:	c3                   	ret    

0804a24b <__divdi3>:
unsigned long long __umoddi3 (unsigned long long n, unsigned long long d);

/* Signed 64-bit division. */
long long
__divdi3 (long long n, long long d) 
{
 804a24b:	83 ec 04             	sub    $0x4,%esp
  return sdiv64 (n, d);
 804a24e:	ff 74 24 14          	pushl  0x14(%esp)
 804a252:	ff 74 24 14          	pushl  0x14(%esp)
 804a256:	8b 44 24 10          	mov    0x10(%esp),%eax
 804a25a:	8b 54 24 14          	mov    0x14(%esp),%edx
 804a25e:	e8 8f ff ff ff       	call   804a1f2 <sdiv64>
}
 804a263:	83 c4 0c             	add    $0xc,%esp
 804a266:	c3                   	ret    

0804a267 <__moddi3>:

/* Signed 64-bit remainder. */
long long
__moddi3 (long long n, long long d) 
{
 804a267:	57                   	push   %edi
 804a268:	56                   	push   %esi
 804a269:	53                   	push   %ebx
 804a26a:	8b 5c 24 10          	mov    0x10(%esp),%ebx
 804a26e:	8b 74 24 18          	mov    0x18(%esp),%esi
 804a272:	8b 7c 24 1c          	mov    0x1c(%esp),%edi
/* Divides signed 64-bit N by signed 64-bit D and returns the
   remainder. */
static int32_t
smod64 (int64_t n, int64_t d)
{
  return n - d * sdiv64 (n, d);
 804a276:	57                   	push   %edi
 804a277:	56                   	push   %esi
 804a278:	89 d8                	mov    %ebx,%eax
 804a27a:	8b 54 24 1c          	mov    0x1c(%esp),%edx
 804a27e:	e8 6f ff ff ff       	call   804a1f2 <sdiv64>
 804a283:	83 c4 08             	add    $0x8,%esp

/* Signed 64-bit remainder. */
long long
__moddi3 (long long n, long long d) 
{
  return smod64 (n, d);
 804a286:	0f af f0             	imul   %eax,%esi
 804a289:	89 d8                	mov    %ebx,%eax
 804a28b:	29 f0                	sub    %esi,%eax
 804a28d:	99                   	cltd   
}
 804a28e:	5b                   	pop    %ebx
 804a28f:	5e                   	pop    %esi
 804a290:	5f                   	pop    %edi
 804a291:	c3                   	ret    

0804a292 <__udivdi3>:

/* Unsigned 64-bit division. */
unsigned long long
__udivdi3 (unsigned long long n, unsigned long long d) 
{
 804a292:	83 ec 04             	sub    $0x4,%esp
  return udiv64 (n, d);
 804a295:	ff 74 24 14          	pushl  0x14(%esp)
 804a299:	ff 74 24 14          	pushl  0x14(%esp)
 804a29d:	8b 44 24 10          	mov    0x10(%esp),%eax
 804a2a1:	8b 54 24 14          	mov    0x14(%esp),%edx
 804a2a5:	e8 d6 fd ff ff       	call   804a080 <udiv64>
}
 804a2aa:	83 c4 0c             	add    $0xc,%esp
 804a2ad:	c3                   	ret    

0804a2ae <__umoddi3>:

/* Unsigned 64-bit remainder. */
unsigned long long
__umoddi3 (unsigned long long n, unsigned long long d) 
{
 804a2ae:	57                   	push   %edi
 804a2af:	56                   	push   %esi
 804a2b0:	53                   	push   %ebx
 804a2b1:	8b 5c 24 10          	mov    0x10(%esp),%ebx
 804a2b5:	8b 74 24 18          	mov    0x18(%esp),%esi
 804a2b9:	8b 7c 24 1c          	mov    0x1c(%esp),%edi
/* Divides unsigned 64-bit N by unsigned 64-bit D and returns the
   remainder. */
static uint32_t
umod64 (uint64_t n, uint64_t d)
{
  return n - d * udiv64 (n, d);
 804a2bd:	57                   	push   %edi
 804a2be:	56                   	push   %esi
 804a2bf:	89 d8                	mov    %ebx,%eax
 804a2c1:	8b 54 24 1c          	mov    0x1c(%esp),%edx
 804a2c5:	e8 b6 fd ff ff       	call   804a080 <udiv64>
 804a2ca:	83 c4 08             	add    $0x8,%esp

/* Unsigned 64-bit remainder. */
unsigned long long
__umoddi3 (unsigned long long n, unsigned long long d) 
{
  return umod64 (n, d);
 804a2cd:	0f af f0             	imul   %eax,%esi
 804a2d0:	89 d8                	mov    %ebx,%eax
 804a2d2:	29 f0                	sub    %esi,%eax
 804a2d4:	ba 00 00 00 00       	mov    $0x0,%edx
}
 804a2d9:	5b                   	pop    %ebx
 804a2da:	5e                   	pop    %esi
 804a2db:	5f                   	pop    %edi
 804a2dc:	c3                   	ret    

0804a2dd <debug_panic>:
/* Aborts the user program, printing the source file name, line
   number, and function name, plus a user-specific message. */
void
debug_panic (const char *file, int line, const char *function,
             const char *message, ...)
{
 804a2dd:	83 ec 0c             	sub    $0xc,%esp
  va_list args;

  printf ("User process ABORT at %s:%d in %s(): ", file, line, function);
 804a2e0:	ff 74 24 18          	pushl  0x18(%esp)
 804a2e4:	ff 74 24 18          	pushl  0x18(%esp)
 804a2e8:	ff 74 24 18          	pushl  0x18(%esp)
 804a2ec:	68 ac b2 04 08       	push   $0x804b2ac
 804a2f1:	e8 4e ec ff ff       	call   8048f44 <printf>

  va_start (args, message);
 804a2f6:	8d 44 24 30          	lea    0x30(%esp),%eax
  vprintf (message, args);
 804a2fa:	83 c4 08             	add    $0x8,%esp
 804a2fd:	50                   	push   %eax
 804a2fe:	ff 74 24 28          	pushl  0x28(%esp)
 804a302:	e8 82 02 00 00       	call   804a589 <vprintf>
  printf ("\n");
 804a307:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
 804a30e:	e8 dc 01 00 00       	call   804a4ef <putchar>
  va_end (args);

  debug_backtrace ();
 804a313:	e8 a3 02 00 00       	call   804a5bb <debug_backtrace>
  
  exit (1);
 804a318:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 804a31f:	e8 20 00 00 00       	call   804a344 <exit>

0804a324 <halt>:
          retval;                                               \
        })

void
halt (void) 
{
 804a324:	83 ec 0c             	sub    $0xc,%esp
  syscall0 (SYS_HALT);
 804a327:	6a 00                	push   $0x0
 804a329:	cd 30                	int    $0x30
 804a32b:	83 c4 04             	add    $0x4,%esp
  NOT_REACHED ();
 804a32e:	68 88 b2 04 08       	push   $0x804b288
 804a333:	68 20 ae 04 08       	push   $0x804ae20
 804a338:	6a 47                	push   $0x47
 804a33a:	68 b6 b0 04 08       	push   $0x804b0b6
 804a33f:	e8 99 ff ff ff       	call   804a2dd <debug_panic>

0804a344 <exit>:
}

void
exit (int status)
{
 804a344:	83 ec 0c             	sub    $0xc,%esp
  syscall1 (SYS_EXIT, status);
 804a347:	8b 44 24 10          	mov    0x10(%esp),%eax
 804a34b:	50                   	push   %eax
 804a34c:	6a 01                	push   $0x1
 804a34e:	cd 30                	int    $0x30
 804a350:	83 c4 08             	add    $0x8,%esp
  NOT_REACHED ();
 804a353:	68 88 b2 04 08       	push   $0x804b288
 804a358:	68 18 ae 04 08       	push   $0x804ae18
 804a35d:	6a 4e                	push   $0x4e
 804a35f:	68 b6 b0 04 08       	push   $0x804b0b6
 804a364:	e8 74 ff ff ff       	call   804a2dd <debug_panic>

0804a369 <exec>:
}

pid_t
exec (const char *file)
{
  return (pid_t) syscall1 (SYS_EXEC, file);
 804a369:	8b 44 24 04          	mov    0x4(%esp),%eax
 804a36d:	50                   	push   %eax
 804a36e:	6a 02                	push   $0x2
 804a370:	cd 30                	int    $0x30
 804a372:	83 c4 08             	add    $0x8,%esp
}
 804a375:	c3                   	ret    

0804a376 <wait>:

int
wait (pid_t pid)
{
  return syscall1 (SYS_WAIT, pid);
 804a376:	8b 44 24 04          	mov    0x4(%esp),%eax
 804a37a:	50                   	push   %eax
 804a37b:	6a 03                	push   $0x3
 804a37d:	cd 30                	int    $0x30
 804a37f:	83 c4 08             	add    $0x8,%esp
}
 804a382:	c3                   	ret    

0804a383 <create>:

bool
create (const char *file, unsigned initial_size)
{
  return syscall2 (SYS_CREATE, file, initial_size);
 804a383:	8b 44 24 08          	mov    0x8(%esp),%eax
 804a387:	8b 4c 24 04          	mov    0x4(%esp),%ecx
 804a38b:	50                   	push   %eax
 804a38c:	51                   	push   %ecx
 804a38d:	6a 04                	push   $0x4
 804a38f:	cd 30                	int    $0x30
 804a391:	83 c4 0c             	add    $0xc,%esp
 804a394:	85 c0                	test   %eax,%eax
 804a396:	0f 95 c0             	setne  %al
}
 804a399:	c3                   	ret    

0804a39a <remove>:

bool
remove (const char *file)
{
  return syscall1 (SYS_REMOVE, file);
 804a39a:	8b 44 24 04          	mov    0x4(%esp),%eax
 804a39e:	50                   	push   %eax
 804a39f:	6a 05                	push   $0x5
 804a3a1:	cd 30                	int    $0x30
 804a3a3:	83 c4 08             	add    $0x8,%esp
 804a3a6:	85 c0                	test   %eax,%eax
 804a3a8:	0f 95 c0             	setne  %al
}
 804a3ab:	c3                   	ret    

0804a3ac <open>:

int
open (const char *file)
{
  return syscall1 (SYS_OPEN, file);
 804a3ac:	8b 44 24 04          	mov    0x4(%esp),%eax
 804a3b0:	50                   	push   %eax
 804a3b1:	6a 06                	push   $0x6
 804a3b3:	cd 30                	int    $0x30
 804a3b5:	83 c4 08             	add    $0x8,%esp
}
 804a3b8:	c3                   	ret    

0804a3b9 <filesize>:

int
filesize (int fd) 
{
  return syscall1 (SYS_FILESIZE, fd);
 804a3b9:	8b 44 24 04          	mov    0x4(%esp),%eax
 804a3bd:	50                   	push   %eax
 804a3be:	6a 07                	push   $0x7
 804a3c0:	cd 30                	int    $0x30
 804a3c2:	83 c4 08             	add    $0x8,%esp
}
 804a3c5:	c3                   	ret    

0804a3c6 <read>:

int
read (int fd, void *buffer, unsigned size)
{
  return syscall3 (SYS_READ, fd, buffer, size);
 804a3c6:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a3ca:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a3ce:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a3d2:	50                   	push   %eax
 804a3d3:	51                   	push   %ecx
 804a3d4:	52                   	push   %edx
 804a3d5:	6a 08                	push   $0x8
 804a3d7:	cd 30                	int    $0x30
 804a3d9:	83 c4 10             	add    $0x10,%esp
}
 804a3dc:	c3                   	ret    

0804a3dd <write>:

int
write (int fd, const void *buffer, unsigned size)
{
  return syscall3 (SYS_WRITE, fd, buffer, size);
 804a3dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a3e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a3e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a3e9:	50                   	push   %eax
 804a3ea:	51                   	push   %ecx
 804a3eb:	52                   	push   %edx
 804a3ec:	6a 09                	push   $0x9
 804a3ee:	cd 30                	int    $0x30
 804a3f0:	83 c4 10             	add    $0x10,%esp
}
 804a3f3:	c3                   	ret    

0804a3f4 <seek>:

void
seek (int fd, unsigned position) 
{
  syscall2 (SYS_SEEK, fd, position);
 804a3f4:	8b 44 24 08          	mov    0x8(%esp),%eax
 804a3f8:	8b 4c 24 04          	mov    0x4(%esp),%ecx
 804a3fc:	50                   	push   %eax
 804a3fd:	51                   	push   %ecx
 804a3fe:	6a 0a                	push   $0xa
 804a400:	cd 30                	int    $0x30
 804a402:	83 c4 0c             	add    $0xc,%esp
 804a405:	c3                   	ret    

0804a406 <tell>:
}

unsigned
tell (int fd) 
{
  return syscall1 (SYS_TELL, fd);
 804a406:	8b 44 24 04          	mov    0x4(%esp),%eax
 804a40a:	50                   	push   %eax
 804a40b:	6a 0b                	push   $0xb
 804a40d:	cd 30                	int    $0x30
 804a40f:	83 c4 08             	add    $0x8,%esp
}
 804a412:	c3                   	ret    

0804a413 <close>:

void
close (int fd)
{
  syscall1 (SYS_CLOSE, fd);
 804a413:	8b 44 24 04          	mov    0x4(%esp),%eax
 804a417:	50                   	push   %eax
 804a418:	6a 0c                	push   $0xc
 804a41a:	cd 30                	int    $0x30
 804a41c:	83 c4 08             	add    $0x8,%esp
 804a41f:	c3                   	ret    

0804a420 <mmap>:
}

mapid_t
mmap (int fd, void *addr)
{
  return syscall2 (SYS_MMAP, fd, addr);
 804a420:	8b 44 24 08          	mov    0x8(%esp),%eax
 804a424:	8b 4c 24 04          	mov    0x4(%esp),%ecx
 804a428:	50                   	push   %eax
 804a429:	51                   	push   %ecx
 804a42a:	6a 0d                	push   $0xd
 804a42c:	cd 30                	int    $0x30
 804a42e:	83 c4 0c             	add    $0xc,%esp
}
 804a431:	c3                   	ret    

0804a432 <munmap>:

void
munmap (mapid_t mapid)
{
  syscall1 (SYS_MUNMAP, mapid);
 804a432:	8b 44 24 04          	mov    0x4(%esp),%eax
 804a436:	50                   	push   %eax
 804a437:	6a 0e                	push   $0xe
 804a439:	cd 30                	int    $0x30
 804a43b:	83 c4 08             	add    $0x8,%esp
 804a43e:	c3                   	ret    

0804a43f <chdir>:
}

bool
chdir (const char *dir)
{
  return syscall1 (SYS_CHDIR, dir);
 804a43f:	8b 44 24 04          	mov    0x4(%esp),%eax
 804a443:	50                   	push   %eax
 804a444:	6a 0f                	push   $0xf
 804a446:	cd 30                	int    $0x30
 804a448:	83 c4 08             	add    $0x8,%esp
 804a44b:	85 c0                	test   %eax,%eax
 804a44d:	0f 95 c0             	setne  %al
}
 804a450:	c3                   	ret    

0804a451 <mkdir>:

bool
mkdir (const char *dir)
{
  return syscall1 (SYS_MKDIR, dir);
 804a451:	8b 44 24 04          	mov    0x4(%esp),%eax
 804a455:	50                   	push   %eax
 804a456:	6a 10                	push   $0x10
 804a458:	cd 30                	int    $0x30
 804a45a:	83 c4 08             	add    $0x8,%esp
 804a45d:	85 c0                	test   %eax,%eax
 804a45f:	0f 95 c0             	setne  %al
}
 804a462:	c3                   	ret    

0804a463 <readdir>:

bool
readdir (int fd, char name[READDIR_MAX_LEN + 1]) 
{
  return syscall2 (SYS_READDIR, fd, name);
 804a463:	8b 44 24 08          	mov    0x8(%esp),%eax
 804a467:	8b 4c 24 04          	mov    0x4(%esp),%ecx
 804a46b:	50                   	push   %eax
 804a46c:	51                   	push   %ecx
 804a46d:	6a 11                	push   $0x11
 804a46f:	cd 30                	int    $0x30
 804a471:	83 c4 0c             	add    $0xc,%esp
 804a474:	85 c0                	test   %eax,%eax
 804a476:	0f 95 c0             	setne  %al
}
 804a479:	c3                   	ret    

0804a47a <isdir>:

bool
isdir (int fd) 
{
  return syscall1 (SYS_ISDIR, fd);
 804a47a:	8b 44 24 04          	mov    0x4(%esp),%eax
 804a47e:	50                   	push   %eax
 804a47f:	6a 12                	push   $0x12
 804a481:	cd 30                	int    $0x30
 804a483:	83 c4 08             	add    $0x8,%esp
 804a486:	85 c0                	test   %eax,%eax
 804a488:	0f 95 c0             	setne  %al
}
 804a48b:	c3                   	ret    

0804a48c <inumber>:

int
inumber (int fd) 
{
  return syscall1 (SYS_INUMBER, fd);
 804a48c:	8b 44 24 04          	mov    0x4(%esp),%eax
 804a490:	50                   	push   %eax
 804a491:	6a 13                	push   $0x13
 804a493:	cd 30                	int    $0x30
 804a495:	83 c4 08             	add    $0x8,%esp
}
 804a498:	c3                   	ret    

0804a499 <flush>:
}

/* Flushes the buffer in AUX. */
static void
flush (struct vhprintf_aux *aux)
{
 804a499:	53                   	push   %ebx
 804a49a:	83 ec 08             	sub    $0x8,%esp
 804a49d:	89 c3                	mov    %eax,%ebx
  if (aux->p > aux->buf)
 804a49f:	8b 40 40             	mov    0x40(%eax),%eax
 804a4a2:	39 d8                	cmp    %ebx,%eax
 804a4a4:	76 12                	jbe    804a4b8 <flush+0x1f>
    write (aux->handle, aux->buf, aux->p - aux->buf);
 804a4a6:	83 ec 04             	sub    $0x4,%esp
 804a4a9:	29 d8                	sub    %ebx,%eax
 804a4ab:	50                   	push   %eax
 804a4ac:	53                   	push   %ebx
 804a4ad:	ff 73 48             	pushl  0x48(%ebx)
 804a4b0:	e8 28 ff ff ff       	call   804a3dd <write>
 804a4b5:	83 c4 10             	add    $0x10,%esp
  aux->p = aux->buf;
 804a4b8:	89 5b 40             	mov    %ebx,0x40(%ebx)
}
 804a4bb:	83 c4 08             	add    $0x8,%esp
 804a4be:	5b                   	pop    %ebx
 804a4bf:	c3                   	ret    

0804a4c0 <add_char>:

/* Adds C to the buffer in AUX, flushing it if the buffer fills
   up. */
static void
add_char (char c, void *aux_) 
{
 804a4c0:	53                   	push   %ebx
 804a4c1:	83 ec 08             	sub    $0x8,%esp
 804a4c4:	8b 5c 24 14          	mov    0x14(%esp),%ebx
  struct vhprintf_aux *aux = aux_;
  *aux->p++ = c;
 804a4c8:	8b 43 40             	mov    0x40(%ebx),%eax
 804a4cb:	8d 50 01             	lea    0x1(%eax),%edx
 804a4ce:	89 53 40             	mov    %edx,0x40(%ebx)
 804a4d1:	8b 54 24 10          	mov    0x10(%esp),%edx
 804a4d5:	88 10                	mov    %dl,(%eax)
  if (aux->p >= aux->buf + sizeof aux->buf)
 804a4d7:	8d 43 40             	lea    0x40(%ebx),%eax
 804a4da:	39 43 40             	cmp    %eax,0x40(%ebx)
 804a4dd:	72 07                	jb     804a4e6 <add_char+0x26>
    flush (aux);
 804a4df:	89 d8                	mov    %ebx,%eax
 804a4e1:	e8 b3 ff ff ff       	call   804a499 <flush>
  aux->char_cnt++;
 804a4e6:	83 43 44 01          	addl   $0x1,0x44(%ebx)
}
 804a4ea:	83 c4 08             	add    $0x8,%esp
 804a4ed:	5b                   	pop    %ebx
 804a4ee:	c3                   	ret    

0804a4ef <putchar>:
}

/* Writes C to the console. */
int
putchar (int c) 
{
 804a4ef:	53                   	push   %ebx
 804a4f0:	83 ec 1c             	sub    $0x1c,%esp
 804a4f3:	8b 5c 24 24          	mov    0x24(%esp),%ebx
  char c2 = c;
 804a4f7:	88 5c 24 13          	mov    %bl,0x13(%esp)
  write (STDOUT_FILENO, &c2, 1);
 804a4fb:	6a 01                	push   $0x1
 804a4fd:	8d 44 24 17          	lea    0x17(%esp),%eax
 804a501:	50                   	push   %eax
 804a502:	6a 01                	push   $0x1
 804a504:	e8 d4 fe ff ff       	call   804a3dd <write>
  return c;
}
 804a509:	89 d8                	mov    %ebx,%eax
 804a50b:	83 c4 28             	add    $0x28,%esp
 804a50e:	5b                   	pop    %ebx
 804a50f:	c3                   	ret    

0804a510 <puts>:

/* Writes string S to the console, followed by a new-line
   character. */
int
puts (const char *s) 
{
 804a510:	57                   	push   %edi
 804a511:	83 ec 0c             	sub    $0xc,%esp
 804a514:	8b 54 24 14          	mov    0x14(%esp),%edx
  write (STDOUT_FILENO, s, strlen (s));
 804a518:	b8 00 00 00 00       	mov    $0x0,%eax
 804a51d:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
 804a522:	89 d7                	mov    %edx,%edi
 804a524:	f2 ae                	repnz scas %es:(%edi),%al
 804a526:	f7 d1                	not    %ecx
 804a528:	83 e9 01             	sub    $0x1,%ecx
 804a52b:	51                   	push   %ecx
 804a52c:	52                   	push   %edx
 804a52d:	6a 01                	push   $0x1
 804a52f:	e8 a9 fe ff ff       	call   804a3dd <write>
  putchar ('\n');
 804a534:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
 804a53b:	e8 af ff ff ff       	call   804a4ef <putchar>

  return 0;
}
 804a540:	b8 00 00 00 00       	mov    $0x0,%eax
 804a545:	83 c4 18             	add    $0x18,%esp
 804a548:	5f                   	pop    %edi
 804a549:	c3                   	ret    

0804a54a <vhprintf>:
/* Formats the printf() format specification FORMAT with
   arguments given in ARGS and writes the output to the given
   HANDLE. */
int
vhprintf (int handle, const char *format, va_list args) 
{
 804a54a:	53                   	push   %ebx
 804a54b:	83 ec 58             	sub    $0x58,%esp
  struct vhprintf_aux aux;
  aux.p = aux.buf;
 804a54e:	8d 5c 24 04          	lea    0x4(%esp),%ebx
 804a552:	89 5c 24 44          	mov    %ebx,0x44(%esp)
  aux.char_cnt = 0;
 804a556:	c7 44 24 48 00 00 00 	movl   $0x0,0x48(%esp)
 804a55d:	00 
  aux.handle = handle;
 804a55e:	8b 44 24 60          	mov    0x60(%esp),%eax
 804a562:	89 44 24 4c          	mov    %eax,0x4c(%esp)
  __vprintf (format, args, add_char, &aux);
 804a566:	53                   	push   %ebx
 804a567:	68 c0 a4 04 08       	push   $0x804a4c0
 804a56c:	ff 74 24 70          	pushl  0x70(%esp)
 804a570:	ff 74 24 70          	pushl  0x70(%esp)
 804a574:	e8 00 ea ff ff       	call   8048f79 <__vprintf>
  flush (&aux);
 804a579:	89 d8                	mov    %ebx,%eax
 804a57b:	e8 19 ff ff ff       	call   804a499 <flush>
  return aux.char_cnt;
}
 804a580:	8b 44 24 58          	mov    0x58(%esp),%eax
 804a584:	83 c4 68             	add    $0x68,%esp
 804a587:	5b                   	pop    %ebx
 804a588:	c3                   	ret    

0804a589 <vprintf>:

/* The standard vprintf() function,
   which is like printf() but uses a va_list. */
int
vprintf (const char *format, va_list args) 
{
 804a589:	83 ec 10             	sub    $0x10,%esp
  return vhprintf (STDOUT_FILENO, format, args);
 804a58c:	ff 74 24 18          	pushl  0x18(%esp)
 804a590:	ff 74 24 18          	pushl  0x18(%esp)
 804a594:	6a 01                	push   $0x1
 804a596:	e8 af ff ff ff       	call   804a54a <vhprintf>
}
 804a59b:	83 c4 1c             	add    $0x1c,%esp
 804a59e:	c3                   	ret    

0804a59f <hprintf>:

/* Like printf(), but writes output to the given HANDLE. */
int
hprintf (int handle, const char *format, ...) 
{
 804a59f:	83 ec 0c             	sub    $0xc,%esp
  va_list args;
  int retval;

  va_start (args, format);
 804a5a2:	8d 44 24 18          	lea    0x18(%esp),%eax
  retval = vhprintf (handle, format, args);
 804a5a6:	83 ec 04             	sub    $0x4,%esp
 804a5a9:	50                   	push   %eax
 804a5aa:	ff 74 24 1c          	pushl  0x1c(%esp)
 804a5ae:	ff 74 24 1c          	pushl  0x1c(%esp)
 804a5b2:	e8 93 ff ff ff       	call   804a54a <vhprintf>
  va_end (args);

  return retval;
}
 804a5b7:	83 c4 1c             	add    $0x1c,%esp
 804a5ba:	c3                   	ret    

0804a5bb <debug_backtrace>:
   each of the functions we are nested within.  gdb or addr2line
   may be applied to kernel.o to translate these into file names,
   line numbers, and function names.  */
void
debug_backtrace (void) 
{
 804a5bb:	55                   	push   %ebp
 804a5bc:	89 e5                	mov    %esp,%ebp
 804a5be:	53                   	push   %ebx
 804a5bf:	83 ec 0c             	sub    $0xc,%esp
  static bool explained;
  void **frame;
  
  printf ("Call stack: %p", __builtin_return_address (0));
 804a5c2:	ff 75 04             	pushl  0x4(%ebp)
 804a5c5:	68 cf b0 04 08       	push   $0x804b0cf
 804a5ca:	e8 75 e9 ff ff       	call   8048f44 <printf>
  for (frame = __builtin_frame_address (1);
 804a5cf:	8b 5d 00             	mov    0x0(%ebp),%ebx
 804a5d2:	83 c4 10             	add    $0x10,%esp
 804a5d5:	81 fb ff 0f 00 00    	cmp    $0xfff,%ebx
 804a5db:	76 27                	jbe    804a604 <debug_backtrace+0x49>
       (uintptr_t) frame >= 0x1000 && frame[0] != NULL;
 804a5dd:	83 3b 00             	cmpl   $0x0,(%ebx)
 804a5e0:	74 22                	je     804a604 <debug_backtrace+0x49>
       frame = frame[0]) 
    printf (" %p", frame[1]);
 804a5e2:	83 ec 08             	sub    $0x8,%esp
 804a5e5:	ff 73 04             	pushl  0x4(%ebx)
 804a5e8:	68 da b0 04 08       	push   $0x804b0da
 804a5ed:	e8 52 e9 ff ff       	call   8048f44 <printf>
  void **frame;
  
  printf ("Call stack: %p", __builtin_return_address (0));
  for (frame = __builtin_frame_address (1);
       (uintptr_t) frame >= 0x1000 && frame[0] != NULL;
       frame = frame[0]) 
 804a5f2:	8b 1b                	mov    (%ebx),%ebx
{
  static bool explained;
  void **frame;
  
  printf ("Call stack: %p", __builtin_return_address (0));
  for (frame = __builtin_frame_address (1);
 804a5f4:	83 c4 10             	add    $0x10,%esp
 804a5f7:	81 fb ff 0f 00 00    	cmp    $0xfff,%ebx
 804a5fd:	76 05                	jbe    804a604 <debug_backtrace+0x49>
       (uintptr_t) frame >= 0x1000 && frame[0] != NULL;
 804a5ff:	83 3b 00             	cmpl   $0x0,(%ebx)
 804a602:	75 de                	jne    804a5e2 <debug_backtrace+0x27>
       frame = frame[0]) 
    printf (" %p", frame[1]);
  printf (".\n");
 804a604:	83 ec 0c             	sub    $0xc,%esp
 804a607:	68 e0 af 04 08       	push   $0x804afe0
 804a60c:	e8 ff fe ff ff       	call   804a510 <puts>

  if (!explained) 
 804a611:	83 c4 10             	add    $0x10,%esp
 804a614:	80 3d e0 c8 04 08 00 	cmpb   $0x0,0x804c8e0
 804a61b:	75 17                	jne    804a634 <debug_backtrace+0x79>
    {
      explained = true;
 804a61d:	c6 05 e0 c8 04 08 01 	movb   $0x1,0x804c8e0
      printf ("The `backtrace' program can make call stacks useful.\n"
 804a624:	83 ec 0c             	sub    $0xc,%esp
 804a627:	68 d4 b2 04 08       	push   $0x804b2d4
 804a62c:	e8 df fe ff ff       	call   804a510 <puts>
 804a631:	83 c4 10             	add    $0x10,%esp
              "Read \"Backtraces\" in the \"Debugging Tools\" chapter\n"
              "of the Pintos documentation for more information.\n");
    }
}
 804a634:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 804a637:	c9                   	leave  
 804a638:	c3                   	ret    
