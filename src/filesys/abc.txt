
build/tests/filesys/extended/grow-tell:     file format elf32-i386

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002385  08048094  08048094  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000007e9  0804a41c  0804a41c  0000241c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .rodata.str1.4 000002a4  0804ac08  0804ac08  00002c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rodata.str1.1 000002a8  0804aeac  0804aeac  00002eac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000018  0804c154  0804c154  00003154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000da8  0804c180  0804c180  0000316c  2**5
                  ALLOC
  6 .comment      00000034  00000000  00000000  0000316c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000001a0  00000000  00000000  000031a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000031c9  00000000  00000000  00003340  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000010f2  00000000  00000000  00006509  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000d01  00000000  00000000  000075fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000093a  00000000  00000000  000082fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002121  00000000  00000000  00008c36  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000f8  00000000  00000000  0000ad57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08048094 <return_block_size>:

static size_t
return_block_size (void) 
{
  return 37;
}
 8048094:	b8 25 00 00 00       	mov    $0x25,%eax
 8048099:	c3                   	ret    

0804809a <check_tell>:

static void
check_tell (int fd, long ofs) 
{
 804809a:	83 ec 18             	sub    $0x18,%esp
  long pos = tell (fd);
 804809d:	ff 74 24 1c          	pushl  0x1c(%esp)
 80480a1:	e8 4b 21 00 00       	call   804a1f1 <tell>
//  msg ("pos:%d, ofs: %d\n", pos, ofs);
  if (pos != ofs)
 80480a6:	83 c4 10             	add    $0x10,%esp
 80480a9:	3b 44 24 14          	cmp    0x14(%esp),%eax
 80480ad:	74 12                	je     80480c1 <check_tell+0x27>
    fail ("file position not updated properly: should be %ld, actually %ld",
 80480af:	83 ec 04             	sub    $0x4,%esp
 80480b2:	50                   	push   %eax
 80480b3:	ff 74 24 1c          	pushl  0x1c(%esp)
 80480b7:	68 08 ac 04 08       	push   $0x804ac08
 80480bc:	e8 fc 00 00 00       	call   80481bd <fail>
          ofs, pos);
}
 80480c1:	83 c4 0c             	add    $0xc,%esp
 80480c4:	c3                   	ret    

080480c5 <test_main>:

void
test_main (void) 
{
 80480c5:	83 ec 14             	sub    $0x14,%esp
  seq_test ("foobar",
 80480c8:	68 9a 80 04 08       	push   $0x804809a
 80480cd:	68 94 80 04 08       	push   $0x8048094
 80480d2:	6a 00                	push   $0x0
 80480d4:	68 56 08 00 00       	push   $0x856
 80480d9:	68 80 c1 04 08       	push   $0x804c180
 80480de:	68 ac ae 04 08       	push   $0x804aeac
 80480e3:	e8 a9 05 00 00       	call   8048691 <seq_test>
            buf, sizeof buf, 0,
            return_block_size, check_tell);
}
 80480e8:	83 c4 2c             	add    $0x2c,%esp
 80480eb:	c3                   	ret    

080480ec <vmsg>:
const char *test_name;
bool quiet = false;

static void
vmsg (const char *format, va_list args, const char *suffix) 
{
 80480ec:	55                   	push   %ebp
 80480ed:	57                   	push   %edi
 80480ee:	56                   	push   %esi
 80480ef:	53                   	push   %ebx
 80480f0:	83 ec 1c             	sub    $0x1c,%esp
 80480f3:	89 44 24 08          	mov    %eax,0x8(%esp)
 80480f7:	89 d5                	mov    %edx,%ebp
 80480f9:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
     that'll (typically) ensure that it gets sent to the console
     atomically.  Otherwise kernel messages like "foo: exit(0)"
     can end up being interleaved if we're unlucky. */
  static char buf[1024];

  snprintf (buf, sizeof buf, "(%s) ", test_name);
 80480fd:	ff 35 24 cf 04 08    	pushl  0x804cf24
 8048103:	68 b3 ae 04 08       	push   $0x804aeb3
 8048108:	68 00 04 00 00       	push   $0x400
 804810d:	68 00 ca 04 08       	push   $0x804ca00
 8048112:	e8 35 13 00 00       	call   804944c <snprintf>
  vsnprintf (buf + strlen (buf), sizeof buf - strlen (buf), format, args);
 8048117:	be ff ff ff ff       	mov    $0xffffffff,%esi
 804811c:	bf 00 ca 04 08       	mov    $0x804ca00,%edi
 8048121:	bb 00 00 00 00       	mov    $0x0,%ebx
 8048126:	89 f1                	mov    %esi,%ecx
 8048128:	89 d8                	mov    %ebx,%eax
 804812a:	f2 ae                	repnz scas %es:(%edi),%al
 804812c:	f7 d1                	not    %ecx
 804812e:	83 e9 01             	sub    $0x1,%ecx
 8048131:	55                   	push   %ebp
 8048132:	ff 74 24 1c          	pushl  0x1c(%esp)
 8048136:	bd 00 04 00 00       	mov    $0x400,%ebp
 804813b:	89 e8                	mov    %ebp,%eax
 804813d:	29 c8                	sub    %ecx,%eax
 804813f:	50                   	push   %eax
 8048140:	81 c1 00 ca 04 08    	add    $0x804ca00,%ecx
 8048146:	51                   	push   %ecx
 8048147:	e8 93 12 00 00       	call   80493df <vsnprintf>
  strlcpy (buf + strlen (buf), suffix, sizeof buf - strlen (buf));
 804814c:	bf 00 ca 04 08       	mov    $0x804ca00,%edi
 8048151:	89 f1                	mov    %esi,%ecx
 8048153:	89 d8                	mov    %ebx,%eax
 8048155:	f2 ae                	repnz scas %es:(%edi),%al
 8048157:	f7 d1                	not    %ecx
 8048159:	83 e9 01             	sub    $0x1,%ecx
 804815c:	83 c4 1c             	add    $0x1c,%esp
 804815f:	29 cd                	sub    %ecx,%ebp
 8048161:	55                   	push   %ebp
 8048162:	ff 74 24 14          	pushl  0x14(%esp)
 8048166:	81 c1 00 ca 04 08    	add    $0x804ca00,%ecx
 804816c:	51                   	push   %ecx
 804816d:	e8 b4 1b 00 00       	call   8049d26 <strlcpy>
  write (STDOUT_FILENO, buf, strlen (buf));
 8048172:	bf 00 ca 04 08       	mov    $0x804ca00,%edi
 8048177:	89 f1                	mov    %esi,%ecx
 8048179:	89 d8                	mov    %ebx,%eax
 804817b:	f2 ae                	repnz scas %es:(%edi),%al
 804817d:	f7 d1                	not    %ecx
 804817f:	83 e9 01             	sub    $0x1,%ecx
 8048182:	83 c4 0c             	add    $0xc,%esp
 8048185:	51                   	push   %ecx
 8048186:	68 00 ca 04 08       	push   $0x804ca00
 804818b:	6a 01                	push   $0x1
 804818d:	e8 3b 20 00 00       	call   804a1cd <write>
}
 8048192:	83 c4 2c             	add    $0x2c,%esp
 8048195:	5b                   	pop    %ebx
 8048196:	5e                   	pop    %esi
 8048197:	5f                   	pop    %edi
 8048198:	5d                   	pop    %ebp
 8048199:	c3                   	ret    

0804819a <msg>:
void
msg (const char *format, ...) 
{
  va_list args;

  if (quiet)
 804819a:	80 3d e0 c9 04 08 00 	cmpb   $0x0,0x804c9e0
 80481a1:	75 18                	jne    80481bb <msg+0x21>
  write (STDOUT_FILENO, buf, strlen (buf));
}

void
msg (const char *format, ...) 
{
 80481a3:	83 ec 0c             	sub    $0xc,%esp
  va_list args;

  if (quiet)
    return;
  va_start (args, format);
  vmsg (format, args, "\n");
 80481a6:	b9 c1 ae 04 08       	mov    $0x804aec1,%ecx
 80481ab:	8d 54 24 14          	lea    0x14(%esp),%edx
 80481af:	8b 44 24 10          	mov    0x10(%esp),%eax
 80481b3:	e8 34 ff ff ff       	call   80480ec <vmsg>
  va_end (args);
}
 80481b8:	83 c4 0c             	add    $0xc,%esp
 80481bb:	f3 c3                	repz ret 

080481bd <fail>:

void
fail (const char *format, ...) 
{
 80481bd:	83 ec 0c             	sub    $0xc,%esp
  va_list args;

  va_start (args, format);
  vmsg (format, args, ": FAILED\n");
 80481c0:	b9 b9 ae 04 08       	mov    $0x804aeb9,%ecx
 80481c5:	8d 54 24 14          	lea    0x14(%esp),%edx
 80481c9:	8b 44 24 10          	mov    0x10(%esp),%eax
 80481cd:	e8 1a ff ff ff       	call   80480ec <vmsg>
  va_end (args);

  exit (1);
 80481d2:	83 ec 0c             	sub    $0xc,%esp
 80481d5:	6a 01                	push   $0x1
 80481d7:	e8 63 1f 00 00       	call   804a13f <exit>

080481dc <shuffle>:
    }
}

void
shuffle (void *buf_, size_t cnt, size_t size) 
{
 80481dc:	55                   	push   %ebp
 80481dd:	57                   	push   %edi
 80481de:	56                   	push   %esi
 80481df:	53                   	push   %ebx
 80481e0:	83 ec 1c             	sub    $0x1c,%esp
 80481e3:	8b 44 24 34          	mov    0x34(%esp),%eax
  char *buf = buf_;
  size_t i;

  for (i = 0; i < cnt; i++)
 80481e7:	85 c0                	test   %eax,%eax
 80481e9:	74 71                	je     804825c <shuffle+0x80>
 80481eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80481ef:	be 00 00 00 00       	mov    $0x0,%esi
 80481f4:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 80481fb:	00 
    {
      size_t j = i + random_ulong () % (cnt - i);
 80481fc:	e8 52 07 00 00       	call   8048953 <random_ulong>
      swap (buf + i * size, buf + j * size, size);
 8048201:	ba 00 00 00 00       	mov    $0x0,%edx
 8048206:	f7 74 24 0c          	divl   0xc(%esp)
 804820a:	03 54 24 08          	add    0x8(%esp),%edx
 804820e:	0f af 54 24 38       	imul   0x38(%esp),%edx
 8048213:	89 f5                	mov    %esi,%ebp
{
  uint8_t *a = a_;
  uint8_t *b = b_;
  size_t i;

  for (i = 0; i < size; i++) 
 8048215:	83 7c 24 38 00       	cmpl   $0x0,0x38(%esp)
 804821a:	74 30                	je     804824c <shuffle+0x70>
 804821c:	89 f1                	mov    %esi,%ecx
 804821e:	03 4c 24 30          	add    0x30(%esp),%ecx
 8048222:	89 f7                	mov    %esi,%edi
 8048224:	03 7c 24 38          	add    0x38(%esp),%edi
 8048228:	03 7c 24 30          	add    0x30(%esp),%edi
    {
      uint8_t t = a[i];
 804822c:	0f b6 19             	movzbl (%ecx),%ebx
 804822f:	88 5c 24 07          	mov    %bl,0x7(%esp)
 8048233:	89 c8                	mov    %ecx,%eax
 8048235:	29 e8                	sub    %ebp,%eax
      a[i] = b[i];
 8048237:	0f b6 1c 10          	movzbl (%eax,%edx,1),%ebx
 804823b:	88 19                	mov    %bl,(%ecx)
      b[i] = t;
 804823d:	0f b6 5c 24 07       	movzbl 0x7(%esp),%ebx
 8048242:	88 1c 10             	mov    %bl,(%eax,%edx,1)
 8048245:	83 c1 01             	add    $0x1,%ecx
{
  uint8_t *a = a_;
  uint8_t *b = b_;
  size_t i;

  for (i = 0; i < size; i++) 
 8048248:	39 f9                	cmp    %edi,%ecx
 804824a:	75 e0                	jne    804822c <shuffle+0x50>
shuffle (void *buf_, size_t cnt, size_t size) 
{
  char *buf = buf_;
  size_t i;

  for (i = 0; i < cnt; i++)
 804824c:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
 8048251:	03 74 24 38          	add    0x38(%esp),%esi
 8048255:	83 6c 24 0c 01       	subl   $0x1,0xc(%esp)
 804825a:	75 a0                	jne    80481fc <shuffle+0x20>
    {
      size_t j = i + random_ulong () % (cnt - i);
      swap (buf + i * size, buf + j * size, size);
    }
}
 804825c:	83 c4 1c             	add    $0x1c,%esp
 804825f:	5b                   	pop    %ebx
 8048260:	5e                   	pop    %esi
 8048261:	5f                   	pop    %edi
 8048262:	5d                   	pop    %ebp
 8048263:	c3                   	ret    

08048264 <exec_children>:

void
exec_children (const char *child_name, pid_t pids[], size_t child_cnt) 
{
 8048264:	55                   	push   %ebp
 8048265:	57                   	push   %edi
 8048266:	56                   	push   %esi
 8048267:	53                   	push   %ebx
 8048268:	81 ec 8c 00 00 00    	sub    $0x8c,%esp
 804826e:	8b ac 24 a4 00 00 00 	mov    0xa4(%esp),%ebp
 8048275:	8b bc 24 a8 00 00 00 	mov    0xa8(%esp),%edi
  size_t i;

  for (i = 0; i < child_cnt; i++) 
 804827c:	85 ff                	test   %edi,%edi
 804827e:	74 5a                	je     80482da <exec_children+0x76>
 8048280:	bb 00 00 00 00       	mov    $0x0,%ebx
    {
      char cmd_line[128];
      snprintf (cmd_line, sizeof cmd_line, "%s %zu", child_name, i);
 8048285:	89 e6                	mov    %esp,%esi
 8048287:	83 ec 0c             	sub    $0xc,%esp
 804828a:	53                   	push   %ebx
 804828b:	ff b4 24 b0 00 00 00 	pushl  0xb0(%esp)
 8048292:	68 c3 ae 04 08       	push   $0x804aec3
 8048297:	68 80 00 00 00       	push   $0x80
 804829c:	56                   	push   %esi
 804829d:	e8 aa 11 00 00       	call   804944c <snprintf>
      CHECK ((pids[i] = exec (cmd_line)) != PID_ERROR,
 80482a2:	83 c3 01             	add    $0x1,%ebx
 80482a5:	83 c4 20             	add    $0x20,%esp
 80482a8:	56                   	push   %esi
 80482a9:	57                   	push   %edi
 80482aa:	53                   	push   %ebx
 80482ab:	68 ca ae 04 08       	push   $0x804aeca
 80482b0:	e8 e5 fe ff ff       	call   804819a <msg>
 80482b5:	89 34 24             	mov    %esi,(%esp)
 80482b8:	e8 a6 1e 00 00       	call   804a163 <exec>
 80482bd:	89 44 9d fc          	mov    %eax,-0x4(%ebp,%ebx,4)
 80482c1:	83 c4 10             	add    $0x10,%esp
 80482c4:	83 f8 ff             	cmp    $0xffffffff,%eax
 80482c7:	75 0d                	jne    80482d6 <exec_children+0x72>
 80482c9:	54                   	push   %esp
 80482ca:	57                   	push   %edi
 80482cb:	53                   	push   %ebx
 80482cc:	68 ca ae 04 08       	push   $0x804aeca
 80482d1:	e8 e7 fe ff ff       	call   80481bd <fail>
void
exec_children (const char *child_name, pid_t pids[], size_t child_cnt) 
{
  size_t i;

  for (i = 0; i < child_cnt; i++) 
 80482d6:	39 df                	cmp    %ebx,%edi
 80482d8:	75 ad                	jne    8048287 <exec_children+0x23>
      char cmd_line[128];
      snprintf (cmd_line, sizeof cmd_line, "%s %zu", child_name, i);
      CHECK ((pids[i] = exec (cmd_line)) != PID_ERROR,
             "exec child %zu of %zu: \"%s\"", i + 1, child_cnt, cmd_line);
    }
}
 80482da:	81 c4 8c 00 00 00    	add    $0x8c,%esp
 80482e0:	5b                   	pop    %ebx
 80482e1:	5e                   	pop    %esi
 80482e2:	5f                   	pop    %edi
 80482e3:	5d                   	pop    %ebp
 80482e4:	c3                   	ret    

080482e5 <wait_children>:

void
wait_children (pid_t pids[], size_t child_cnt) 
{
 80482e5:	55                   	push   %ebp
 80482e6:	57                   	push   %edi
 80482e7:	56                   	push   %esi
 80482e8:	53                   	push   %ebx
 80482e9:	83 ec 0c             	sub    $0xc,%esp
 80482ec:	8b 6c 24 24          	mov    0x24(%esp),%ebp
  size_t i;
  
  for (i = 0; i < child_cnt; i++) 
 80482f0:	85 ed                	test   %ebp,%ebp
 80482f2:	74 47                	je     804833b <wait_children+0x56>
 80482f4:	bb 00 00 00 00       	mov    $0x0,%ebx
    {
      int status = wait (pids[i]);
 80482f9:	83 ec 0c             	sub    $0xc,%esp
 80482fc:	8b 44 24 2c          	mov    0x2c(%esp),%eax
 8048300:	ff 34 98             	pushl  (%eax,%ebx,4)
 8048303:	e8 67 1e 00 00       	call   804a16f <wait>
 8048308:	89 c7                	mov    %eax,%edi
      CHECK (status == (int) i,
 804830a:	8d 73 01             	lea    0x1(%ebx),%esi
 804830d:	89 1c 24             	mov    %ebx,(%esp)
 8048310:	50                   	push   %eax
 8048311:	55                   	push   %ebp
 8048312:	56                   	push   %esi
 8048313:	68 48 ac 04 08       	push   $0x804ac48
 8048318:	e8 7d fe ff ff       	call   804819a <msg>
 804831d:	83 c4 20             	add    $0x20,%esp
 8048320:	39 df                	cmp    %ebx,%edi
 8048322:	74 11                	je     8048335 <wait_children+0x50>
 8048324:	83 ec 0c             	sub    $0xc,%esp
 8048327:	53                   	push   %ebx
 8048328:	57                   	push   %edi
 8048329:	55                   	push   %ebp
 804832a:	56                   	push   %esi
 804832b:	68 48 ac 04 08       	push   $0x804ac48
 8048330:	e8 88 fe ff ff       	call   80481bd <fail>
 8048335:	89 f3                	mov    %esi,%ebx
void
wait_children (pid_t pids[], size_t child_cnt) 
{
  size_t i;
  
  for (i = 0; i < child_cnt; i++) 
 8048337:	39 f5                	cmp    %esi,%ebp
 8048339:	75 be                	jne    80482f9 <wait_children+0x14>
      int status = wait (pids[i]);
      CHECK (status == (int) i,
             "wait for child %zu of %zu returned %d (expected %zu)",
             i + 1, child_cnt, status, i);
    }
}
 804833b:	83 c4 0c             	add    $0xc,%esp
 804833e:	5b                   	pop    %ebx
 804833f:	5e                   	pop    %esi
 8048340:	5f                   	pop    %edi
 8048341:	5d                   	pop    %ebp
 8048342:	c3                   	ret    

08048343 <compare_bytes>:
}

void
compare_bytes (const void *read_data_, const void *expected_data_, size_t size,
               size_t ofs, const char *file_name) 
{
 8048343:	55                   	push   %ebp
 8048344:	57                   	push   %edi
 8048345:	56                   	push   %esi
 8048346:	53                   	push   %ebx
 8048347:	83 ec 20             	sub    $0x20,%esp
 804834a:	8b 5c 24 34          	mov    0x34(%esp),%ebx
 804834e:	8b 74 24 38          	mov    0x38(%esp),%esi
 8048352:	8b 7c 24 3c          	mov    0x3c(%esp),%edi
  const uint8_t *read_data = read_data_;
  const uint8_t *expected_data = expected_data_;
  size_t i, j;
  size_t show_cnt;

  if (!memcmp (read_data, expected_data, size))
 8048356:	57                   	push   %edi
 8048357:	56                   	push   %esi
 8048358:	53                   	push   %ebx
 8048359:	e8 a3 14 00 00       	call   8049801 <memcmp>
 804835e:	83 c4 10             	add    $0x10,%esp
 8048361:	85 c0                	test   %eax,%eax
 8048363:	0f 84 bf 01 00 00    	je     8048528 <compare_bytes+0x1e5>
    return;
  
  for (i = 0; i < size; i++)
 8048369:	85 ff                	test   %edi,%edi
 804836b:	0f 84 7e 01 00 00    	je     80484ef <compare_bytes+0x1ac>
    if (read_data[i] != expected_data[i])
 8048371:	0f b6 06             	movzbl (%esi),%eax
 8048374:	38 03                	cmp    %al,(%ebx)
 8048376:	0f 85 18 01 00 00    	jne    8048494 <compare_bytes+0x151>
 804837c:	ba 00 00 00 00       	mov    $0x0,%edx
 8048381:	eb 0d                	jmp    8048390 <compare_bytes+0x4d>
 8048383:	0f b6 44 16 01       	movzbl 0x1(%esi,%edx,1),%eax
 8048388:	38 44 13 01          	cmp    %al,0x1(%ebx,%edx,1)
 804838c:	75 0b                	jne    8048399 <compare_bytes+0x56>
  size_t show_cnt;

  if (!memcmp (read_data, expected_data, size))
    return;
  
  for (i = 0; i < size; i++)
 804838e:	89 ea                	mov    %ebp,%edx
 8048390:	8d 6a 01             	lea    0x1(%edx),%ebp
 8048393:	39 ef                	cmp    %ebp,%edi
 8048395:	75 ec                	jne    8048383 <compare_bytes+0x40>
 8048397:	89 fd                	mov    %edi,%ebp
    if (read_data[i] != expected_data[i])
      break;
  for (j = i + 1; j < size; j++)
 8048399:	8d 42 02             	lea    0x2(%edx),%eax
 804839c:	39 c7                	cmp    %eax,%edi
 804839e:	76 1d                	jbe    80483bd <compare_bytes+0x7a>
    if (read_data[j] == expected_data[j])
 80483a0:	0f b6 4c 16 02       	movzbl 0x2(%esi,%edx,1),%ecx
 80483a5:	38 4c 13 02          	cmp    %cl,0x2(%ebx,%edx,1)
 80483a9:	75 0b                	jne    80483b6 <compare_bytes+0x73>
 80483ab:	eb 10                	jmp    80483bd <compare_bytes+0x7a>
 80483ad:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
 80483b1:	38 0c 03             	cmp    %cl,(%ebx,%eax,1)
 80483b4:	74 07                	je     80483bd <compare_bytes+0x7a>
    return;
  
  for (i = 0; i < size; i++)
    if (read_data[i] != expected_data[i])
      break;
  for (j = i + 1; j < size; j++)
 80483b6:	83 c0 01             	add    $0x1,%eax
 80483b9:	39 c7                	cmp    %eax,%edi
 80483bb:	77 f0                	ja     80483ad <compare_bytes+0x6a>
    if (read_data[j] == expected_data[j])
      break;

  quiet = false;
 80483bd:	c6 05 e0 c9 04 08 00 	movb   $0x0,0x804c9e0
  msg ("%zu bytes read starting at offset %zu in \"%s\" differ "
 80483c4:	89 ef                	mov    %ebp,%edi
 80483c6:	03 7c 24 3c          	add    0x3c(%esp),%edi
 80483ca:	29 e8                	sub    %ebp,%eax
 80483cc:	ff 74 24 40          	pushl  0x40(%esp)
 80483d0:	57                   	push   %edi
 80483d1:	89 44 24 14          	mov    %eax,0x14(%esp)
 80483d5:	50                   	push   %eax
 80483d6:	68 80 ac 04 08       	push   $0x804ac80
 80483db:	e8 ba fd ff ff       	call   804819a <msg>
       "from expected.", j - i, ofs + i, file_name);
  show_cnt = j - i;
  if (j - i > 64) 
 80483e0:	83 c4 10             	add    $0x10,%esp
  for (j = i + 1; j < size; j++)
    if (read_data[j] == expected_data[j])
      break;

  quiet = false;
  msg ("%zu bytes read starting at offset %zu in \"%s\" differ "
 80483e3:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80483e7:	89 44 24 08          	mov    %eax,0x8(%esp)
       "from expected.", j - i, ofs + i, file_name);
  show_cnt = j - i;
  if (j - i > 64) 
 80483eb:	83 f8 40             	cmp    $0x40,%eax
 80483ee:	76 1a                	jbe    804840a <compare_bytes+0xc7>
    {
      show_cnt = 64;
      msg ("Showing first differing %zu bytes.", show_cnt);
 80483f0:	83 ec 08             	sub    $0x8,%esp
 80483f3:	6a 40                	push   $0x40
 80483f5:	68 c4 ac 04 08       	push   $0x804acc4
 80483fa:	e8 9b fd ff ff       	call   804819a <msg>
 80483ff:	83 c4 10             	add    $0x10,%esp
  msg ("%zu bytes read starting at offset %zu in \"%s\" differ "
       "from expected.", j - i, ofs + i, file_name);
  show_cnt = j - i;
  if (j - i > 64) 
    {
      show_cnt = 64;
 8048402:	c7 44 24 08 40 00 00 	movl   $0x40,0x8(%esp)
 8048409:	00 
      msg ("Showing first differing %zu bytes.", show_cnt);
    }
  msg ("Data actually read:");
 804840a:	83 ec 0c             	sub    $0xc,%esp
 804840d:	68 e6 ae 04 08       	push   $0x804aee6
 8048412:	e8 83 fd ff ff       	call   804819a <msg>
  hex_dump (ofs + i, read_data + i, show_cnt, true);
 8048417:	6a 01                	push   $0x1
 8048419:	ff 74 24 1c          	pushl  0x1c(%esp)
 804841d:	01 eb                	add    %ebp,%ebx
 804841f:	53                   	push   %ebx
 8048420:	57                   	push   %edi
 8048421:	e8 43 10 00 00       	call   8049469 <hex_dump>
  msg ("Expected data:");
 8048426:	83 c4 14             	add    $0x14,%esp
 8048429:	68 fa ae 04 08       	push   $0x804aefa
 804842e:	e8 67 fd ff ff       	call   804819a <msg>
  hex_dump (ofs + i, expected_data + i, show_cnt, true);
 8048433:	6a 01                	push   $0x1
 8048435:	ff 74 24 1c          	pushl  0x1c(%esp)
 8048439:	01 ee                	add    %ebp,%esi
 804843b:	56                   	push   %esi
 804843c:	57                   	push   %edi
 804843d:	e8 27 10 00 00       	call   8049469 <hex_dump>
  fail ("%zu bytes read starting at offset %zu in \"%s\" differ "
 8048442:	83 c4 20             	add    $0x20,%esp
 8048445:	ff 74 24 40          	pushl  0x40(%esp)
 8048449:	57                   	push   %edi
 804844a:	ff 74 24 14          	pushl  0x14(%esp)
 804844e:	68 e8 ac 04 08       	push   $0x804ace8
 8048453:	e8 65 fd ff ff       	call   80481bd <fail>
      break;
  for (j = i + 1; j < size; j++)
    if (read_data[j] == expected_data[j])
      break;

  quiet = false;
 8048458:	c6 05 e0 c9 04 08 00 	movb   $0x0,0x804c9e0
  msg ("%zu bytes read starting at offset %zu in \"%s\" differ "
 804845f:	ff 74 24 40          	pushl  0x40(%esp)
 8048463:	ff 74 24 40          	pushl  0x40(%esp)
 8048467:	6a 01                	push   $0x1
 8048469:	68 80 ac 04 08       	push   $0x804ac80
 804846e:	e8 27 fd ff ff       	call   804819a <msg>
 8048473:	83 c4 10             	add    $0x10,%esp
 8048476:	8b 7c 24 3c          	mov    0x3c(%esp),%edi
 804847a:	bd 00 00 00 00       	mov    $0x0,%ebp
 804847f:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
 8048486:	00 
 8048487:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 804848e:	00 
 804848f:	e9 76 ff ff ff       	jmp    804840a <compare_bytes+0xc7>
    return;
  
  for (i = 0; i < size; i++)
    if (read_data[i] != expected_data[i])
      break;
  for (j = i + 1; j < size; j++)
 8048494:	83 ff 01             	cmp    $0x1,%edi
 8048497:	77 3e                	ja     80484d7 <compare_bytes+0x194>
 8048499:	eb bd                	jmp    8048458 <compare_bytes+0x115>
    if (read_data[j] == expected_data[j])
      break;

  quiet = false;
 804849b:	c6 05 e0 c9 04 08 00 	movb   $0x0,0x804c9e0
  msg ("%zu bytes read starting at offset %zu in \"%s\" differ "
 80484a2:	ff 74 24 40          	pushl  0x40(%esp)
 80484a6:	ff 74 24 40          	pushl  0x40(%esp)
 80484aa:	6a 01                	push   $0x1
 80484ac:	68 80 ac 04 08       	push   $0x804ac80
 80484b1:	e8 e4 fc ff ff       	call   804819a <msg>
 80484b6:	83 c4 10             	add    $0x10,%esp
 80484b9:	8b 7c 24 3c          	mov    0x3c(%esp),%edi
 80484bd:	bd 00 00 00 00       	mov    $0x0,%ebp
 80484c2:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
 80484c9:	00 
 80484ca:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 80484d1:	00 
 80484d2:	e9 33 ff ff ff       	jmp    804840a <compare_bytes+0xc7>
  
  for (i = 0; i < size; i++)
    if (read_data[i] != expected_data[i])
      break;
  for (j = i + 1; j < size; j++)
    if (read_data[j] == expected_data[j])
 80484d7:	0f b6 46 01          	movzbl 0x1(%esi),%eax
 80484db:	38 43 01             	cmp    %al,0x1(%ebx)
 80484de:	74 bb                	je     804849b <compare_bytes+0x158>
 80484e0:	bd 00 00 00 00       	mov    $0x0,%ebp
    return;
  
  for (i = 0; i < size; i++)
    if (read_data[i] != expected_data[i])
      break;
  for (j = i + 1; j < size; j++)
 80484e5:	b8 01 00 00 00       	mov    $0x1,%eax
 80484ea:	e9 c7 fe ff ff       	jmp    80483b6 <compare_bytes+0x73>
    if (read_data[j] == expected_data[j])
      break;

  quiet = false;
 80484ef:	c6 05 e0 c9 04 08 00 	movb   $0x0,0x804c9e0
  msg ("%zu bytes read starting at offset %zu in \"%s\" differ "
 80484f6:	ff 74 24 40          	pushl  0x40(%esp)
 80484fa:	ff 74 24 40          	pushl  0x40(%esp)
 80484fe:	6a 01                	push   $0x1
 8048500:	68 80 ac 04 08       	push   $0x804ac80
 8048505:	e8 90 fc ff ff       	call   804819a <msg>
 804850a:	83 c4 10             	add    $0x10,%esp
 804850d:	89 fd                	mov    %edi,%ebp
 804850f:	8b 7c 24 3c          	mov    0x3c(%esp),%edi
 8048513:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
 804851a:	00 
 804851b:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 8048522:	00 
 8048523:	e9 e2 fe ff ff       	jmp    804840a <compare_bytes+0xc7>
  hex_dump (ofs + i, read_data + i, show_cnt, true);
  msg ("Expected data:");
  hex_dump (ofs + i, expected_data + i, show_cnt, true);
  fail ("%zu bytes read starting at offset %zu in \"%s\" differ "
        "from expected", j - i, ofs + i, file_name);
}
 8048528:	83 c4 1c             	add    $0x1c,%esp
 804852b:	5b                   	pop    %ebx
 804852c:	5e                   	pop    %esi
 804852d:	5f                   	pop    %edi
 804852e:	5d                   	pop    %ebp
 804852f:	c3                   	ret    

08048530 <check_file_handle>:
}

void
check_file_handle (int fd,
                   const char *file_name, const void *buf_, size_t size) 
{
 8048530:	55                   	push   %ebp
 8048531:	57                   	push   %edi
 8048532:	56                   	push   %esi
 8048533:	53                   	push   %ebx
 8048534:	81 ec 28 02 00 00    	sub    $0x228,%esp
 804853a:	8b bc 24 48 02 00 00 	mov    0x248(%esp),%edi
  size_t file_size;

  /* Warn about file of wrong size.  Don't fail yet because we
     may still be able to get more information by reading the
     file. */
  file_size = filesize (fd);
 8048541:	ff b4 24 3c 02 00 00 	pushl  0x23c(%esp)
 8048548:	e8 60 1c 00 00       	call   804a1ad <filesize>
 804854d:	89 44 24 1c          	mov    %eax,0x1c(%esp)
  if (file_size != size)
 8048551:	83 c4 10             	add    $0x10,%esp
 8048554:	39 f8                	cmp    %edi,%eax
 8048556:	0f 84 be 00 00 00    	je     804861a <check_file_handle+0xea>
    msg ("size of %s (%zu) differs from expected (%zu)",
 804855c:	57                   	push   %edi
 804855d:	50                   	push   %eax
 804855e:	ff b4 24 3c 02 00 00 	pushl  0x23c(%esp)
 8048565:	68 2c ad 04 08       	push   $0x804ad2c
 804856a:	e8 2b fc ff ff       	call   804819a <msg>
          file_name, file_size, size);

  /* Read the file block-by-block, comparing data as we go. */
  while (ofs < size)
 804856f:	83 c4 10             	add    $0x10,%esp
 8048572:	85 ff                	test   %edi,%edi
 8048574:	74 75                	je     80485eb <check_file_handle+0xbb>
}

void
check_file_handle (int fd,
                   const char *file_name, const void *buf_, size_t size) 
{
 8048576:	be 00 00 00 00       	mov    $0x0,%esi

      block_size = size - ofs;
      if (block_size > sizeof block)
        block_size = sizeof block;

      ret_val = read (fd, block, block_size);
 804857b:	8d 6c 24 10          	lea    0x10(%esp),%ebp
  while (ofs < size)
    {
      char block[512];
      size_t block_size, ret_val;

      block_size = size - ofs;
 804857f:	89 fb                	mov    %edi,%ebx
 8048581:	29 f3                	sub    %esi,%ebx
 8048583:	81 fb 00 02 00 00    	cmp    $0x200,%ebx
 8048589:	b8 00 02 00 00       	mov    $0x200,%eax
 804858e:	0f 47 d8             	cmova  %eax,%ebx
      if (block_size > sizeof block)
        block_size = sizeof block;

      ret_val = read (fd, block, block_size);
 8048591:	83 ec 04             	sub    $0x4,%esp
 8048594:	53                   	push   %ebx
 8048595:	55                   	push   %ebp
 8048596:	ff b4 24 3c 02 00 00 	pushl  0x23c(%esp)
 804859d:	e8 17 1c 00 00       	call   804a1b9 <read>
      if (ret_val != block_size)
 80485a2:	83 c4 10             	add    $0x10,%esp
 80485a5:	39 c3                	cmp    %eax,%ebx
 80485a7:	74 17                	je     80485c0 <check_file_handle+0x90>
        fail ("read of %zu bytes at offset %zu in \"%s\" returned %zu",
 80485a9:	83 ec 0c             	sub    $0xc,%esp
 80485ac:	50                   	push   %eax
 80485ad:	ff b4 24 44 02 00 00 	pushl  0x244(%esp)
 80485b4:	56                   	push   %esi
 80485b5:	53                   	push   %ebx
 80485b6:	68 5c ad 04 08       	push   $0x804ad5c
 80485bb:	e8 fd fb ff ff       	call   80481bd <fail>
              block_size, ofs, file_name, ret_val);

      compare_bytes (block, buf + ofs, block_size, ofs, file_name);
 80485c0:	83 ec 0c             	sub    $0xc,%esp
 80485c3:	ff b4 24 40 02 00 00 	pushl  0x240(%esp)
 80485ca:	56                   	push   %esi
 80485cb:	53                   	push   %ebx
 80485cc:	89 f0                	mov    %esi,%eax
 80485ce:	03 84 24 50 02 00 00 	add    0x250(%esp),%eax
 80485d5:	50                   	push   %eax
 80485d6:	55                   	push   %ebp
 80485d7:	e8 67 fd ff ff       	call   8048343 <compare_bytes>
      ofs += block_size;
 80485dc:	01 de                	add    %ebx,%esi
  if (file_size != size)
    msg ("size of %s (%zu) differs from expected (%zu)",
          file_name, file_size, size);

  /* Read the file block-by-block, comparing data as we go. */
  while (ofs < size)
 80485de:	83 c4 20             	add    $0x20,%esp
 80485e1:	39 f7                	cmp    %esi,%edi
 80485e3:	77 9a                	ja     804857f <check_file_handle+0x4f>
      compare_bytes (block, buf + ofs, block_size, ofs, file_name);
      ofs += block_size;
    }

  /* Now fail due to wrong file size. */
  if (file_size != size)
 80485e5:	39 7c 24 0c          	cmp    %edi,0xc(%esp)
 80485e9:	74 16                	je     8048601 <check_file_handle+0xd1>
    fail ("size of %s (%zu) differs from expected (%zu)",
 80485eb:	57                   	push   %edi
 80485ec:	ff 74 24 10          	pushl  0x10(%esp)
 80485f0:	ff b4 24 3c 02 00 00 	pushl  0x23c(%esp)
 80485f7:	68 2c ad 04 08       	push   $0x804ad2c
 80485fc:	e8 bc fb ff ff       	call   80481bd <fail>
          file_name, file_size, size);

  msg ("verified contents of \"%s\"", file_name);
 8048601:	83 ec 08             	sub    $0x8,%esp
 8048604:	ff b4 24 3c 02 00 00 	pushl  0x23c(%esp)
 804860b:	68 09 af 04 08       	push   $0x804af09
 8048610:	e8 85 fb ff ff       	call   804819a <msg>
}
 8048615:	83 c4 10             	add    $0x10,%esp
 8048618:	eb 0d                	jmp    8048627 <check_file_handle+0xf7>
  if (file_size != size)
    msg ("size of %s (%zu) differs from expected (%zu)",
          file_name, file_size, size);

  /* Read the file block-by-block, comparing data as we go. */
  while (ofs < size)
 804861a:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
 804861f:	0f 85 51 ff ff ff    	jne    8048576 <check_file_handle+0x46>
 8048625:	eb da                	jmp    8048601 <check_file_handle+0xd1>
  if (file_size != size)
    fail ("size of %s (%zu) differs from expected (%zu)",
          file_name, file_size, size);

  msg ("verified contents of \"%s\"", file_name);
}
 8048627:	81 c4 1c 02 00 00    	add    $0x21c,%esp
 804862d:	5b                   	pop    %ebx
 804862e:	5e                   	pop    %esi
 804862f:	5f                   	pop    %edi
 8048630:	5d                   	pop    %ebp
 8048631:	c3                   	ret    

08048632 <check_file>:

void
check_file (const char *file_name, const void *buf, size_t size) 
{
 8048632:	56                   	push   %esi
 8048633:	53                   	push   %ebx
 8048634:	83 ec 0c             	sub    $0xc,%esp
 8048637:	8b 5c 24 18          	mov    0x18(%esp),%ebx
  int fd;

  CHECK ((fd = open (file_name)) > 1, "open \"%s\" for verification",
 804863b:	53                   	push   %ebx
 804863c:	68 23 af 04 08       	push   $0x804af23
 8048641:	e8 54 fb ff ff       	call   804819a <msg>
 8048646:	89 1c 24             	mov    %ebx,(%esp)
 8048649:	e8 53 1b 00 00       	call   804a1a1 <open>
 804864e:	83 c4 10             	add    $0x10,%esp
 8048651:	83 f8 01             	cmp    $0x1,%eax
 8048654:	7f 0e                	jg     8048664 <check_file+0x32>
 8048656:	83 ec 08             	sub    $0x8,%esp
 8048659:	53                   	push   %ebx
 804865a:	68 23 af 04 08       	push   $0x804af23
 804865f:	e8 59 fb ff ff       	call   80481bd <fail>
 8048664:	89 c6                	mov    %eax,%esi
         file_name);
  check_file_handle (fd, file_name, buf, size);
 8048666:	ff 74 24 18          	pushl  0x18(%esp)
 804866a:	ff 74 24 18          	pushl  0x18(%esp)
 804866e:	53                   	push   %ebx
 804866f:	50                   	push   %eax
 8048670:	e8 bb fe ff ff       	call   8048530 <check_file_handle>
  msg ("close \"%s\"", file_name);
 8048675:	83 c4 08             	add    $0x8,%esp
 8048678:	53                   	push   %ebx
 8048679:	68 3e af 04 08       	push   $0x804af3e
 804867e:	e8 17 fb ff ff       	call   804819a <msg>
  close (fd);
 8048683:	89 34 24             	mov    %esi,(%esp)
 8048686:	e8 72 1b 00 00       	call   804a1fd <close>
}
 804868b:	83 c4 14             	add    $0x14,%esp
 804868e:	5b                   	pop    %ebx
 804868f:	5e                   	pop    %esi
 8048690:	c3                   	ret    

08048691 <seq_test>:

void 
seq_test (const char *file_name, void *buf, size_t size, size_t initial_size,
          size_t (*block_size_func) (void),
          void (*check_func) (int fd, long ofs)) 
{
 8048691:	55                   	push   %ebp
 8048692:	57                   	push   %edi
 8048693:	56                   	push   %esi
 8048694:	53                   	push   %ebx
 8048695:	83 ec 14             	sub    $0x14,%esp
 8048698:	8b 6c 24 3c          	mov    0x3c(%esp),%ebp
  size_t ofs;
  int fd;
  
  random_bytes (buf, size);
 804869c:	ff 74 24 30          	pushl  0x30(%esp)
 80486a0:	ff 74 24 30          	pushl  0x30(%esp)
 80486a4:	e8 f0 01 00 00       	call   8048899 <random_bytes>
  CHECK (create (file_name, initial_size), "create \"%s\"", file_name);
 80486a9:	83 c4 08             	add    $0x8,%esp
 80486ac:	ff 74 24 28          	pushl  0x28(%esp)
 80486b0:	68 49 af 04 08       	push   $0x804af49
 80486b5:	e8 e0 fa ff ff       	call   804819a <msg>
 80486ba:	83 c4 08             	add    $0x8,%esp
 80486bd:	ff 74 24 34          	pushl  0x34(%esp)
 80486c1:	ff 74 24 2c          	pushl  0x2c(%esp)
 80486c5:	e8 b1 1a 00 00       	call   804a17b <create>
 80486ca:	83 c4 10             	add    $0x10,%esp
 80486cd:	84 c0                	test   %al,%al
 80486cf:	75 11                	jne    80486e2 <seq_test+0x51>
 80486d1:	83 ec 08             	sub    $0x8,%esp
 80486d4:	ff 74 24 28          	pushl  0x28(%esp)
 80486d8:	68 49 af 04 08       	push   $0x804af49
 80486dd:	e8 db fa ff ff       	call   80481bd <fail>
  CHECK ((fd = open (file_name)) > 1, "open \"%s\"", file_name);
 80486e2:	83 ec 08             	sub    $0x8,%esp
 80486e5:	ff 74 24 28          	pushl  0x28(%esp)
 80486e9:	68 55 af 04 08       	push   $0x804af55
 80486ee:	e8 a7 fa ff ff       	call   804819a <msg>
 80486f3:	83 c4 04             	add    $0x4,%esp
 80486f6:	ff 74 24 2c          	pushl  0x2c(%esp)
 80486fa:	e8 a2 1a 00 00       	call   804a1a1 <open>
 80486ff:	89 c7                	mov    %eax,%edi
 8048701:	83 c4 10             	add    $0x10,%esp
 8048704:	83 f8 01             	cmp    $0x1,%eax
 8048707:	7f 11                	jg     804871a <seq_test+0x89>
 8048709:	83 ec 08             	sub    $0x8,%esp
 804870c:	ff 74 24 28          	pushl  0x28(%esp)
 8048710:	68 55 af 04 08       	push   $0x804af55
 8048715:	e8 a3 fa ff ff       	call   80481bd <fail>

  ofs = 0;
  msg ("writing \"%s\"", file_name);
 804871a:	83 ec 08             	sub    $0x8,%esp
 804871d:	ff 74 24 28          	pushl  0x28(%esp)
 8048721:	68 5f af 04 08       	push   $0x804af5f
 8048726:	e8 6f fa ff ff       	call   804819a <msg>
  while (ofs < size) 
 804872b:	83 c4 10             	add    $0x10,%esp
 804872e:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
 8048733:	74 54                	je     8048789 <seq_test+0xf8>
 8048735:	be 00 00 00 00       	mov    $0x0,%esi
    {
      size_t block_size = block_size_func ();
 804873a:	ff 54 24 30          	call   *0x30(%esp)
      if (block_size > size - ofs)
 804873e:	8b 54 24 28          	mov    0x28(%esp),%edx
 8048742:	29 f2                	sub    %esi,%edx
 8048744:	39 d0                	cmp    %edx,%eax
 8048746:	89 d3                	mov    %edx,%ebx
 8048748:	0f 46 d8             	cmovbe %eax,%ebx
        block_size = size - ofs;

      if (write (fd, buf + ofs, block_size) != (int) block_size)
 804874b:	83 ec 04             	sub    $0x4,%esp
 804874e:	53                   	push   %ebx
 804874f:	89 f0                	mov    %esi,%eax
 8048751:	03 44 24 2c          	add    0x2c(%esp),%eax
 8048755:	50                   	push   %eax
 8048756:	57                   	push   %edi
 8048757:	e8 71 1a 00 00       	call   804a1cd <write>
 804875c:	83 c4 10             	add    $0x10,%esp
 804875f:	39 d8                	cmp    %ebx,%eax
 8048761:	74 10                	je     8048773 <seq_test+0xe2>
        fail ("write %zu bytes at offset %zu in \"%s\" failed",
 8048763:	ff 74 24 20          	pushl  0x20(%esp)
 8048767:	56                   	push   %esi
 8048768:	53                   	push   %ebx
 8048769:	68 94 ad 04 08       	push   $0x804ad94
 804876e:	e8 4a fa ff ff       	call   80481bd <fail>
              block_size, ofs, file_name);

      ofs += block_size;
 8048773:	01 de                	add    %ebx,%esi
      if (check_func != NULL)
 8048775:	85 ed                	test   %ebp,%ebp
 8048777:	74 0a                	je     8048783 <seq_test+0xf2>
        check_func (fd, ofs);
 8048779:	83 ec 08             	sub    $0x8,%esp
 804877c:	56                   	push   %esi
 804877d:	57                   	push   %edi
 804877e:	ff d5                	call   *%ebp
 8048780:	83 c4 10             	add    $0x10,%esp
  CHECK (create (file_name, initial_size), "create \"%s\"", file_name);
  CHECK ((fd = open (file_name)) > 1, "open \"%s\"", file_name);

  ofs = 0;
  msg ("writing \"%s\"", file_name);
  while (ofs < size) 
 8048783:	39 74 24 28          	cmp    %esi,0x28(%esp)
 8048787:	77 b1                	ja     804873a <seq_test+0xa9>

      ofs += block_size;
      if (check_func != NULL)
        check_func (fd, ofs);
    }
  msg ("close \"%s\"", file_name);
 8048789:	83 ec 08             	sub    $0x8,%esp
 804878c:	ff 74 24 28          	pushl  0x28(%esp)
 8048790:	68 3e af 04 08       	push   $0x804af3e
 8048795:	e8 00 fa ff ff       	call   804819a <msg>
  close (fd);
 804879a:	89 3c 24             	mov    %edi,(%esp)
 804879d:	e8 5b 1a 00 00       	call   804a1fd <close>
  check_file (file_name, buf, size);
 80487a2:	83 c4 0c             	add    $0xc,%esp
 80487a5:	ff 74 24 2c          	pushl  0x2c(%esp)
 80487a9:	ff 74 24 2c          	pushl  0x2c(%esp)
 80487ad:	ff 74 24 2c          	pushl  0x2c(%esp)
 80487b1:	e8 7c fe ff ff       	call   8048632 <check_file>
}
 80487b6:	83 c4 1c             	add    $0x1c,%esp
 80487b9:	5b                   	pop    %ebx
 80487ba:	5e                   	pop    %esi
 80487bb:	5f                   	pop    %edi
 80487bc:	5d                   	pop    %ebp
 80487bd:	c3                   	ret    

080487be <main>:
#include "tests/lib.h"
#include "tests/main.h"

int
main (int argc UNUSED, char *argv[]) 
{
 80487be:	8d 4c 24 04          	lea    0x4(%esp),%ecx
 80487c2:	83 e4 f0             	and    $0xfffffff0,%esp
 80487c5:	ff 71 fc             	pushl  -0x4(%ecx)
 80487c8:	55                   	push   %ebp
 80487c9:	89 e5                	mov    %esp,%ebp
 80487cb:	51                   	push   %ecx
 80487cc:	83 ec 10             	sub    $0x10,%esp
 80487cf:	8b 41 04             	mov    0x4(%ecx),%eax
  test_name = argv[0];
 80487d2:	8b 00                	mov    (%eax),%eax
 80487d4:	a3 24 cf 04 08       	mov    %eax,0x804cf24

  msg ("begin");
 80487d9:	68 6c af 04 08       	push   $0x804af6c
 80487de:	e8 b7 f9 ff ff       	call   804819a <msg>
  random_init (0);
 80487e3:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 80487ea:	e8 39 00 00 00       	call   8048828 <random_init>
  test_main ();
 80487ef:	e8 d1 f8 ff ff       	call   80480c5 <test_main>
  msg ("end");
 80487f4:	c7 04 24 72 af 04 08 	movl   $0x804af72,(%esp)
 80487fb:	e8 9a f9 ff ff       	call   804819a <msg>
 8048800:	83 c4 10             	add    $0x10,%esp
  return 0;
}
 8048803:	b8 00 00 00 00       	mov    $0x0,%eax
 8048808:	8b 4d fc             	mov    -0x4(%ebp),%ecx
 804880b:	c9                   	leave  
 804880c:	8d 61 fc             	lea    -0x4(%ecx),%esp
 804880f:	c3                   	ret    

08048810 <_start>:
int main (int, char *[]);
void _start (int argc, char *argv[]);

void
_start (int argc, char *argv[]) 
{
 8048810:	83 ec 14             	sub    $0x14,%esp
  exit (main (argc, argv));
 8048813:	ff 74 24 1c          	pushl  0x1c(%esp)
 8048817:	ff 74 24 1c          	pushl  0x1c(%esp)
 804881b:	e8 9e ff ff ff       	call   80487be <main>
 8048820:	89 04 24             	mov    %eax,(%esp)
 8048823:	e8 17 19 00 00       	call   804a13f <exit>

08048828 <random_init>:
{
  uint8_t *seedp = (uint8_t *) &seed;
  int i;
  uint8_t j;

  for (i = 0; i < 256; i++) 
 8048828:	b8 00 00 00 00       	mov    $0x0,%eax
    s[i] = i;
 804882d:	88 80 20 ce 04 08    	mov    %al,0x804ce20(%eax)
{
  uint8_t *seedp = (uint8_t *) &seed;
  int i;
  uint8_t j;

  for (i = 0; i < 256; i++) 
 8048833:	83 c0 01             	add    $0x1,%eax
 8048836:	3d 00 01 00 00       	cmp    $0x100,%eax
 804883b:	75 f0                	jne    804882d <random_init+0x5>
}

/* Initializes or reinitializes the PRNG with the given SEED. */
void
random_init (unsigned seed)
{
 804883d:	56                   	push   %esi
 804883e:	53                   	push   %ebx
 804883f:	be 00 00 00 00       	mov    $0x0,%esi
 8048844:	b8 00 00 00 00       	mov    $0x0,%eax

  for (i = 0; i < 256; i++) 
    s[i] = i;
  for (i = j = 0; i < 256; i++) 
    {
      j += s[i] + seedp[i % sizeof seed];
 8048849:	89 c1                	mov    %eax,%ecx
 804884b:	83 e1 03             	and    $0x3,%ecx
 804884e:	0f b6 98 20 ce 04 08 	movzbl 0x804ce20(%eax),%ebx
 8048855:	89 da                	mov    %ebx,%edx
 8048857:	02 54 0c 0c          	add    0xc(%esp,%ecx,1),%dl
 804885b:	89 d1                	mov    %edx,%ecx
 804885d:	01 ce                	add    %ecx,%esi
      swap_byte (s + i, s + j);
 804885f:	89 f2                	mov    %esi,%edx
 8048861:	0f b6 ca             	movzbl %dl,%ecx
/* Swaps the bytes pointed to by A and B. */
static inline void
swap_byte (uint8_t *a, uint8_t *b) 
{
  uint8_t t = *a;
  *a = *b;
 8048864:	0f b6 91 20 ce 04 08 	movzbl 0x804ce20(%ecx),%edx
 804886b:	88 90 20 ce 04 08    	mov    %dl,0x804ce20(%eax)
  *b = t;
 8048871:	88 99 20 ce 04 08    	mov    %bl,0x804ce20(%ecx)
  int i;
  uint8_t j;

  for (i = 0; i < 256; i++) 
    s[i] = i;
  for (i = j = 0; i < 256; i++) 
 8048877:	83 c0 01             	add    $0x1,%eax
 804887a:	3d 00 01 00 00       	cmp    $0x100,%eax
 804887f:	75 c8                	jne    8048849 <random_init+0x21>
    {
      j += s[i] + seedp[i % sizeof seed];
      swap_byte (s + i, s + j);
    }

  s_i = s_j = 0;
 8048881:	c6 05 01 ce 04 08 00 	movb   $0x0,0x804ce01
 8048888:	c6 05 02 ce 04 08 00 	movb   $0x0,0x804ce02
  inited = true;
 804888f:	c6 05 00 ce 04 08 01 	movb   $0x1,0x804ce00
}
 8048896:	5b                   	pop    %ebx
 8048897:	5e                   	pop    %esi
 8048898:	c3                   	ret    

08048899 <random_bytes>:

/* Writes SIZE random bytes into BUF. */
void
random_bytes (void *buf_, size_t size) 
{
 8048899:	55                   	push   %ebp
 804889a:	57                   	push   %edi
 804889b:	56                   	push   %esi
 804889c:	53                   	push   %ebx
 804889d:	83 ec 08             	sub    $0x8,%esp
 80488a0:	8b 5c 24 1c          	mov    0x1c(%esp),%ebx
 80488a4:	8b 6c 24 20          	mov    0x20(%esp),%ebp
  uint8_t *buf;

  if (!inited)
 80488a8:	80 3d 00 ce 04 08 00 	cmpb   $0x0,0x804ce00
 80488af:	75 0a                	jne    80488bb <random_bytes+0x22>
    random_init (0);
 80488b1:	6a 00                	push   $0x0
 80488b3:	e8 70 ff ff ff       	call   8048828 <random_init>
 80488b8:	83 c4 04             	add    $0x4,%esp

  for (buf = buf_; size-- > 0; buf++)
 80488bb:	8d 45 ff             	lea    -0x1(%ebp),%eax
 80488be:	89 04 24             	mov    %eax,(%esp)
 80488c1:	85 ed                	test   %ebp,%ebp
 80488c3:	0f 84 82 00 00 00    	je     804894b <random_bytes+0xb2>
 80488c9:	0f b6 05 02 ce 04 08 	movzbl 0x804ce02,%eax
 80488d0:	88 44 24 07          	mov    %al,0x7(%esp)
 80488d4:	0f b6 35 01 ce 04 08 	movzbl 0x804ce01,%esi
 80488db:	01 dd                	add    %ebx,%ebp
 80488dd:	88 44 24 06          	mov    %al,0x6(%esp)
    {
      uint8_t s_k;
      
      s_i++;
 80488e1:	80 44 24 06 01       	addb   $0x1,0x6(%esp)
 80488e6:	0f b6 44 24 06       	movzbl 0x6(%esp),%eax
      s_j += s[s_i];
 80488eb:	0f b6 d0             	movzbl %al,%edx
 80488ee:	89 f0                	mov    %esi,%eax
 80488f0:	02 82 20 ce 04 08    	add    0x804ce20(%edx),%al
 80488f6:	89 c6                	mov    %eax,%esi
      swap_byte (s + s_i, s + s_j);
 80488f8:	0f b6 c0             	movzbl %al,%eax

/* Swaps the bytes pointed to by A and B. */
static inline void
swap_byte (uint8_t *a, uint8_t *b) 
{
  uint8_t t = *a;
 80488fb:	0f b6 ba 20 ce 04 08 	movzbl 0x804ce20(%edx),%edi
  *a = *b;
 8048902:	0f b6 88 20 ce 04 08 	movzbl 0x804ce20(%eax),%ecx
 8048909:	88 8a 20 ce 04 08    	mov    %cl,0x804ce20(%edx)
  *b = t;
 804890f:	89 f9                	mov    %edi,%ecx
 8048911:	88 88 20 ce 04 08    	mov    %cl,0x804ce20(%eax)
      s_i++;
      s_j += s[s_i];
      swap_byte (s + s_i, s + s_j);

      s_k = s[s_i] + s[s_j];
      *buf = s[s_k];
 8048917:	89 f8                	mov    %edi,%eax
 8048919:	02 82 20 ce 04 08    	add    0x804ce20(%edx),%al
 804891f:	0f b6 c0             	movzbl %al,%eax
 8048922:	0f b6 80 20 ce 04 08 	movzbl 0x804ce20(%eax),%eax
 8048929:	88 03                	mov    %al,(%ebx)
  uint8_t *buf;

  if (!inited)
    random_init (0);

  for (buf = buf_; size-- > 0; buf++)
 804892b:	83 c3 01             	add    $0x1,%ebx
 804892e:	39 dd                	cmp    %ebx,%ebp
 8048930:	75 af                	jne    80488e1 <random_bytes+0x48>
 8048932:	0f b6 44 24 07       	movzbl 0x7(%esp),%eax
 8048937:	0f b6 3c 24          	movzbl (%esp),%edi
 804893b:	8d 44 38 01          	lea    0x1(%eax,%edi,1),%eax
 804893f:	a2 02 ce 04 08       	mov    %al,0x804ce02
 8048944:	89 f0                	mov    %esi,%eax
 8048946:	a2 01 ce 04 08       	mov    %al,0x804ce01
      swap_byte (s + s_i, s + s_j);

      s_k = s[s_i] + s[s_j];
      *buf = s[s_k];
    }
}
 804894b:	83 c4 08             	add    $0x8,%esp
 804894e:	5b                   	pop    %ebx
 804894f:	5e                   	pop    %esi
 8048950:	5f                   	pop    %edi
 8048951:	5d                   	pop    %ebp
 8048952:	c3                   	ret    

08048953 <random_ulong>:
/* Returns a pseudo-random unsigned long.
   Use random_ulong() % n to obtain a random number in the range
   0...n (exclusive). */
unsigned long
random_ulong (void) 
{
 8048953:	83 ec 10             	sub    $0x10,%esp
  unsigned long ul;
  random_bytes (&ul, sizeof ul);
 8048956:	6a 04                	push   $0x4
 8048958:	8d 44 24 10          	lea    0x10(%esp),%eax
 804895c:	50                   	push   %eax
 804895d:	e8 37 ff ff ff       	call   8048899 <random_bytes>
  return ul;
}
 8048962:	8b 44 24 14          	mov    0x14(%esp),%eax
 8048966:	83 c4 18             	add    $0x18,%esp
 8048969:	c3                   	ret    

0804896a <vsnprintf_helper>:
}

/* Helper function for vsnprintf(). */
static void
vsnprintf_helper (char ch, void *aux_)
{
 804896a:	53                   	push   %ebx
 804896b:	8b 5c 24 08          	mov    0x8(%esp),%ebx
 804896f:	8b 44 24 0c          	mov    0xc(%esp),%eax
  struct vsnprintf_aux *aux = aux_;

  if (aux->length++ < aux->max_length)
 8048973:	8b 50 04             	mov    0x4(%eax),%edx
 8048976:	8d 4a 01             	lea    0x1(%edx),%ecx
 8048979:	89 48 04             	mov    %ecx,0x4(%eax)
 804897c:	3b 50 08             	cmp    0x8(%eax),%edx
 804897f:	7d 09                	jge    804898a <vsnprintf_helper+0x20>
    *aux->p++ = ch;
 8048981:	8b 10                	mov    (%eax),%edx
 8048983:	8d 4a 01             	lea    0x1(%edx),%ecx
 8048986:	89 08                	mov    %ecx,(%eax)
 8048988:	88 1a                	mov    %bl,(%edx)
}
 804898a:	5b                   	pop    %ebx
 804898b:	c3                   	ret    

0804898c <output_dup>:
}

/* Writes CH to OUTPUT with auxiliary data AUX, CNT times. */
static void
output_dup (char ch, size_t cnt, void (*output) (char, void *), void *aux) 
{
 804898c:	55                   	push   %ebp
 804898d:	57                   	push   %edi
 804898e:	56                   	push   %esi
 804898f:	53                   	push   %ebx
 8048990:	83 ec 0c             	sub    $0xc,%esp
 8048993:	8b 7c 24 20          	mov    0x20(%esp),%edi
  while (cnt-- > 0)
 8048997:	85 d2                	test   %edx,%edx
 8048999:	74 16                	je     80489b1 <output_dup+0x25>
 804899b:	89 cd                	mov    %ecx,%ebp
 804899d:	89 d3                	mov    %edx,%ebx
    output (ch, aux);
 804899f:	0f be f0             	movsbl %al,%esi
 80489a2:	83 ec 08             	sub    $0x8,%esp
 80489a5:	57                   	push   %edi
 80489a6:	56                   	push   %esi
 80489a7:	ff d5                	call   *%ebp

/* Writes CH to OUTPUT with auxiliary data AUX, CNT times. */
static void
output_dup (char ch, size_t cnt, void (*output) (char, void *), void *aux) 
{
  while (cnt-- > 0)
 80489a9:	83 c4 10             	add    $0x10,%esp
 80489ac:	83 eb 01             	sub    $0x1,%ebx
 80489af:	75 f1                	jne    80489a2 <output_dup+0x16>
    output (ch, aux);
}
 80489b1:	83 c4 0c             	add    $0xc,%esp
 80489b4:	5b                   	pop    %ebx
 80489b5:	5e                   	pop    %esi
 80489b6:	5f                   	pop    %edi
 80489b7:	5d                   	pop    %ebp
 80489b8:	c3                   	ret    

080489b9 <format_integer>:
static void
format_integer (uintmax_t value, bool is_signed, bool negative, 
                const struct integer_base *b,
                const struct printf_conversion *c,
                void (*output) (char, void *), void *aux)
{
 80489b9:	55                   	push   %ebp
 80489ba:	57                   	push   %edi
 80489bb:	56                   	push   %esi
 80489bc:	53                   	push   %ebx
 80489bd:	83 ec 7c             	sub    $0x7c,%esp
 80489c0:	89 c6                	mov    %eax,%esi
 80489c2:	89 d7                	mov    %edx,%edi
 80489c4:	8b 84 24 90 00 00 00 	mov    0x90(%esp),%eax
  int digit_cnt;                /* # of digits output so far. */

  /* Determine sign character, if any.
     An unsigned conversion will never have a sign character,
     even if one of the flags requests one. */
  sign = 0;
 80489cb:	c7 44 24 20 00 00 00 	movl   $0x0,0x20(%esp)
 80489d2:	00 
  if (is_signed) 
 80489d3:	84 c9                	test   %cl,%cl
 80489d5:	74 40                	je     8048a17 <format_integer+0x5e>
    {
      if (c->flags & PLUS)
 80489d7:	8b 94 24 98 00 00 00 	mov    0x98(%esp),%edx
 80489de:	8b 12                	mov    (%edx),%edx
 80489e0:	f6 c2 02             	test   $0x2,%dl
 80489e3:	74 10                	je     80489f5 <format_integer+0x3c>
        sign = negative ? '-' : '+';
 80489e5:	3c 01                	cmp    $0x1,%al
 80489e7:	19 c0                	sbb    %eax,%eax
 80489e9:	83 e0 fe             	and    $0xfffffffe,%eax
 80489ec:	83 c0 2d             	add    $0x2d,%eax
 80489ef:	89 44 24 20          	mov    %eax,0x20(%esp)
 80489f3:	eb 22                	jmp    8048a17 <format_integer+0x5e>
      else if (c->flags & SPACE)
 80489f5:	f6 c2 04             	test   $0x4,%dl
 80489f8:	74 10                	je     8048a0a <format_integer+0x51>
        sign = negative ? '-' : ' ';
 80489fa:	3c 01                	cmp    $0x1,%al
 80489fc:	19 c0                	sbb    %eax,%eax
 80489fe:	83 e0 f3             	and    $0xfffffff3,%eax
 8048a01:	83 c0 2d             	add    $0x2d,%eax
 8048a04:	89 44 24 20          	mov    %eax,0x20(%esp)
 8048a08:	eb 0d                	jmp    8048a17 <format_integer+0x5e>
      else if (negative)
        sign = '-';
 8048a0a:	3c 01                	cmp    $0x1,%al
 8048a0c:	19 c0                	sbb    %eax,%eax
 8048a0e:	f7 d0                	not    %eax
 8048a10:	83 e0 2d             	and    $0x2d,%eax
 8048a13:	89 44 24 20          	mov    %eax,0x20(%esp)
    }

  /* Determine whether to include `0x' or `0X'.
     It will only be included with a hexadecimal conversion of a
     nonzero value with the # flag. */
  x = (c->flags & POUND) && value ? b->x : 0;
 8048a17:	8b 84 24 98 00 00 00 	mov    0x98(%esp),%eax
 8048a1e:	8b 00                	mov    (%eax),%eax
 8048a20:	89 44 24 28          	mov    %eax,0x28(%esp)
 8048a24:	83 e0 08             	and    $0x8,%eax
 8048a27:	89 44 24 2c          	mov    %eax,0x2c(%esp)
 8048a2b:	89 f2                	mov    %esi,%edx
 8048a2d:	09 fa                	or     %edi,%edx
 8048a2f:	74 14                	je     8048a45 <format_integer+0x8c>
 8048a31:	85 c0                	test   %eax,%eax
 8048a33:	74 10                	je     8048a45 <format_integer+0x8c>
 8048a35:	8b 84 24 94 00 00 00 	mov    0x94(%esp),%eax
 8048a3c:	8b 40 08             	mov    0x8(%eax),%eax
 8048a3f:	89 44 24 24          	mov    %eax,0x24(%esp)
 8048a43:	eb 08                	jmp    8048a4d <format_integer+0x94>
 8048a45:	c7 44 24 24 00 00 00 	movl   $0x0,0x24(%esp)
 8048a4c:	00 
  /* Accumulate digits into buffer.
     This algorithm produces digits in reverse order, so later we
     will output the buffer's content in reverse. */
  cp = buf;
  digit_cnt = 0;
  while (value > 0) 
 8048a4d:	89 f8                	mov    %edi,%eax
 8048a4f:	09 f0                	or     %esi,%eax
 8048a51:	0f 84 ad 00 00 00    	je     8048b04 <format_integer+0x14b>
    {
      if ((c->flags & GROUP) && digit_cnt > 0 && digit_cnt % b->group == 0)
        *cp++ = ',';
      *cp++ = b->digits[value % b->base];
 8048a57:	8b 84 24 94 00 00 00 	mov    0x94(%esp),%eax
 8048a5e:	8b 40 04             	mov    0x4(%eax),%eax
 8048a61:	89 44 24 18          	mov    %eax,0x18(%esp)
 8048a65:	8b 84 24 94 00 00 00 	mov    0x94(%esp),%eax
 8048a6c:	8b 00                	mov    (%eax),%eax
 8048a6e:	89 44 24 08          	mov    %eax,0x8(%esp)
 8048a72:	99                   	cltd   
 8048a73:	89 54 24 0c          	mov    %edx,0xc(%esp)
 8048a77:	bb 00 00 00 00       	mov    $0x0,%ebx
 8048a7c:	8d 6c 24 30          	lea    0x30(%esp),%ebp
     will output the buffer's content in reverse. */
  cp = buf;
  digit_cnt = 0;
  while (value > 0) 
    {
      if ((c->flags & GROUP) && digit_cnt > 0 && digit_cnt % b->group == 0)
 8048a80:	8b 44 24 28          	mov    0x28(%esp),%eax
 8048a84:	c1 e8 05             	shr    $0x5,%eax
 8048a87:	83 e0 01             	and    $0x1,%eax
 8048a8a:	88 44 24 1f          	mov    %al,0x1f(%esp)
 8048a8e:	eb 2b                	jmp    8048abb <format_integer+0x102>
 8048a90:	80 7c 24 1f 00       	cmpb   $0x0,0x1f(%esp)
 8048a95:	74 20                	je     8048ab7 <format_integer+0xfe>
 8048a97:	85 db                	test   %ebx,%ebx
 8048a99:	7e 1c                	jle    8048ab7 <format_integer+0xfe>
 8048a9b:	8b 8c 24 94 00 00 00 	mov    0x94(%esp),%ecx
 8048aa2:	89 d8                	mov    %ebx,%eax
 8048aa4:	99                   	cltd   
 8048aa5:	f7 79 0c             	idivl  0xc(%ecx)
 8048aa8:	85 d2                	test   %edx,%edx
 8048aaa:	75 0b                	jne    8048ab7 <format_integer+0xfe>
        *cp++ = ',';
 8048aac:	8d 45 02             	lea    0x2(%ebp),%eax
 8048aaf:	89 44 24 14          	mov    %eax,0x14(%esp)
 8048ab3:	c6 45 01 2c          	movb   $0x2c,0x1(%ebp)
    }

  /* Determine whether to include `0x' or `0X'.
     It will only be included with a hexadecimal conversion of a
     nonzero value with the # flag. */
  x = (c->flags & POUND) && value ? b->x : 0;
 8048ab7:	8b 6c 24 14          	mov    0x14(%esp),%ebp
  digit_cnt = 0;
  while (value > 0) 
    {
      if ((c->flags & GROUP) && digit_cnt > 0 && digit_cnt % b->group == 0)
        *cp++ = ',';
      *cp++ = b->digits[value % b->base];
 8048abb:	8d 45 01             	lea    0x1(%ebp),%eax
 8048abe:	89 44 24 14          	mov    %eax,0x14(%esp)
 8048ac2:	ff 74 24 0c          	pushl  0xc(%esp)
 8048ac6:	ff 74 24 0c          	pushl  0xc(%esp)
 8048aca:	57                   	push   %edi
 8048acb:	56                   	push   %esi
 8048acc:	e8 d8 15 00 00       	call   804a0a9 <__umoddi3>
 8048ad1:	83 c4 10             	add    $0x10,%esp
 8048ad4:	8b 4c 24 18          	mov    0x18(%esp),%ecx
 8048ad8:	0f b6 04 01          	movzbl (%ecx,%eax,1),%eax
 8048adc:	88 45 00             	mov    %al,0x0(%ebp)
      value /= b->base;
 8048adf:	ff 74 24 0c          	pushl  0xc(%esp)
 8048ae3:	ff 74 24 0c          	pushl  0xc(%esp)
 8048ae7:	57                   	push   %edi
 8048ae8:	56                   	push   %esi
 8048ae9:	e8 9f 15 00 00       	call   804a08d <__udivdi3>
 8048aee:	83 c4 10             	add    $0x10,%esp
 8048af1:	89 c6                	mov    %eax,%esi
 8048af3:	89 d7                	mov    %edx,%edi
      digit_cnt++;
 8048af5:	83 c3 01             	add    $0x1,%ebx
  /* Accumulate digits into buffer.
     This algorithm produces digits in reverse order, so later we
     will output the buffer's content in reverse. */
  cp = buf;
  digit_cnt = 0;
  while (value > 0) 
 8048af8:	89 d0                	mov    %edx,%eax
 8048afa:	09 f0                	or     %esi,%eax
 8048afc:	75 92                	jne    8048a90 <format_integer+0xd7>
 8048afe:	8b 5c 24 14          	mov    0x14(%esp),%ebx
 8048b02:	eb 04                	jmp    8048b08 <format_integer+0x14f>
  x = (c->flags & POUND) && value ? b->x : 0;

  /* Accumulate digits into buffer.
     This algorithm produces digits in reverse order, so later we
     will output the buffer's content in reverse. */
  cp = buf;
 8048b04:	8d 5c 24 30          	lea    0x30(%esp),%ebx
  /* Append enough zeros to match precision.
     If requested precision is 0, then a value of zero is
     rendered as a null string, otherwise as "0".
     If the # flag is used with base 8, the result must always
     begin with a zero. */
  precision = c->precision < 0 ? 1 : c->precision;
 8048b08:	8b 84 24 98 00 00 00 	mov    0x98(%esp),%eax
 8048b0f:	8b 50 08             	mov    0x8(%eax),%edx
 8048b12:	85 d2                	test   %edx,%edx
 8048b14:	b8 01 00 00 00       	mov    $0x1,%eax
 8048b19:	0f 48 d0             	cmovs  %eax,%edx
  while (cp - buf < precision && cp < buf + sizeof buf - 1)
 8048b1c:	8d 7c 24 30          	lea    0x30(%esp),%edi
 8048b20:	89 d8                	mov    %ebx,%eax
 8048b22:	29 f8                	sub    %edi,%eax
 8048b24:	39 c2                	cmp    %eax,%edx
 8048b26:	7e 1f                	jle    8048b47 <format_integer+0x18e>
 8048b28:	8d 44 24 6f          	lea    0x6f(%esp),%eax
 8048b2c:	39 c3                	cmp    %eax,%ebx
 8048b2e:	73 17                	jae    8048b47 <format_integer+0x18e>
 8048b30:	89 f9                	mov    %edi,%ecx
 8048b32:	89 c6                	mov    %eax,%esi
    *cp++ = '0';
 8048b34:	83 c3 01             	add    $0x1,%ebx
 8048b37:	c6 43 ff 30          	movb   $0x30,-0x1(%ebx)
     If requested precision is 0, then a value of zero is
     rendered as a null string, otherwise as "0".
     If the # flag is used with base 8, the result must always
     begin with a zero. */
  precision = c->precision < 0 ? 1 : c->precision;
  while (cp - buf < precision && cp < buf + sizeof buf - 1)
 8048b3b:	89 d8                	mov    %ebx,%eax
 8048b3d:	29 c8                	sub    %ecx,%eax
 8048b3f:	39 c2                	cmp    %eax,%edx
 8048b41:	7e 04                	jle    8048b47 <format_integer+0x18e>
 8048b43:	39 f3                	cmp    %esi,%ebx
 8048b45:	72 ed                	jb     8048b34 <format_integer+0x17b>
    *cp++ = '0';
  if ((c->flags & POUND) && b->base == 8 && (cp == buf || cp[-1] != '0'))
 8048b47:	83 7c 24 2c 00       	cmpl   $0x0,0x2c(%esp)
 8048b4c:	74 20                	je     8048b6e <format_integer+0x1b5>
 8048b4e:	8b 84 24 94 00 00 00 	mov    0x94(%esp),%eax
 8048b55:	83 38 08             	cmpl   $0x8,(%eax)
 8048b58:	75 14                	jne    8048b6e <format_integer+0x1b5>
 8048b5a:	8d 44 24 30          	lea    0x30(%esp),%eax
 8048b5e:	39 c3                	cmp    %eax,%ebx
 8048b60:	74 06                	je     8048b68 <format_integer+0x1af>
 8048b62:	80 7b ff 30          	cmpb   $0x30,-0x1(%ebx)
 8048b66:	74 06                	je     8048b6e <format_integer+0x1b5>
    *cp++ = '0';
 8048b68:	c6 03 30             	movb   $0x30,(%ebx)
 8048b6b:	8d 5b 01             	lea    0x1(%ebx),%ebx

  /* Calculate number of pad characters to fill field width. */
  pad_cnt = c->width - (cp - buf) - (x ? 2 : 0) - (sign != 0);
 8048b6e:	29 df                	sub    %ebx,%edi
 8048b70:	8b 84 24 98 00 00 00 	mov    0x98(%esp),%eax
 8048b77:	03 78 04             	add    0x4(%eax),%edi
 8048b7a:	89 fe                	mov    %edi,%esi
 8048b7c:	83 7c 24 24 01       	cmpl   $0x1,0x24(%esp)
 8048b81:	19 c0                	sbb    %eax,%eax
 8048b83:	f7 d0                	not    %eax
 8048b85:	83 e0 02             	and    $0x2,%eax
 8048b88:	29 c6                	sub    %eax,%esi
 8048b8a:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
 8048b8f:	0f 95 c0             	setne  %al
 8048b92:	0f b6 c0             	movzbl %al,%eax
 8048b95:	29 c6                	sub    %eax,%esi
 8048b97:	b8 00 00 00 00       	mov    $0x0,%eax
 8048b9c:	0f 48 f0             	cmovs  %eax,%esi
  if (pad_cnt < 0)
    pad_cnt = 0;

  /* Do output. */
  if ((c->flags & (MINUS | ZERO)) == 0)
 8048b9f:	f6 44 24 28 11       	testb  $0x11,0x28(%esp)
 8048ba4:	75 20                	jne    8048bc6 <format_integer+0x20d>
    output_dup (' ', pad_cnt, output, aux);
 8048ba6:	83 ec 0c             	sub    $0xc,%esp
 8048ba9:	ff b4 24 ac 00 00 00 	pushl  0xac(%esp)
 8048bb0:	8b 8c 24 ac 00 00 00 	mov    0xac(%esp),%ecx
 8048bb7:	89 f2                	mov    %esi,%edx
 8048bb9:	b8 20 00 00 00       	mov    $0x20,%eax
 8048bbe:	e8 c9 fd ff ff       	call   804898c <output_dup>
 8048bc3:	83 c4 10             	add    $0x10,%esp
  if (sign)
 8048bc6:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
 8048bcb:	74 18                	je     8048be5 <format_integer+0x22c>
    output (sign, aux);
 8048bcd:	83 ec 08             	sub    $0x8,%esp
 8048bd0:	ff b4 24 a8 00 00 00 	pushl  0xa8(%esp)
 8048bd7:	ff 74 24 2c          	pushl  0x2c(%esp)
 8048bdb:	ff 94 24 ac 00 00 00 	call   *0xac(%esp)
 8048be2:	83 c4 10             	add    $0x10,%esp
  if (x) 
 8048be5:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
 8048bea:	74 2d                	je     8048c19 <format_integer+0x260>
    {
      output ('0', aux);
 8048bec:	83 ec 08             	sub    $0x8,%esp
 8048bef:	ff b4 24 a8 00 00 00 	pushl  0xa8(%esp)
 8048bf6:	6a 30                	push   $0x30
 8048bf8:	ff 94 24 ac 00 00 00 	call   *0xac(%esp)
      output (x, aux); 
 8048bff:	83 c4 08             	add    $0x8,%esp
 8048c02:	ff b4 24 a8 00 00 00 	pushl  0xa8(%esp)
 8048c09:	0f be 44 24 30       	movsbl 0x30(%esp),%eax
 8048c0e:	50                   	push   %eax
 8048c0f:	ff 94 24 ac 00 00 00 	call   *0xac(%esp)
 8048c16:	83 c4 10             	add    $0x10,%esp
    }
  if (c->flags & ZERO)
 8048c19:	8b 84 24 98 00 00 00 	mov    0x98(%esp),%eax
 8048c20:	f6 00 10             	testb  $0x10,(%eax)
 8048c23:	74 20                	je     8048c45 <format_integer+0x28c>
    output_dup ('0', pad_cnt, output, aux);
 8048c25:	83 ec 0c             	sub    $0xc,%esp
 8048c28:	ff b4 24 ac 00 00 00 	pushl  0xac(%esp)
 8048c2f:	8b 8c 24 ac 00 00 00 	mov    0xac(%esp),%ecx
 8048c36:	89 f2                	mov    %esi,%edx
 8048c38:	b8 30 00 00 00       	mov    $0x30,%eax
 8048c3d:	e8 4a fd ff ff       	call   804898c <output_dup>
 8048c42:	83 c4 10             	add    $0x10,%esp
  while (cp > buf)
 8048c45:	8d 44 24 30          	lea    0x30(%esp),%eax
 8048c49:	39 c3                	cmp    %eax,%ebx
 8048c4b:	76 2c                	jbe    8048c79 <format_integer+0x2c0>
 8048c4d:	89 c7                	mov    %eax,%edi
 8048c4f:	89 74 24 08          	mov    %esi,0x8(%esp)
 8048c53:	8b b4 24 9c 00 00 00 	mov    0x9c(%esp),%esi
 8048c5a:	8b ac 24 a0 00 00 00 	mov    0xa0(%esp),%ebp
    output (*--cp, aux);
 8048c61:	83 eb 01             	sub    $0x1,%ebx
 8048c64:	83 ec 08             	sub    $0x8,%esp
 8048c67:	55                   	push   %ebp
 8048c68:	0f be 03             	movsbl (%ebx),%eax
 8048c6b:	50                   	push   %eax
 8048c6c:	ff d6                	call   *%esi
      output ('0', aux);
      output (x, aux); 
    }
  if (c->flags & ZERO)
    output_dup ('0', pad_cnt, output, aux);
  while (cp > buf)
 8048c6e:	83 c4 10             	add    $0x10,%esp
 8048c71:	39 fb                	cmp    %edi,%ebx
 8048c73:	75 ec                	jne    8048c61 <format_integer+0x2a8>
 8048c75:	8b 74 24 08          	mov    0x8(%esp),%esi
    output (*--cp, aux);
  if (c->flags & MINUS)
 8048c79:	8b 84 24 98 00 00 00 	mov    0x98(%esp),%eax
 8048c80:	f6 00 01             	testb  $0x1,(%eax)
 8048c83:	74 20                	je     8048ca5 <format_integer+0x2ec>
    output_dup (' ', pad_cnt, output, aux);
 8048c85:	83 ec 0c             	sub    $0xc,%esp
 8048c88:	ff b4 24 ac 00 00 00 	pushl  0xac(%esp)
 8048c8f:	8b 8c 24 ac 00 00 00 	mov    0xac(%esp),%ecx
 8048c96:	89 f2                	mov    %esi,%edx
 8048c98:	b8 20 00 00 00       	mov    $0x20,%eax
 8048c9d:	e8 ea fc ff ff       	call   804898c <output_dup>
 8048ca2:	83 c4 10             	add    $0x10,%esp
}
 8048ca5:	83 c4 7c             	add    $0x7c,%esp
 8048ca8:	5b                   	pop    %ebx
 8048ca9:	5e                   	pop    %esi
 8048caa:	5f                   	pop    %edi
 8048cab:	5d                   	pop    %ebp
 8048cac:	c3                   	ret    

08048cad <format_string>:
   auxiliary data AUX. */
static void
format_string (const char *string, int length,
               struct printf_conversion *c,
               void (*output) (char, void *), void *aux) 
{
 8048cad:	55                   	push   %ebp
 8048cae:	57                   	push   %edi
 8048caf:	56                   	push   %esi
 8048cb0:	53                   	push   %ebx
 8048cb1:	83 ec 1c             	sub    $0x1c,%esp
 8048cb4:	89 c5                	mov    %eax,%ebp
 8048cb6:	89 d6                	mov    %edx,%esi
 8048cb8:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
 8048cbc:	8b 7c 24 34          	mov    0x34(%esp),%edi
  int i;
  if (c->width > length && (c->flags & MINUS) == 0)
 8048cc0:	8b 51 04             	mov    0x4(%ecx),%edx
 8048cc3:	39 f2                	cmp    %esi,%edx
 8048cc5:	7e 6c                	jle    8048d33 <format_string+0x86>
 8048cc7:	f6 01 01             	testb  $0x1,(%ecx)
 8048cca:	75 61                	jne    8048d2d <format_string+0x80>
    output_dup (' ', c->width - length, output, aux);
 8048ccc:	29 f2                	sub    %esi,%edx
 8048cce:	83 ec 0c             	sub    $0xc,%esp
 8048cd1:	57                   	push   %edi
 8048cd2:	8b 4c 24 40          	mov    0x40(%esp),%ecx
 8048cd6:	b8 20 00 00 00       	mov    $0x20,%eax
 8048cdb:	e8 ac fc ff ff       	call   804898c <output_dup>
  for (i = 0; i < length; i++)
 8048ce0:	83 c4 10             	add    $0x10,%esp
 8048ce3:	85 f6                	test   %esi,%esi
 8048ce5:	7e 1d                	jle    8048d04 <format_string+0x57>
   auxiliary data AUX. */
static void
format_string (const char *string, int length,
               struct printf_conversion *c,
               void (*output) (char, void *), void *aux) 
{
 8048ce7:	bb 00 00 00 00       	mov    $0x0,%ebx
  int i;
  if (c->width > length && (c->flags & MINUS) == 0)
    output_dup (' ', c->width - length, output, aux);
  for (i = 0; i < length; i++)
    output (string[i], aux);
 8048cec:	83 ec 08             	sub    $0x8,%esp
 8048cef:	57                   	push   %edi
 8048cf0:	0f be 44 1d 00       	movsbl 0x0(%ebp,%ebx,1),%eax
 8048cf5:	50                   	push   %eax
 8048cf6:	ff 54 24 40          	call   *0x40(%esp)
               void (*output) (char, void *), void *aux) 
{
  int i;
  if (c->width > length && (c->flags & MINUS) == 0)
    output_dup (' ', c->width - length, output, aux);
  for (i = 0; i < length; i++)
 8048cfa:	83 c3 01             	add    $0x1,%ebx
 8048cfd:	83 c4 10             	add    $0x10,%esp
 8048d00:	39 de                	cmp    %ebx,%esi
 8048d02:	7f e8                	jg     8048cec <format_string+0x3f>
    output (string[i], aux);
  if (c->width > length && (c->flags & MINUS) != 0)
 8048d04:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8048d08:	8b 50 04             	mov    0x4(%eax),%edx
 8048d0b:	39 d6                	cmp    %edx,%esi
 8048d0d:	7d 28                	jge    8048d37 <format_string+0x8a>
 8048d0f:	f6 00 01             	testb  $0x1,(%eax)
 8048d12:	74 23                	je     8048d37 <format_string+0x8a>
    output_dup (' ', c->width - length, output, aux);
 8048d14:	29 f2                	sub    %esi,%edx
 8048d16:	83 ec 0c             	sub    $0xc,%esp
 8048d19:	57                   	push   %edi
 8048d1a:	8b 4c 24 40          	mov    0x40(%esp),%ecx
 8048d1e:	b8 20 00 00 00       	mov    $0x20,%eax
 8048d23:	e8 64 fc ff ff       	call   804898c <output_dup>
 8048d28:	83 c4 10             	add    $0x10,%esp
}
 8048d2b:	eb 0a                	jmp    8048d37 <format_string+0x8a>
               void (*output) (char, void *), void *aux) 
{
  int i;
  if (c->width > length && (c->flags & MINUS) == 0)
    output_dup (' ', c->width - length, output, aux);
  for (i = 0; i < length; i++)
 8048d2d:	85 f6                	test   %esi,%esi
 8048d2f:	7f b6                	jg     8048ce7 <format_string+0x3a>
 8048d31:	eb e1                	jmp    8048d14 <format_string+0x67>
 8048d33:	85 f6                	test   %esi,%esi
 8048d35:	7f b0                	jg     8048ce7 <format_string+0x3a>
    output (string[i], aux);
  if (c->width > length && (c->flags & MINUS) != 0)
    output_dup (' ', c->width - length, output, aux);
}
 8048d37:	83 c4 1c             	add    $0x1c,%esp
 8048d3a:	5b                   	pop    %ebx
 8048d3b:	5e                   	pop    %esi
 8048d3c:	5f                   	pop    %edi
 8048d3d:	5d                   	pop    %ebp
 8048d3e:	c3                   	ret    

08048d3f <printf>:
   In the kernel, the console is both the video display and first
   serial port.
   In userspace, the console is file descriptor 1. */
int
printf (const char *format, ...) 
{
 8048d3f:	83 ec 0c             	sub    $0xc,%esp
  va_list args;
  int retval;

  va_start (args, format);
 8048d42:	8d 44 24 14          	lea    0x14(%esp),%eax
  retval = vprintf (format, args);
 8048d46:	83 ec 08             	sub    $0x8,%esp
 8048d49:	50                   	push   %eax
 8048d4a:	ff 74 24 1c          	pushl  0x1c(%esp)
 8048d4e:	e8 16 16 00 00       	call   804a369 <vprintf>
  va_end (args);

  return retval;
}
 8048d53:	83 c4 1c             	add    $0x1c,%esp
 8048d56:	c3                   	ret    

08048d57 <__printf>:
/* Wrapper for __vprintf() that converts varargs into a
   va_list. */
void
__printf (const char *format,
          void (*output) (char, void *), void *aux, ...) 
{
 8048d57:	83 ec 0c             	sub    $0xc,%esp
  va_list args;

  va_start (args, aux);
 8048d5a:	8d 44 24 1c          	lea    0x1c(%esp),%eax
  __vprintf (format, args, output, aux);
 8048d5e:	ff 74 24 18          	pushl  0x18(%esp)
 8048d62:	ff 74 24 18          	pushl  0x18(%esp)
 8048d66:	50                   	push   %eax
 8048d67:	ff 74 24 1c          	pushl  0x1c(%esp)
 8048d6b:	e8 04 00 00 00       	call   8048d74 <__vprintf>
  va_end (args);
}
 8048d70:	83 c4 1c             	add    $0x1c,%esp
 8048d73:	c3                   	ret    

08048d74 <__vprintf>:
                           void (*output) (char, void *), void *aux);

void
__vprintf (const char *format, va_list args,
           void (*output) (char, void *), void *aux)
{
 8048d74:	55                   	push   %ebp
 8048d75:	57                   	push   %edi
 8048d76:	56                   	push   %esi
 8048d77:	53                   	push   %ebx
 8048d78:	83 ec 4c             	sub    $0x4c,%esp
 8048d7b:	8b 74 24 60          	mov    0x60(%esp),%esi
 8048d7f:	8b 6c 24 64          	mov    0x64(%esp),%ebp
  for (; *format != '\0'; format++)
 8048d83:	0f b6 06             	movzbl (%esi),%eax
 8048d86:	84 c0                	test   %al,%al
 8048d88:	0f 84 49 06 00 00    	je     80493d7 <__vprintf+0x663>
    {
      struct printf_conversion c;

      /* Literally copy non-conversions to output. */
      if (*format != '%') 
 8048d8e:	3c 25                	cmp    $0x25,%al
 8048d90:	74 19                	je     8048dab <__vprintf+0x37>
        {
          output (*format, aux);
 8048d92:	83 ec 08             	sub    $0x8,%esp
 8048d95:	ff 74 24 74          	pushl  0x74(%esp)
 8048d99:	0f be c0             	movsbl %al,%eax
 8048d9c:	50                   	push   %eax
 8048d9d:	ff 54 24 78          	call   *0x78(%esp)
          continue;
 8048da1:	83 c4 10             	add    $0x10,%esp
 8048da4:	89 f3                	mov    %esi,%ebx
 8048da6:	e9 12 06 00 00       	jmp    80493bd <__vprintf+0x649>
        }
      format++;
 8048dab:	8d 5e 01             	lea    0x1(%esi),%ebx

      /* %% => %. */
      if (*format == '%') 
 8048dae:	80 7e 01 25          	cmpb   $0x25,0x1(%esi)
 8048db2:	75 15                	jne    8048dc9 <__vprintf+0x55>
        {
          output ('%', aux);
 8048db4:	83 ec 08             	sub    $0x8,%esp
 8048db7:	ff 74 24 74          	pushl  0x74(%esp)
 8048dbb:	6a 25                	push   $0x25
 8048dbd:	ff 54 24 78          	call   *0x78(%esp)
          continue;
 8048dc1:	83 c4 10             	add    $0x10,%esp
 8048dc4:	e9 f4 05 00 00       	jmp    80493bd <__vprintf+0x649>
static const char *
parse_conversion (const char *format, struct printf_conversion *c,
                  va_list *args) 
{
  /* Parse flag characters. */
  c->flags = 0;
 8048dc9:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%esp)
 8048dd0:	00 
 8048dd1:	bf 00 00 00 00       	mov    $0x0,%edi
 8048dd6:	be 00 00 00 00       	mov    $0x0,%esi
 8048ddb:	eb 07                	jmp    8048de4 <__vprintf+0x70>
  for (;;) 
    {
      switch (*format++) 
 8048ddd:	89 cb                	mov    %ecx,%ebx
 8048ddf:	bf 01 00 00 00       	mov    $0x1,%edi
 8048de4:	8d 4b 01             	lea    0x1(%ebx),%ecx
 8048de7:	0f b6 41 ff          	movzbl -0x1(%ecx),%eax
 8048deb:	8d 50 e0             	lea    -0x20(%eax),%edx
 8048dee:	80 fa 10             	cmp    $0x10,%dl
 8048df1:	77 28                	ja     8048e1b <__vprintf+0xa7>
 8048df3:	0f b6 d2             	movzbl %dl,%edx
 8048df6:	ff 24 95 1c a4 04 08 	jmp    *0x804a41c(,%edx,4)
        {
        case '-':
          c->flags |= MINUS;
 8048dfd:	83 ce 01             	or     $0x1,%esi
 8048e00:	eb db                	jmp    8048ddd <__vprintf+0x69>
          break;
        case '+':
          c->flags |= PLUS;
 8048e02:	83 ce 02             	or     $0x2,%esi
 8048e05:	eb d6                	jmp    8048ddd <__vprintf+0x69>
          break;
        case ' ':
          c->flags |= SPACE;
 8048e07:	83 ce 04             	or     $0x4,%esi
 8048e0a:	eb d1                	jmp    8048ddd <__vprintf+0x69>
          break;
        case '#':
          c->flags |= POUND;
 8048e0c:	83 ce 08             	or     $0x8,%esi
 8048e0f:	eb cc                	jmp    8048ddd <__vprintf+0x69>
          break;
        case '0':
          c->flags |= ZERO;
 8048e11:	83 ce 10             	or     $0x10,%esi
 8048e14:	eb c7                	jmp    8048ddd <__vprintf+0x69>
          break;
        case '\'':
          c->flags |= GROUP;
 8048e16:	83 ce 20             	or     $0x20,%esi
 8048e19:	eb c2                	jmp    8048ddd <__vprintf+0x69>
 8048e1b:	89 fa                	mov    %edi,%edx
 8048e1d:	84 d2                	test   %dl,%dl
 8048e1f:	74 13                	je     8048e34 <__vprintf+0xc0>
 8048e21:	89 74 24 30          	mov    %esi,0x30(%esp)
          format--;
          goto not_a_flag;
        }
    }
 not_a_flag:
  if (c->flags & MINUS)
 8048e25:	f7 c6 01 00 00 00    	test   $0x1,%esi
 8048e2b:	74 07                	je     8048e34 <__vprintf+0xc0>
    c->flags &= ~ZERO;
 8048e2d:	83 e6 ef             	and    $0xffffffef,%esi
 8048e30:	89 74 24 30          	mov    %esi,0x30(%esp)
  if (c->flags & PLUS)
 8048e34:	8b 54 24 30          	mov    0x30(%esp),%edx
 8048e38:	f6 c2 02             	test   $0x2,%dl
 8048e3b:	74 07                	je     8048e44 <__vprintf+0xd0>
    c->flags &= ~SPACE;
 8048e3d:	83 e2 fb             	and    $0xfffffffb,%edx
 8048e40:	89 54 24 30          	mov    %edx,0x30(%esp)

  /* Parse field width. */
  c->width = 0;
 8048e44:	c7 44 24 34 00 00 00 	movl   $0x0,0x34(%esp)
 8048e4b:	00 
  if (*format == '*')
 8048e4c:	3c 2a                	cmp    $0x2a,%al
 8048e4e:	74 12                	je     8048e62 <__vprintf+0xee>
      format++;
      c->width = va_arg (*args, int);
    }
  else 
    {
      for (; isdigit (*format); format++)
 8048e50:	0f be d0             	movsbl %al,%edx
 8048e53:	83 ea 30             	sub    $0x30,%edx
 8048e56:	b9 00 00 00 00       	mov    $0x0,%ecx
 8048e5b:	83 fa 09             	cmp    $0x9,%edx
 8048e5e:	76 10                	jbe    8048e70 <__vprintf+0xfc>
 8048e60:	eb 40                	jmp    8048ea2 <__vprintf+0x12e>
  /* Parse field width. */
  c->width = 0;
  if (*format == '*')
    {
      format++;
      c->width = va_arg (*args, int);
 8048e62:	8b 45 00             	mov    0x0(%ebp),%eax
 8048e65:	89 44 24 34          	mov    %eax,0x34(%esp)
 8048e69:	8d 6d 04             	lea    0x4(%ebp),%ebp
{
  /* Parse flag characters. */
  c->flags = 0;
  for (;;) 
    {
      switch (*format++) 
 8048e6c:	89 cb                	mov    %ecx,%ebx
 8048e6e:	eb 1f                	jmp    8048e8f <__vprintf+0x11b>
      c->width = va_arg (*args, int);
    }
  else 
    {
      for (; isdigit (*format); format++)
        c->width = c->width * 10 + *format - '0';
 8048e70:	8d 14 89             	lea    (%ecx,%ecx,4),%edx
 8048e73:	0f be c0             	movsbl %al,%eax
 8048e76:	8d 4c 50 d0          	lea    -0x30(%eax,%edx,2),%ecx
      format++;
      c->width = va_arg (*args, int);
    }
  else 
    {
      for (; isdigit (*format); format++)
 8048e7a:	83 c3 01             	add    $0x1,%ebx
 8048e7d:	0f b6 03             	movzbl (%ebx),%eax
 8048e80:	0f be d0             	movsbl %al,%edx
 8048e83:	83 ea 30             	sub    $0x30,%edx
 8048e86:	83 fa 09             	cmp    $0x9,%edx
 8048e89:	76 e5                	jbe    8048e70 <__vprintf+0xfc>
 8048e8b:	89 4c 24 34          	mov    %ecx,0x34(%esp)
        c->width = c->width * 10 + *format - '0';
    }
  if (c->width < 0) 
 8048e8f:	8b 44 24 34          	mov    0x34(%esp),%eax
 8048e93:	85 c0                	test   %eax,%eax
 8048e95:	79 0b                	jns    8048ea2 <__vprintf+0x12e>
    {
      c->width = -c->width;
 8048e97:	f7 d8                	neg    %eax
 8048e99:	89 44 24 34          	mov    %eax,0x34(%esp)
      c->flags |= MINUS;
 8048e9d:	83 4c 24 30 01       	orl    $0x1,0x30(%esp)
    }
      
  /* Parse precision. */
  c->precision = -1;
 8048ea2:	c7 44 24 38 ff ff ff 	movl   $0xffffffff,0x38(%esp)
 8048ea9:	ff 
  if (*format == '.') 
 8048eaa:	80 3b 2e             	cmpb   $0x2e,(%ebx)
 8048ead:	0f 85 1b 05 00 00    	jne    80493ce <__vprintf+0x65a>
    {
      format++;
      if (*format == '*') 
 8048eb3:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
 8048eb7:	3c 2a                	cmp    $0x2a,%al
 8048eb9:	75 0f                	jne    8048eca <__vprintf+0x156>
        {
          format++;
 8048ebb:	83 c3 02             	add    $0x2,%ebx
          c->precision = va_arg (*args, int);
 8048ebe:	8b 45 00             	mov    0x0(%ebp),%eax
 8048ec1:	89 44 24 38          	mov    %eax,0x38(%esp)
 8048ec5:	8d 6d 04             	lea    0x4(%ebp),%ebp
 8048ec8:	eb 3a                	jmp    8048f04 <__vprintf+0x190>
      
  /* Parse precision. */
  c->precision = -1;
  if (*format == '.') 
    {
      format++;
 8048eca:	83 c3 01             	add    $0x1,%ebx
          format++;
          c->precision = va_arg (*args, int);
        }
      else 
        {
          c->precision = 0;
 8048ecd:	c7 44 24 38 00 00 00 	movl   $0x0,0x38(%esp)
 8048ed4:	00 
          for (; isdigit (*format); format++)
 8048ed5:	0f be d0             	movsbl %al,%edx
 8048ed8:	83 ea 30             	sub    $0x30,%edx
 8048edb:	83 fa 09             	cmp    $0x9,%edx
 8048ede:	77 39                	ja     8048f19 <__vprintf+0x1a5>
 8048ee0:	b9 00 00 00 00       	mov    $0x0,%ecx
            c->precision = c->precision * 10 + *format - '0';
 8048ee5:	8d 14 89             	lea    (%ecx,%ecx,4),%edx
 8048ee8:	0f be c0             	movsbl %al,%eax
 8048eeb:	8d 4c 50 d0          	lea    -0x30(%eax,%edx,2),%ecx
          c->precision = va_arg (*args, int);
        }
      else 
        {
          c->precision = 0;
          for (; isdigit (*format); format++)
 8048eef:	83 c3 01             	add    $0x1,%ebx
 8048ef2:	0f b6 03             	movzbl (%ebx),%eax
 8048ef5:	0f be d0             	movsbl %al,%edx
 8048ef8:	83 ea 30             	sub    $0x30,%edx
 8048efb:	83 fa 09             	cmp    $0x9,%edx
 8048efe:	76 e5                	jbe    8048ee5 <__vprintf+0x171>
 8048f00:	89 4c 24 38          	mov    %ecx,0x38(%esp)
            c->precision = c->precision * 10 + *format - '0';
        }
      if (c->precision < 0) 
 8048f04:	8b 4c 24 38          	mov    0x38(%esp),%ecx
 8048f08:	85 c9                	test   %ecx,%ecx
 8048f0a:	79 12                	jns    8048f1e <__vprintf+0x1aa>
        c->precision = -1;
 8048f0c:	c7 44 24 38 ff ff ff 	movl   $0xffffffff,0x38(%esp)
 8048f13:	ff 
 8048f14:	e9 b5 04 00 00       	jmp    80493ce <__vprintf+0x65a>
    }
  if (c->precision >= 0)
 8048f19:	b9 00 00 00 00       	mov    $0x0,%ecx
    c->flags &= ~ZERO;
 8048f1e:	83 64 24 30 ef       	andl   $0xffffffef,0x30(%esp)

  /* Parse type. */
  c->type = INT;
 8048f23:	c7 44 24 3c 03 00 00 	movl   $0x3,0x3c(%esp)
 8048f2a:	00 
  switch (*format++) 
 8048f2b:	8d 73 01             	lea    0x1(%ebx),%esi
 8048f2e:	0f b6 03             	movzbl (%ebx),%eax
 8048f31:	8d 50 98             	lea    -0x68(%eax),%edx
 8048f34:	80 fa 12             	cmp    $0x12,%dl
 8048f37:	0f 87 06 01 00 00    	ja     8049043 <__vprintf+0x2cf>
 8048f3d:	0f b6 d2             	movzbl %dl,%edx
 8048f40:	ff 24 95 60 a4 04 08 	jmp    *0x804a460(,%edx,4)
    {
    case 'h':
      if (*format == 'h') 
 8048f47:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
 8048f4b:	3c 68                	cmp    $0x68,%al
 8048f4d:	75 25                	jne    8048f74 <__vprintf+0x200>
        {
          format++;
 8048f4f:	8d 73 02             	lea    0x2(%ebx),%esi
          c->type = CHAR;
 8048f52:	c7 44 24 3c 01 00 00 	movl   $0x1,0x3c(%esp)
 8048f59:	00 

      /* Parse conversion specifiers. */
      format = parse_conversion (format, &c, &args);

      /* Do conversion. */
      switch (*format) 
 8048f5a:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
 8048f5e:	8d 50 bb             	lea    -0x45(%eax),%edx
 8048f61:	80 fa 33             	cmp    $0x33,%dl
 8048f64:	0f 87 38 04 00 00    	ja     80493a2 <__vprintf+0x62e>
 8048f6a:	0f b6 d2             	movzbl %dl,%edx
 8048f6d:	ff 24 95 ac a4 04 08 	jmp    *0x804a4ac(,%edx,4)
        {
          format++;
          c->type = CHAR;
        }
      else
        c->type = SHORT;
 8048f74:	c7 44 24 3c 02 00 00 	movl   $0x2,0x3c(%esp)
 8048f7b:	00 

      /* Parse conversion specifiers. */
      format = parse_conversion (format, &c, &args);

      /* Do conversion. */
      switch (*format) 
 8048f7c:	8d 50 bb             	lea    -0x45(%eax),%edx
 8048f7f:	80 fa 33             	cmp    $0x33,%dl
 8048f82:	0f 87 1a 04 00 00    	ja     80493a2 <__vprintf+0x62e>
 8048f88:	0f b6 d2             	movzbl %dl,%edx
 8048f8b:	ff 24 95 7c a5 04 08 	jmp    *0x804a57c(,%edx,4)
      else
        c->type = SHORT;
      break;
      
    case 'j':
      c->type = INTMAX;
 8048f92:	c7 44 24 3c 04 00 00 	movl   $0x4,0x3c(%esp)
 8048f99:	00 

      /* Parse conversion specifiers. */
      format = parse_conversion (format, &c, &args);

      /* Do conversion. */
      switch (*format) 
 8048f9a:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
 8048f9e:	8d 50 bb             	lea    -0x45(%eax),%edx
 8048fa1:	80 fa 33             	cmp    $0x33,%dl
 8048fa4:	0f 87 f8 03 00 00    	ja     80493a2 <__vprintf+0x62e>
 8048faa:	0f b6 d2             	movzbl %dl,%edx
 8048fad:	ff 24 95 4c a6 04 08 	jmp    *0x804a64c(,%edx,4)
    case 'j':
      c->type = INTMAX;
      break;

    case 'l':
      if (*format == 'l')
 8048fb4:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
 8048fb8:	3c 6c                	cmp    $0x6c,%al
 8048fba:	75 25                	jne    8048fe1 <__vprintf+0x26d>
        {
          format++;
 8048fbc:	8d 73 02             	lea    0x2(%ebx),%esi
          c->type = LONGLONG;
 8048fbf:	c7 44 24 3c 06 00 00 	movl   $0x6,0x3c(%esp)
 8048fc6:	00 

      /* Parse conversion specifiers. */
      format = parse_conversion (format, &c, &args);

      /* Do conversion. */
      switch (*format) 
 8048fc7:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
 8048fcb:	8d 50 bb             	lea    -0x45(%eax),%edx
 8048fce:	80 fa 33             	cmp    $0x33,%dl
 8048fd1:	0f 87 cb 03 00 00    	ja     80493a2 <__vprintf+0x62e>
 8048fd7:	0f b6 d2             	movzbl %dl,%edx
 8048fda:	ff 24 95 1c a7 04 08 	jmp    *0x804a71c(,%edx,4)
        {
          format++;
          c->type = LONGLONG;
        }
      else
        c->type = LONG;
 8048fe1:	c7 44 24 3c 05 00 00 	movl   $0x5,0x3c(%esp)
 8048fe8:	00 

      /* Parse conversion specifiers. */
      format = parse_conversion (format, &c, &args);

      /* Do conversion. */
      switch (*format) 
 8048fe9:	8d 50 bb             	lea    -0x45(%eax),%edx
 8048fec:	80 fa 33             	cmp    $0x33,%dl
 8048fef:	0f 87 ad 03 00 00    	ja     80493a2 <__vprintf+0x62e>
 8048ff5:	0f b6 d2             	movzbl %dl,%edx
 8048ff8:	ff 24 95 ec a7 04 08 	jmp    *0x804a7ec(,%edx,4)
      else
        c->type = LONG;
      break;

    case 't':
      c->type = PTRDIFFT;
 8048fff:	c7 44 24 3c 07 00 00 	movl   $0x7,0x3c(%esp)
 8049006:	00 

      /* Parse conversion specifiers. */
      format = parse_conversion (format, &c, &args);

      /* Do conversion. */
      switch (*format) 
 8049007:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
 804900b:	8d 50 bb             	lea    -0x45(%eax),%edx
 804900e:	80 fa 33             	cmp    $0x33,%dl
 8049011:	0f 87 8b 03 00 00    	ja     80493a2 <__vprintf+0x62e>
 8049017:	0f b6 d2             	movzbl %dl,%edx
 804901a:	ff 24 95 bc a8 04 08 	jmp    *0x804a8bc(,%edx,4)
    case 't':
      c->type = PTRDIFFT;
      break;

    case 'z':
      c->type = SIZET;
 8049021:	c7 44 24 3c 08 00 00 	movl   $0x8,0x3c(%esp)
 8049028:	00 

      /* Parse conversion specifiers. */
      format = parse_conversion (format, &c, &args);

      /* Do conversion. */
      switch (*format) 
 8049029:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
 804902d:	8d 50 bb             	lea    -0x45(%eax),%edx
 8049030:	80 fa 33             	cmp    $0x33,%dl
 8049033:	0f 87 69 03 00 00    	ja     80493a2 <__vprintf+0x62e>
 8049039:	0f b6 d2             	movzbl %dl,%edx
 804903c:	ff 24 95 8c a9 04 08 	jmp    *0x804a98c(,%edx,4)
 8049043:	8d 50 bb             	lea    -0x45(%eax),%edx
 8049046:	80 fa 33             	cmp    $0x33,%dl
 8049049:	0f 87 51 03 00 00    	ja     80493a0 <__vprintf+0x62c>
 804904f:	0f b6 d2             	movzbl %dl,%edx
 8049052:	ff 24 95 5c aa 04 08 	jmp    *0x804aa5c(,%edx,4)
 8049059:	89 de                	mov    %ebx,%esi
        case 'i': 
          {
            /* Signed integer conversions. */
            intmax_t value;
            
            switch (c.type) 
 804905b:	83 7c 24 3c 08       	cmpl   $0x8,0x3c(%esp)
 8049060:	0f 87 c4 00 00 00    	ja     804912a <__vprintf+0x3b6>
 8049066:	8b 44 24 3c          	mov    0x3c(%esp),%eax
 804906a:	ff 24 85 2c ab 04 08 	jmp    *0x804ab2c(,%eax,4)
              {
              case CHAR: 
                value = (signed char) va_arg (args, int);
 8049071:	0f be 4d 00          	movsbl 0x0(%ebp),%ecx
 8049075:	89 c8                	mov    %ecx,%eax
 8049077:	99                   	cltd   
 8049078:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804907c:	89 54 24 0c          	mov    %edx,0xc(%esp)
 8049080:	8d 6d 04             	lea    0x4(%ebp),%ebp
                break;
 8049083:	e9 bb 00 00 00       	jmp    8049143 <__vprintf+0x3cf>
              case SHORT:
                value = (short) va_arg (args, int);
 8049088:	0f bf 4d 00          	movswl 0x0(%ebp),%ecx
 804908c:	89 c8                	mov    %ecx,%eax
 804908e:	99                   	cltd   
 804908f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049093:	89 54 24 0c          	mov    %edx,0xc(%esp)
 8049097:	8d 6d 04             	lea    0x4(%ebp),%ebp
                break;
 804909a:	e9 a4 00 00 00       	jmp    8049143 <__vprintf+0x3cf>
              case INT:
                value = va_arg (args, int);
 804909f:	8b 4d 00             	mov    0x0(%ebp),%ecx
 80490a2:	89 c8                	mov    %ecx,%eax
 80490a4:	99                   	cltd   
 80490a5:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80490a9:	89 54 24 0c          	mov    %edx,0xc(%esp)
 80490ad:	8d 6d 04             	lea    0x4(%ebp),%ebp
                break;
 80490b0:	e9 8e 00 00 00       	jmp    8049143 <__vprintf+0x3cf>
              case INTMAX:
                value = va_arg (args, intmax_t);
 80490b5:	8b 45 00             	mov    0x0(%ebp),%eax
 80490b8:	8b 55 04             	mov    0x4(%ebp),%edx
 80490bb:	89 44 24 08          	mov    %eax,0x8(%esp)
 80490bf:	89 54 24 0c          	mov    %edx,0xc(%esp)
 80490c3:	8d 6d 08             	lea    0x8(%ebp),%ebp
                break;
 80490c6:	eb 7b                	jmp    8049143 <__vprintf+0x3cf>
              case LONG:
                value = va_arg (args, long);
 80490c8:	8b 4d 00             	mov    0x0(%ebp),%ecx
 80490cb:	89 c8                	mov    %ecx,%eax
 80490cd:	99                   	cltd   
 80490ce:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80490d2:	89 54 24 0c          	mov    %edx,0xc(%esp)
 80490d6:	8d 6d 04             	lea    0x4(%ebp),%ebp
                break;
 80490d9:	eb 68                	jmp    8049143 <__vprintf+0x3cf>
              case LONGLONG:
                value = va_arg (args, long long);
 80490db:	8b 45 00             	mov    0x0(%ebp),%eax
 80490de:	8b 55 04             	mov    0x4(%ebp),%edx
 80490e1:	89 44 24 08          	mov    %eax,0x8(%esp)
 80490e5:	89 54 24 0c          	mov    %edx,0xc(%esp)
 80490e9:	8d 6d 08             	lea    0x8(%ebp),%ebp
                break;
 80490ec:	eb 55                	jmp    8049143 <__vprintf+0x3cf>
              case PTRDIFFT:
                value = va_arg (args, ptrdiff_t);
 80490ee:	8b 4d 00             	mov    0x0(%ebp),%ecx
 80490f1:	89 c8                	mov    %ecx,%eax
 80490f3:	99                   	cltd   
 80490f4:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80490f8:	89 54 24 0c          	mov    %edx,0xc(%esp)
 80490fc:	8d 6d 04             	lea    0x4(%ebp),%ebp
                break;
 80490ff:	eb 42                	jmp    8049143 <__vprintf+0x3cf>
              case SIZET:
                value = va_arg (args, size_t);
 8049101:	8d 45 04             	lea    0x4(%ebp),%eax
 8049104:	8b 7d 00             	mov    0x0(%ebp),%edi
 8049107:	bd 00 00 00 00       	mov    $0x0,%ebp
 804910c:	89 7c 24 08          	mov    %edi,0x8(%esp)
 8049110:	89 6c 24 0c          	mov    %ebp,0xc(%esp)
 8049114:	89 c5                	mov    %eax,%ebp
                if (value > SIZE_MAX / 2)
 8049116:	81 ff ff ff ff 7f    	cmp    $0x7fffffff,%edi
 804911c:	76 25                	jbe    8049143 <__vprintf+0x3cf>
                  value = value - SIZE_MAX - 1;
 804911e:	83 44 24 08 00       	addl   $0x0,0x8(%esp)
 8049123:	83 54 24 0c ff       	adcl   $0xffffffff,0xc(%esp)
 8049128:	eb 19                	jmp    8049143 <__vprintf+0x3cf>
                break;
              default:
                NOT_REACHED ();
 804912a:	68 c4 ad 04 08       	push   $0x804adc4
 804912f:	68 50 ab 04 08       	push   $0x804ab50
 8049134:	68 dc 00 00 00       	push   $0xdc
 8049139:	68 7d af 04 08       	push   $0x804af7d
 804913e:	e8 95 0f 00 00       	call   804a0d8 <debug_panic>
              }

            format_integer (value < 0 ? -value : value,
 8049143:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049147:	8b 5c 24 0c          	mov    0xc(%esp),%ebx
 804914b:	89 da                	mov    %ebx,%edx
 804914d:	c1 fa 1f             	sar    $0x1f,%edx
 8049150:	89 d7                	mov    %edx,%edi
 8049152:	31 cf                	xor    %ecx,%edi
 8049154:	89 7c 24 10          	mov    %edi,0x10(%esp)
 8049158:	89 d7                	mov    %edx,%edi
 804915a:	33 7c 24 0c          	xor    0xc(%esp),%edi
 804915e:	89 7c 24 14          	mov    %edi,0x14(%esp)
 8049162:	8b 4c 24 10          	mov    0x10(%esp),%ecx
 8049166:	8b 5c 24 14          	mov    0x14(%esp),%ebx
 804916a:	29 d1                	sub    %edx,%ecx
 804916c:	19 d3                	sbb    %edx,%ebx
 804916e:	89 c8                	mov    %ecx,%eax
 8049170:	89 da                	mov    %ebx,%edx
 8049172:	83 ec 0c             	sub    $0xc,%esp
 8049175:	ff 74 24 78          	pushl  0x78(%esp)
 8049179:	ff 74 24 78          	pushl  0x78(%esp)
 804917d:	8d 7c 24 44          	lea    0x44(%esp),%edi
 8049181:	57                   	push   %edi
 8049182:	68 8c ab 04 08       	push   $0x804ab8c
 8049187:	8b 4c 24 28          	mov    0x28(%esp),%ecx
 804918b:	c1 e9 1f             	shr    $0x1f,%ecx
 804918e:	51                   	push   %ecx
 804918f:	b9 01 00 00 00       	mov    $0x1,%ecx
 8049194:	e8 20 f8 ff ff       	call   80489b9 <format_integer>
                            true, value < 0, &base_d, &c, output, aux);
          }
          break;
 8049199:	83 c4 20             	add    $0x20,%esp
 804919c:	89 f3                	mov    %esi,%ebx
 804919e:	e9 1a 02 00 00       	jmp    80493bd <__vprintf+0x649>
                break;
              case SHORT:
                value = (unsigned short) va_arg (args, unsigned);
                break;
              case INT:
                value = va_arg (args, unsigned);
 80491a3:	8b 75 00             	mov    0x0(%ebp),%esi
 80491a6:	bf 00 00 00 00       	mov    $0x0,%edi
 80491ab:	89 74 24 18          	mov    %esi,0x18(%esp)
 80491af:	89 7c 24 1c          	mov    %edi,0x1c(%esp)
 80491b3:	8d 6d 04             	lea    0x4(%ebp),%ebp
                break;
 80491b6:	e9 9d 00 00 00       	jmp    8049258 <__vprintf+0x4e4>
            const struct integer_base *b;

            switch (c.type) 
              {
              case CHAR: 
                value = (unsigned char) va_arg (args, unsigned);
 80491bb:	0f b6 55 00          	movzbl 0x0(%ebp),%edx
 80491bf:	89 54 24 18          	mov    %edx,0x18(%esp)
 80491c3:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
 80491ca:	00 
                break;
 80491cb:	89 f3                	mov    %esi,%ebx
            const struct integer_base *b;

            switch (c.type) 
              {
              case CHAR: 
                value = (unsigned char) va_arg (args, unsigned);
 80491cd:	8d 6d 04             	lea    0x4(%ebp),%ebp
                break;
 80491d0:	e9 83 00 00 00       	jmp    8049258 <__vprintf+0x4e4>
              case SHORT:
                value = (unsigned short) va_arg (args, unsigned);
 80491d5:	0f b7 55 00          	movzwl 0x0(%ebp),%edx
 80491d9:	89 54 24 18          	mov    %edx,0x18(%esp)
 80491dd:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
 80491e4:	00 
                break;
 80491e5:	89 f3                	mov    %esi,%ebx
              {
              case CHAR: 
                value = (unsigned char) va_arg (args, unsigned);
                break;
              case SHORT:
                value = (unsigned short) va_arg (args, unsigned);
 80491e7:	8d 6d 04             	lea    0x4(%ebp),%ebp
                break;
 80491ea:	eb 6c                	jmp    8049258 <__vprintf+0x4e4>
              case INT:
                value = va_arg (args, unsigned);
                break;
              case INTMAX:
                value = va_arg (args, uintmax_t);
 80491ec:	8b 4d 00             	mov    0x0(%ebp),%ecx
 80491ef:	8b 5d 04             	mov    0x4(%ebp),%ebx
 80491f2:	89 4c 24 18          	mov    %ecx,0x18(%esp)
 80491f6:	89 5c 24 1c          	mov    %ebx,0x1c(%esp)
                break;
 80491fa:	89 f3                	mov    %esi,%ebx
                break;
              case INT:
                value = va_arg (args, unsigned);
                break;
              case INTMAX:
                value = va_arg (args, uintmax_t);
 80491fc:	8d 6d 08             	lea    0x8(%ebp),%ebp
                break;
 80491ff:	eb 57                	jmp    8049258 <__vprintf+0x4e4>
              case LONG:
                value = va_arg (args, unsigned long);
 8049201:	8b 4d 00             	mov    0x0(%ebp),%ecx
 8049204:	bb 00 00 00 00       	mov    $0x0,%ebx
 8049209:	89 4c 24 18          	mov    %ecx,0x18(%esp)
 804920d:	89 5c 24 1c          	mov    %ebx,0x1c(%esp)
                break;
 8049211:	89 f3                	mov    %esi,%ebx
                break;
              case INTMAX:
                value = va_arg (args, uintmax_t);
                break;
              case LONG:
                value = va_arg (args, unsigned long);
 8049213:	8d 6d 04             	lea    0x4(%ebp),%ebp
                break;
 8049216:	eb 40                	jmp    8049258 <__vprintf+0x4e4>
              case LONGLONG:
                value = va_arg (args, unsigned long long);
 8049218:	8b 4d 00             	mov    0x0(%ebp),%ecx
 804921b:	8b 5d 04             	mov    0x4(%ebp),%ebx
 804921e:	89 4c 24 18          	mov    %ecx,0x18(%esp)
 8049222:	89 5c 24 1c          	mov    %ebx,0x1c(%esp)
                break;
 8049226:	89 f3                	mov    %esi,%ebx
                break;
              case LONG:
                value = va_arg (args, unsigned long);
                break;
              case LONGLONG:
                value = va_arg (args, unsigned long long);
 8049228:	8d 6d 08             	lea    0x8(%ebp),%ebp
                break;
 804922b:	eb 2b                	jmp    8049258 <__vprintf+0x4e4>
              case PTRDIFFT:
                value = va_arg (args, ptrdiff_t);
#if UINTMAX_MAX != PTRDIFF_MAX
                value &= ((uintmax_t) PTRDIFF_MAX << 1) | 1;
 804922d:	8b 7d 00             	mov    0x0(%ebp),%edi
 8049230:	89 7c 24 18          	mov    %edi,0x18(%esp)
 8049234:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
 804923b:	00 
#endif
                break;
 804923c:	89 f3                	mov    %esi,%ebx
                break;
              case LONGLONG:
                value = va_arg (args, unsigned long long);
                break;
              case PTRDIFFT:
                value = va_arg (args, ptrdiff_t);
 804923e:	8d 6d 04             	lea    0x4(%ebp),%ebp
#if UINTMAX_MAX != PTRDIFF_MAX
                value &= ((uintmax_t) PTRDIFF_MAX << 1) | 1;
#endif
                break;
 8049241:	eb 15                	jmp    8049258 <__vprintf+0x4e4>
              case SIZET:
                value = va_arg (args, size_t);
 8049243:	8b 4d 00             	mov    0x0(%ebp),%ecx
 8049246:	bb 00 00 00 00       	mov    $0x0,%ebx
 804924b:	89 4c 24 18          	mov    %ecx,0x18(%esp)
 804924f:	89 5c 24 1c          	mov    %ebx,0x1c(%esp)
                break;
 8049253:	89 f3                	mov    %esi,%ebx
#if UINTMAX_MAX != PTRDIFF_MAX
                value &= ((uintmax_t) PTRDIFF_MAX << 1) | 1;
#endif
                break;
              case SIZET:
                value = va_arg (args, size_t);
 8049255:	8d 6d 04             	lea    0x4(%ebp),%ebp
                break;
              default:
                NOT_REACHED ();
              }

            switch (*format) 
 8049258:	3c 6f                	cmp    $0x6f,%al
 804925a:	74 3b                	je     8049297 <__vprintf+0x523>
 804925c:	3c 6f                	cmp    $0x6f,%al
 804925e:	7f 06                	jg     8049266 <__vprintf+0x4f2>
 8049260:	3c 58                	cmp    $0x58,%al
 8049262:	74 13                	je     8049277 <__vprintf+0x503>
 8049264:	eb 18                	jmp    804927e <__vprintf+0x50a>
 8049266:	3c 75                	cmp    $0x75,%al
 8049268:	74 06                	je     8049270 <__vprintf+0x4fc>
 804926a:	3c 78                	cmp    $0x78,%al
 804926c:	74 30                	je     804929e <__vprintf+0x52a>
 804926e:	eb 0e                	jmp    804927e <__vprintf+0x50a>
              {
              case 'o': b = &base_o; break;
              case 'u': b = &base_d; break;
 8049270:	b8 8c ab 04 08       	mov    $0x804ab8c,%eax
 8049275:	eb 2c                	jmp    80492a3 <__vprintf+0x52f>
              case 'x': b = &base_x; break;
              case 'X': b = &base_X; break;
 8049277:	b8 5c ab 04 08       	mov    $0x804ab5c,%eax
 804927c:	eb 25                	jmp    80492a3 <__vprintf+0x52f>
              default: NOT_REACHED ();
 804927e:	68 c4 ad 04 08       	push   $0x804adc4
 8049283:	68 50 ab 04 08       	push   $0x804ab50
 8049288:	68 14 01 00 00       	push   $0x114
 804928d:	68 7d af 04 08       	push   $0x804af7d
 8049292:	e8 41 0e 00 00       	call   804a0d8 <debug_panic>
                NOT_REACHED ();
              }

            switch (*format) 
              {
              case 'o': b = &base_o; break;
 8049297:	b8 7c ab 04 08       	mov    $0x804ab7c,%eax
 804929c:	eb 05                	jmp    80492a3 <__vprintf+0x52f>
              case 'u': b = &base_d; break;
              case 'x': b = &base_x; break;
 804929e:	b8 6c ab 04 08       	mov    $0x804ab6c,%eax
              case 'X': b = &base_X; break;
              default: NOT_REACHED ();
              }

            format_integer (value, false, false, b, &c, output, aux);
 80492a3:	83 ec 0c             	sub    $0xc,%esp
 80492a6:	ff 74 24 78          	pushl  0x78(%esp)
 80492aa:	ff 74 24 78          	pushl  0x78(%esp)
 80492ae:	8d 7c 24 44          	lea    0x44(%esp),%edi
 80492b2:	57                   	push   %edi
 80492b3:	50                   	push   %eax
 80492b4:	6a 00                	push   $0x0
 80492b6:	b9 00 00 00 00       	mov    $0x0,%ecx
 80492bb:	8b 44 24 38          	mov    0x38(%esp),%eax
 80492bf:	8b 54 24 3c          	mov    0x3c(%esp),%edx
 80492c3:	e8 f1 f6 ff ff       	call   80489b9 <format_integer>
          }
          break;
 80492c8:	83 c4 20             	add    $0x20,%esp
 80492cb:	e9 ed 00 00 00       	jmp    80493bd <__vprintf+0x649>

      /* Parse conversion specifiers. */
      format = parse_conversion (format, &c, &args);

      /* Do conversion. */
      switch (*format) 
 80492d0:	89 de                	mov    %ebx,%esi
          break;

        case 'c': 
          {
            /* Treat character as single-character string. */
            char ch = va_arg (args, int);
 80492d2:	8d 7d 04             	lea    0x4(%ebp),%edi
 80492d5:	8b 45 00             	mov    0x0(%ebp),%eax
 80492d8:	88 44 24 2f          	mov    %al,0x2f(%esp)
            format_string (&ch, 1, &c, output, aux);
 80492dc:	83 ec 08             	sub    $0x8,%esp
 80492df:	ff 74 24 74          	pushl  0x74(%esp)
 80492e3:	ff 74 24 74          	pushl  0x74(%esp)
 80492e7:	8d 4c 24 40          	lea    0x40(%esp),%ecx
 80492eb:	ba 01 00 00 00       	mov    $0x1,%edx
 80492f0:	8d 44 24 3f          	lea    0x3f(%esp),%eax
 80492f4:	e8 b4 f9 ff ff       	call   8048cad <format_string>
          }
          break;
 80492f9:	83 c4 10             	add    $0x10,%esp
 80492fc:	89 f3                	mov    %esi,%ebx
          break;

        case 'c': 
          {
            /* Treat character as single-character string. */
            char ch = va_arg (args, int);
 80492fe:	89 fd                	mov    %edi,%ebp
            format_string (&ch, 1, &c, output, aux);
          }
          break;
 8049300:	e9 b8 00 00 00       	jmp    80493bd <__vprintf+0x649>

      /* Parse conversion specifiers. */
      format = parse_conversion (format, &c, &args);

      /* Do conversion. */
      switch (*format) 
 8049305:	89 de                	mov    %ebx,%esi
          break;

        case 's':
          {
            /* String conversion. */
            const char *s = va_arg (args, char *);
 8049307:	8d 7d 04             	lea    0x4(%ebp),%edi
 804930a:	8b 5d 00             	mov    0x0(%ebp),%ebx
            if (s == NULL)
              s = "(null)";
 804930d:	85 db                	test   %ebx,%ebx
 804930f:	b8 76 af 04 08       	mov    $0x804af76,%eax
 8049314:	0f 44 d8             	cmove  %eax,%ebx

            /* Limit string length according to precision.
               Note: if c.precision == -1 then strnlen() will get
               SIZE_MAX for MAXLEN, which is just what we want. */
            format_string (s, strnlen (s, c.precision), &c, output, aux);
 8049317:	83 ec 08             	sub    $0x8,%esp
 804931a:	51                   	push   %ecx
 804931b:	53                   	push   %ebx
 804931c:	e8 d9 09 00 00       	call   8049cfa <strnlen>
 8049321:	83 c4 08             	add    $0x8,%esp
 8049324:	ff 74 24 74          	pushl  0x74(%esp)
 8049328:	ff 74 24 74          	pushl  0x74(%esp)
 804932c:	8d 4c 24 40          	lea    0x40(%esp),%ecx
 8049330:	89 c2                	mov    %eax,%edx
 8049332:	89 d8                	mov    %ebx,%eax
 8049334:	e8 74 f9 ff ff       	call   8048cad <format_string>
          }
          break;
 8049339:	83 c4 10             	add    $0x10,%esp
 804933c:	89 f3                	mov    %esi,%ebx
          break;

        case 's':
          {
            /* String conversion. */
            const char *s = va_arg (args, char *);
 804933e:	89 fd                	mov    %edi,%ebp
            /* Limit string length according to precision.
               Note: if c.precision == -1 then strnlen() will get
               SIZE_MAX for MAXLEN, which is just what we want. */
            format_string (s, strnlen (s, c.precision), &c, output, aux);
          }
          break;
 8049340:	eb 7b                	jmp    80493bd <__vprintf+0x649>

      /* Parse conversion specifiers. */
      format = parse_conversion (format, &c, &args);

      /* Do conversion. */
      switch (*format) 
 8049342:	89 de                	mov    %ebx,%esi
          
        case 'p':
          {
            /* Pointer conversion.
               Format pointers as %#x. */
            void *p = va_arg (args, void *);
 8049344:	8d 7d 04             	lea    0x4(%ebp),%edi
 8049347:	8b 45 00             	mov    0x0(%ebp),%eax

            c.flags = POUND;
 804934a:	c7 44 24 30 08 00 00 	movl   $0x8,0x30(%esp)
 8049351:	00 
            format_integer ((uintptr_t) p, false, false,
 8049352:	ba 00 00 00 00       	mov    $0x0,%edx
 8049357:	83 ec 0c             	sub    $0xc,%esp
 804935a:	ff 74 24 78          	pushl  0x78(%esp)
 804935e:	ff 74 24 78          	pushl  0x78(%esp)
 8049362:	8d 4c 24 44          	lea    0x44(%esp),%ecx
 8049366:	51                   	push   %ecx
 8049367:	68 6c ab 04 08       	push   $0x804ab6c
 804936c:	6a 00                	push   $0x0
 804936e:	b9 00 00 00 00       	mov    $0x0,%ecx
 8049373:	e8 41 f6 ff ff       	call   80489b9 <format_integer>
                            &base_x, &c, output, aux);
          }
          break;
 8049378:	83 c4 20             	add    $0x20,%esp
 804937b:	89 f3                	mov    %esi,%ebx
          
        case 'p':
          {
            /* Pointer conversion.
               Format pointers as %#x. */
            void *p = va_arg (args, void *);
 804937d:	89 fd                	mov    %edi,%ebp

            c.flags = POUND;
            format_integer ((uintptr_t) p, false, false,
                            &base_x, &c, output, aux);
          }
          break;
 804937f:	eb 3c                	jmp    80493bd <__vprintf+0x649>

      /* Parse conversion specifiers. */
      format = parse_conversion (format, &c, &args);

      /* Do conversion. */
      switch (*format) 
 8049381:	89 de                	mov    %ebx,%esi
        case 'g':
        case 'G':
        case 'n':
          /* We don't support floating-point arithmetic,
             and %n can be part of a security hole. */
          __printf ("<<no %%%c in kernel>>", output, aux, *format);
 8049383:	0f be c0             	movsbl %al,%eax
 8049386:	50                   	push   %eax
 8049387:	ff 74 24 70          	pushl  0x70(%esp)
 804938b:	ff 74 24 70          	pushl  0x70(%esp)
 804938f:	68 8f af 04 08       	push   $0x804af8f
 8049394:	e8 be f9 ff ff       	call   8048d57 <__printf>
          break;
 8049399:	83 c4 10             	add    $0x10,%esp
 804939c:	89 f3                	mov    %esi,%ebx
 804939e:	eb 1d                	jmp    80493bd <__vprintf+0x649>

      /* Parse conversion specifiers. */
      format = parse_conversion (format, &c, &args);

      /* Do conversion. */
      switch (*format) 
 80493a0:	89 de                	mov    %ebx,%esi
             and %n can be part of a security hole. */
          __printf ("<<no %%%c in kernel>>", output, aux, *format);
          break;

        default:
          __printf ("<<no %%%c conversion>>", output, aux, *format);
 80493a2:	0f be c0             	movsbl %al,%eax
 80493a5:	50                   	push   %eax
 80493a6:	ff 74 24 70          	pushl  0x70(%esp)
 80493aa:	ff 74 24 70          	pushl  0x70(%esp)
 80493ae:	68 a5 af 04 08       	push   $0x804afa5
 80493b3:	e8 9f f9 ff ff       	call   8048d57 <__printf>
          break;
 80493b8:	83 c4 10             	add    $0x10,%esp
 80493bb:	89 f3                	mov    %esi,%ebx

void
__vprintf (const char *format, va_list args,
           void (*output) (char, void *), void *aux)
{
  for (; *format != '\0'; format++)
 80493bd:	8d 73 01             	lea    0x1(%ebx),%esi
 80493c0:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
 80493c4:	84 c0                	test   %al,%al
 80493c6:	0f 85 c2 f9 ff ff    	jne    8048d8e <__vprintf+0x1a>
 80493cc:	eb 09                	jmp    80493d7 <__vprintf+0x663>
            c->precision = c->precision * 10 + *format - '0';
        }
      if (c->precision < 0) 
        c->precision = -1;
    }
  if (c->precision >= 0)
 80493ce:	8b 4c 24 38          	mov    0x38(%esp),%ecx
 80493d2:	e9 4c fb ff ff       	jmp    8048f23 <__vprintf+0x1af>
        default:
          __printf ("<<no %%%c conversion>>", output, aux, *format);
          break;
        }
    }
}
 80493d7:	83 c4 4c             	add    $0x4c,%esp
 80493da:	5b                   	pop    %ebx
 80493db:	5e                   	pop    %esi
 80493dc:	5f                   	pop    %edi
 80493dd:	5d                   	pop    %ebp
 80493de:	c3                   	ret    

080493df <vsnprintf>:
   BUF_SIZE is zero.  Returns the number of characters that would
   have been written to BUFFER, not including a null terminator,
   had there been enough room. */
int
vsnprintf (char *buffer, size_t buf_size, const char *format, va_list args) 
{
 80493df:	53                   	push   %ebx
 80493e0:	83 ec 18             	sub    $0x18,%esp
 80493e3:	8b 44 24 24          	mov    0x24(%esp),%eax
 80493e7:	8b 54 24 28          	mov    0x28(%esp),%edx
 80493eb:	8b 4c 24 2c          	mov    0x2c(%esp),%ecx
  /* Set up aux data for vsnprintf_helper(). */
  struct vsnprintf_aux aux;
  aux.p = buffer;
 80493ef:	8b 5c 24 20          	mov    0x20(%esp),%ebx
 80493f3:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  aux.length = 0;
 80493f7:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 80493fe:	00 
  aux.max_length = buf_size > 0 ? buf_size - 1 : 0;
 80493ff:	85 c0                	test   %eax,%eax
 8049401:	74 24                	je     8049427 <vsnprintf+0x48>
 8049403:	83 e8 01             	sub    $0x1,%eax
 8049406:	89 44 24 0c          	mov    %eax,0xc(%esp)

  /* Do most of the work. */
  __vprintf (format, args, vsnprintf_helper, &aux);
 804940a:	8d 44 24 04          	lea    0x4(%esp),%eax
 804940e:	50                   	push   %eax
 804940f:	68 6a 89 04 08       	push   $0x804896a
 8049414:	51                   	push   %ecx
 8049415:	52                   	push   %edx
 8049416:	e8 59 f9 ff ff       	call   8048d74 <__vprintf>

  /* Add null terminator. */
  if (buf_size > 0)
    *aux.p = '\0';
 804941b:	8b 44 24 14          	mov    0x14(%esp),%eax
 804941f:	c6 00 00             	movb   $0x0,(%eax)
 8049422:	83 c4 10             	add    $0x10,%esp
 8049425:	eb 1c                	jmp    8049443 <vsnprintf+0x64>
{
  /* Set up aux data for vsnprintf_helper(). */
  struct vsnprintf_aux aux;
  aux.p = buffer;
  aux.length = 0;
  aux.max_length = buf_size > 0 ? buf_size - 1 : 0;
 8049427:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
 804942e:	00 

  /* Do most of the work. */
  __vprintf (format, args, vsnprintf_helper, &aux);
 804942f:	8d 44 24 04          	lea    0x4(%esp),%eax
 8049433:	50                   	push   %eax
 8049434:	68 6a 89 04 08       	push   $0x804896a
 8049439:	51                   	push   %ecx
 804943a:	52                   	push   %edx
 804943b:	e8 34 f9 ff ff       	call   8048d74 <__vprintf>
 8049440:	83 c4 10             	add    $0x10,%esp

  /* Add null terminator. */
  if (buf_size > 0)
    *aux.p = '\0';

  return aux.length;
 8049443:	8b 44 24 08          	mov    0x8(%esp),%eax
}
 8049447:	83 c4 18             	add    $0x18,%esp
 804944a:	5b                   	pop    %ebx
 804944b:	c3                   	ret    

0804944c <snprintf>:
   BUF_SIZE is zero.  Returns the number of characters that would
   have been written to BUFFER, not including a null terminator,
   had there been enough room. */
int
snprintf (char *buffer, size_t buf_size, const char *format, ...) 
{
 804944c:	83 ec 0c             	sub    $0xc,%esp
  va_list args;
  int retval;

  va_start (args, format);
 804944f:	8d 44 24 1c          	lea    0x1c(%esp),%eax
  retval = vsnprintf (buffer, buf_size, format, args);
 8049453:	50                   	push   %eax
 8049454:	ff 74 24 1c          	pushl  0x1c(%esp)
 8049458:	ff 74 24 1c          	pushl  0x1c(%esp)
 804945c:	ff 74 24 1c          	pushl  0x1c(%esp)
 8049460:	e8 7a ff ff ff       	call   80493df <vsnprintf>
  va_end (args);

  return retval;
}
 8049465:	83 c4 1c             	add    $0x1c,%esp
 8049468:	c3                   	ret    

08049469 <hex_dump>:
   starting at OFS for the first byte in BUF.  If ASCII is true
   then the corresponding ASCII characters are also rendered
   alongside. */   
void
hex_dump (uintptr_t ofs, const void *buf_, size_t size, bool ascii)
{
 8049469:	55                   	push   %ebp
 804946a:	57                   	push   %edi
 804946b:	56                   	push   %esi
 804946c:	53                   	push   %ebx
 804946d:	83 ec 1c             	sub    $0x1c,%esp
 8049470:	0f b6 44 24 3c       	movzbl 0x3c(%esp),%eax
 8049475:	88 44 24 0f          	mov    %al,0xf(%esp)
  const uint8_t *buf = buf_;
  const size_t per_line = 16; /* Maximum bytes per line. */

  while (size > 0)
 8049479:	83 7c 24 38 00       	cmpl   $0x0,0x38(%esp)
 804947e:	0f 84 cb 01 00 00    	je     804964f <hex_dump+0x1e6>
    {
      size_t start, end, n;
      size_t i;
      
      /* Number of bytes on this line. */
      start = ofs % per_line;
 8049484:	8b 74 24 30          	mov    0x30(%esp),%esi
 8049488:	83 e6 0f             	and    $0xf,%esi
      end = per_line;
      if (end - start > size)
 804948b:	b8 10 00 00 00       	mov    $0x10,%eax
 8049490:	29 f0                	sub    %esi,%eax
 8049492:	89 44 24 08          	mov    %eax,0x8(%esp)
 8049496:	3b 44 24 38          	cmp    0x38(%esp),%eax
 804949a:	0f 86 6e 01 00 00    	jbe    804960e <hex_dump+0x1a5>
        end = start + size;
 80494a0:	89 f7                	mov    %esi,%edi
 80494a2:	03 7c 24 38          	add    0x38(%esp),%edi
      n = end - start;

      /* Print line. */
      printf ("%08jx  ", (uintmax_t) ROUND_DOWN (ofs, per_line));
 80494a6:	83 ec 04             	sub    $0x4,%esp
 80494a9:	8b 44 24 34          	mov    0x34(%esp),%eax
 80494ad:	83 e0 f0             	and    $0xfffffff0,%eax
 80494b0:	ba 00 00 00 00       	mov    $0x0,%edx
 80494b5:	52                   	push   %edx
 80494b6:	50                   	push   %eax
 80494b7:	68 bc af 04 08       	push   $0x804afbc
 80494bc:	e8 7e f8 ff ff       	call   8048d3f <printf>
      for (i = 0; i < start; i++)
 80494c1:	83 c4 10             	add    $0x10,%esp
 80494c4:	85 f6                	test   %esi,%esi
 80494c6:	74 26                	je     80494ee <hex_dump+0x85>
      /* Number of bytes on this line. */
      start = ofs % per_line;
      end = per_line;
      if (end - start > size)
        end = start + size;
      n = end - start;
 80494c8:	8b 44 24 38          	mov    0x38(%esp),%eax
 80494cc:	89 44 24 08          	mov    %eax,0x8(%esp)
      size_t start, end, n;
      size_t i;
      
      /* Number of bytes on this line. */
      start = ofs % per_line;
      end = per_line;
 80494d0:	bb 00 00 00 00       	mov    $0x0,%ebx
      n = end - start;

      /* Print line. */
      printf ("%08jx  ", (uintmax_t) ROUND_DOWN (ofs, per_line));
      for (i = 0; i < start; i++)
        printf ("   ");
 80494d5:	83 ec 0c             	sub    $0xc,%esp
 80494d8:	68 c4 af 04 08       	push   $0x804afc4
 80494dd:	e8 5d f8 ff ff       	call   8048d3f <printf>
        end = start + size;
      n = end - start;

      /* Print line. */
      printf ("%08jx  ", (uintmax_t) ROUND_DOWN (ofs, per_line));
      for (i = 0; i < start; i++)
 80494e2:	83 c3 01             	add    $0x1,%ebx
 80494e5:	83 c4 10             	add    $0x10,%esp
 80494e8:	39 de                	cmp    %ebx,%esi
 80494ea:	77 e9                	ja     80494d5 <hex_dump+0x6c>
 80494ec:	eb 0a                	jmp    80494f8 <hex_dump+0x8f>
      /* Number of bytes on this line. */
      start = ofs % per_line;
      end = per_line;
      if (end - start > size)
        end = start + size;
      n = end - start;
 80494ee:	8b 44 24 38          	mov    0x38(%esp),%eax
 80494f2:	89 44 24 08          	mov    %eax,0x8(%esp)

      /* Print line. */
      printf ("%08jx  ", (uintmax_t) ROUND_DOWN (ofs, per_line));
      for (i = 0; i < start; i++)
 80494f6:	89 f3                	mov    %esi,%ebx
        printf ("   ");
      for (; i < end; i++) 
 80494f8:	39 df                	cmp    %ebx,%edi
 80494fa:	76 34                	jbe    8049530 <hex_dump+0xc7>
        printf ("%02hhx%c",
                buf[i - start], i == per_line / 2 - 1? '-' : ' ');
 80494fc:	8b 6c 24 34          	mov    0x34(%esp),%ebp
 8049500:	29 f5                	sub    %esi,%ebp
      /* Print line. */
      printf ("%08jx  ", (uintmax_t) ROUND_DOWN (ofs, per_line));
      for (i = 0; i < start; i++)
        printf ("   ");
      for (; i < end; i++) 
        printf ("%02hhx%c",
 8049502:	83 fb 07             	cmp    $0x7,%ebx
 8049505:	b8 20 00 00 00       	mov    $0x20,%eax
 804950a:	b9 2d 00 00 00       	mov    $0x2d,%ecx
 804950f:	0f 44 c1             	cmove  %ecx,%eax
 8049512:	83 ec 04             	sub    $0x4,%esp
 8049515:	50                   	push   %eax
 8049516:	0f b6 44 1d 00       	movzbl 0x0(%ebp,%ebx,1),%eax
 804951b:	50                   	push   %eax
 804951c:	68 c8 af 04 08       	push   $0x804afc8
 8049521:	e8 19 f8 ff ff       	call   8048d3f <printf>

      /* Print line. */
      printf ("%08jx  ", (uintmax_t) ROUND_DOWN (ofs, per_line));
      for (i = 0; i < start; i++)
        printf ("   ");
      for (; i < end; i++) 
 8049526:	83 c3 01             	add    $0x1,%ebx
 8049529:	83 c4 10             	add    $0x10,%esp
 804952c:	39 fb                	cmp    %edi,%ebx
 804952e:	72 d2                	jb     8049502 <hex_dump+0x99>
        printf ("%02hhx%c",
                buf[i - start], i == per_line / 2 - 1? '-' : ' ');
      if (ascii) 
 8049530:	80 7c 24 0f 00       	cmpb   $0x0,0xf(%esp)
 8049535:	0f 84 ae 00 00 00    	je     80495e9 <hex_dump+0x180>
        {
          for (; i < per_line; i++)
 804953b:	83 fb 0f             	cmp    $0xf,%ebx
 804953e:	77 18                	ja     8049558 <hex_dump+0xef>
            printf ("   ");
 8049540:	83 ec 0c             	sub    $0xc,%esp
 8049543:	68 c4 af 04 08       	push   $0x804afc4
 8049548:	e8 f2 f7 ff ff       	call   8048d3f <printf>
      for (; i < end; i++) 
        printf ("%02hhx%c",
                buf[i - start], i == per_line / 2 - 1? '-' : ' ');
      if (ascii) 
        {
          for (; i < per_line; i++)
 804954d:	83 c3 01             	add    $0x1,%ebx
 8049550:	83 c4 10             	add    $0x10,%esp
 8049553:	83 fb 10             	cmp    $0x10,%ebx
 8049556:	75 e8                	jne    8049540 <hex_dump+0xd7>
            printf ("   ");
          printf ("|");
 8049558:	83 ec 0c             	sub    $0xc,%esp
 804955b:	6a 7c                	push   $0x7c
 804955d:	e8 6d 0d 00 00       	call   804a2cf <putchar>
          for (i = 0; i < start; i++)
 8049562:	83 c4 10             	add    $0x10,%esp
 8049565:	85 f6                	test   %esi,%esi
 8049567:	0f 84 d3 00 00 00    	je     8049640 <hex_dump+0x1d7>
 804956d:	bb 00 00 00 00       	mov    $0x0,%ebx
            printf (" ");
 8049572:	83 ec 0c             	sub    $0xc,%esp
 8049575:	6a 20                	push   $0x20
 8049577:	e8 53 0d 00 00       	call   804a2cf <putchar>
      if (ascii) 
        {
          for (; i < per_line; i++)
            printf ("   ");
          printf ("|");
          for (i = 0; i < start; i++)
 804957c:	83 c3 01             	add    $0x1,%ebx
 804957f:	83 c4 10             	add    $0x10,%esp
 8049582:	39 de                	cmp    %ebx,%esi
 8049584:	75 ec                	jne    8049572 <hex_dump+0x109>
            printf (" ");
          for (; i < end; i++)
 8049586:	39 fe                	cmp    %edi,%esi
 8049588:	73 36                	jae    80495c0 <hex_dump+0x157>
      if (ascii) 
        {
          for (; i < per_line; i++)
            printf ("   ");
          printf ("|");
          for (i = 0; i < start; i++)
 804958a:	89 f3                	mov    %esi,%ebx
            printf (" ");
          for (; i < end; i++)
            printf ("%c",
                    isprint (buf[i - start]) ? buf[i - start] : '.');
 804958c:	8b 6c 24 34          	mov    0x34(%esp),%ebp
 8049590:	29 f5                	sub    %esi,%ebp
            printf ("   ");
          printf ("|");
          for (i = 0; i < start; i++)
            printf (" ");
          for (; i < end; i++)
            printf ("%c",
 8049592:	be 2e 00 00 00       	mov    $0x2e,%esi
                    isprint (buf[i - start]) ? buf[i - start] : '.');
 8049597:	0f b6 44 1d 00       	movzbl 0x0(%ebp,%ebx,1),%eax
            printf ("   ");
          printf ("|");
          for (i = 0; i < start; i++)
            printf (" ");
          for (; i < end; i++)
            printf ("%c",
 804959c:	0f b6 d0             	movzbl %al,%edx
 804959f:	83 ea 20             	sub    $0x20,%edx
 80495a2:	0f b6 c0             	movzbl %al,%eax
 80495a5:	83 fa 5e             	cmp    $0x5e,%edx
 80495a8:	0f 47 c6             	cmova  %esi,%eax
 80495ab:	83 ec 0c             	sub    $0xc,%esp
 80495ae:	50                   	push   %eax
 80495af:	e8 1b 0d 00 00       	call   804a2cf <putchar>
          for (; i < per_line; i++)
            printf ("   ");
          printf ("|");
          for (i = 0; i < start; i++)
            printf (" ");
          for (; i < end; i++)
 80495b4:	83 c3 01             	add    $0x1,%ebx
 80495b7:	83 c4 10             	add    $0x10,%esp
 80495ba:	39 fb                	cmp    %edi,%ebx
 80495bc:	72 d9                	jb     8049597 <hex_dump+0x12e>
 80495be:	eb 02                	jmp    80495c2 <hex_dump+0x159>
      if (ascii) 
        {
          for (; i < per_line; i++)
            printf ("   ");
          printf ("|");
          for (i = 0; i < start; i++)
 80495c0:	89 f3                	mov    %esi,%ebx
            printf (" ");
          for (; i < end; i++)
            printf ("%c",
                    isprint (buf[i - start]) ? buf[i - start] : '.');
          for (; i < per_line; i++)
 80495c2:	83 fb 0f             	cmp    $0xf,%ebx
 80495c5:	77 15                	ja     80495dc <hex_dump+0x173>
            printf (" ");
 80495c7:	83 ec 0c             	sub    $0xc,%esp
 80495ca:	6a 20                	push   $0x20
 80495cc:	e8 fe 0c 00 00       	call   804a2cf <putchar>
          for (i = 0; i < start; i++)
            printf (" ");
          for (; i < end; i++)
            printf ("%c",
                    isprint (buf[i - start]) ? buf[i - start] : '.');
          for (; i < per_line; i++)
 80495d1:	83 c3 01             	add    $0x1,%ebx
 80495d4:	83 c4 10             	add    $0x10,%esp
 80495d7:	83 fb 0f             	cmp    $0xf,%ebx
 80495da:	76 eb                	jbe    80495c7 <hex_dump+0x15e>
            printf (" ");
          printf ("|");
 80495dc:	83 ec 0c             	sub    $0xc,%esp
 80495df:	6a 7c                	push   $0x7c
 80495e1:	e8 e9 0c 00 00       	call   804a2cf <putchar>
 80495e6:	83 c4 10             	add    $0x10,%esp
        }
      printf ("\n");
 80495e9:	83 ec 0c             	sub    $0xc,%esp
 80495ec:	6a 0a                	push   $0xa
 80495ee:	e8 dc 0c 00 00       	call   804a2cf <putchar>

      ofs += n;
 80495f3:	8b 44 24 18          	mov    0x18(%esp),%eax
 80495f7:	01 44 24 40          	add    %eax,0x40(%esp)
      buf += n;
 80495fb:	01 44 24 44          	add    %eax,0x44(%esp)
hex_dump (uintptr_t ofs, const void *buf_, size_t size, bool ascii)
{
  const uint8_t *buf = buf_;
  const size_t per_line = 16; /* Maximum bytes per line. */

  while (size > 0)
 80495ff:	83 c4 10             	add    $0x10,%esp
 8049602:	29 44 24 38          	sub    %eax,0x38(%esp)
 8049606:	0f 85 78 fe ff ff    	jne    8049484 <hex_dump+0x1b>
 804960c:	eb 41                	jmp    804964f <hex_dump+0x1e6>
      if (end - start > size)
        end = start + size;
      n = end - start;

      /* Print line. */
      printf ("%08jx  ", (uintmax_t) ROUND_DOWN (ofs, per_line));
 804960e:	83 ec 04             	sub    $0x4,%esp
 8049611:	8b 44 24 34          	mov    0x34(%esp),%eax
 8049615:	83 e0 f0             	and    $0xfffffff0,%eax
 8049618:	ba 00 00 00 00       	mov    $0x0,%edx
 804961d:	52                   	push   %edx
 804961e:	50                   	push   %eax
 804961f:	68 bc af 04 08       	push   $0x804afbc
 8049624:	e8 16 f7 ff ff       	call   8048d3f <printf>
      for (i = 0; i < start; i++)
 8049629:	83 c4 10             	add    $0x10,%esp
      size_t start, end, n;
      size_t i;
      
      /* Number of bytes on this line. */
      start = ofs % per_line;
      end = per_line;
 804962c:	bf 10 00 00 00       	mov    $0x10,%edi
        end = start + size;
      n = end - start;

      /* Print line. */
      printf ("%08jx  ", (uintmax_t) ROUND_DOWN (ofs, per_line));
      for (i = 0; i < start; i++)
 8049631:	89 f3                	mov    %esi,%ebx
 8049633:	85 f6                	test   %esi,%esi
 8049635:	0f 84 c1 fe ff ff    	je     80494fc <hex_dump+0x93>
 804963b:	e9 90 fe ff ff       	jmp    80494d0 <hex_dump+0x67>
      if (ascii) 
        {
          for (; i < per_line; i++)
            printf ("   ");
          printf ("|");
          for (i = 0; i < start; i++)
 8049640:	89 f3                	mov    %esi,%ebx
            printf (" ");
          for (; i < end; i++)
 8049642:	85 ff                	test   %edi,%edi
 8049644:	0f 85 42 ff ff ff    	jne    804958c <hex_dump+0x123>
 804964a:	e9 78 ff ff ff       	jmp    80495c7 <hex_dump+0x15e>

      ofs += n;
      buf += n;
      size -= n;
    }
}
 804964f:	83 c4 1c             	add    $0x1c,%esp
 8049652:	5b                   	pop    %ebx
 8049653:	5e                   	pop    %esi
 8049654:	5f                   	pop    %edi
 8049655:	5d                   	pop    %ebp
 8049656:	c3                   	ret    

08049657 <print_human_readable_size>:

/* Prints SIZE, which represents a number of bytes, in a
   human-readable format, e.g. "256 kB". */
void
print_human_readable_size (uint64_t size) 
{
 8049657:	57                   	push   %edi
 8049658:	56                   	push   %esi
 8049659:	83 ec 04             	sub    $0x4,%esp
 804965c:	8b 74 24 10          	mov    0x10(%esp),%esi
 8049660:	8b 7c 24 14          	mov    0x14(%esp),%edi
  if (size == 1)
 8049664:	89 f0                	mov    %esi,%eax
 8049666:	83 f0 01             	xor    $0x1,%eax
 8049669:	09 f8                	or     %edi,%eax
 804966b:	74 22                	je     804968f <print_human_readable_size+0x38>
  else 
    {
      static const char *factors[] = {"bytes", "kB", "MB", "GB", "TB", NULL};
      const char **fp;

      for (fp = factors; size >= 1024 && fp[1] != NULL; fp++)
 804966d:	83 ff 00             	cmp    $0x0,%edi
 8049670:	77 0d                	ja     804967f <print_human_readable_size+0x28>
 8049672:	b9 54 c1 04 08       	mov    $0x804c154,%ecx
 8049677:	81 fe ff 03 00 00    	cmp    $0x3ff,%esi
 804967d:	76 46                	jbe    80496c5 <print_human_readable_size+0x6e>
 804967f:	b9 54 c1 04 08       	mov    $0x804c154,%ecx
 8049684:	83 3d 58 c1 04 08 00 	cmpl   $0x0,0x804c158
 804968b:	75 14                	jne    80496a1 <print_human_readable_size+0x4a>
 804968d:	eb 36                	jmp    80496c5 <print_human_readable_size+0x6e>
   human-readable format, e.g. "256 kB". */
void
print_human_readable_size (uint64_t size) 
{
  if (size == 1)
    printf ("1 byte");
 804968f:	83 ec 0c             	sub    $0xc,%esp
 8049692:	68 d1 af 04 08       	push   $0x804afd1
 8049697:	e8 a3 f6 ff ff       	call   8048d3f <printf>
 804969c:	83 c4 10             	add    $0x10,%esp
 804969f:	eb 35                	jmp    80496d6 <print_human_readable_size+0x7f>
    {
      static const char *factors[] = {"bytes", "kB", "MB", "GB", "TB", NULL};
      const char **fp;

      for (fp = factors; size >= 1024 && fp[1] != NULL; fp++)
        size /= 1024;
 80496a1:	89 f0                	mov    %esi,%eax
 80496a3:	89 fa                	mov    %edi,%edx
 80496a5:	0f ac f8 0a          	shrd   $0xa,%edi,%eax
 80496a9:	c1 ea 0a             	shr    $0xa,%edx
 80496ac:	89 c6                	mov    %eax,%esi
 80496ae:	89 d7                	mov    %edx,%edi
  else 
    {
      static const char *factors[] = {"bytes", "kB", "MB", "GB", "TB", NULL};
      const char **fp;

      for (fp = factors; size >= 1024 && fp[1] != NULL; fp++)
 80496b0:	83 c1 04             	add    $0x4,%ecx
 80496b3:	83 fa 00             	cmp    $0x0,%edx
 80496b6:	77 07                	ja     80496bf <print_human_readable_size+0x68>
 80496b8:	3d ff 03 00 00       	cmp    $0x3ff,%eax
 80496bd:	76 06                	jbe    80496c5 <print_human_readable_size+0x6e>
 80496bf:	83 79 04 00          	cmpl   $0x0,0x4(%ecx)
 80496c3:	75 dc                	jne    80496a1 <print_human_readable_size+0x4a>
        size /= 1024;
      printf ("%"PRIu64" %s", size, *fp);
 80496c5:	ff 31                	pushl  (%ecx)
 80496c7:	57                   	push   %edi
 80496c8:	56                   	push   %esi
 80496c9:	68 d8 af 04 08       	push   $0x804afd8
 80496ce:	e8 6c f6 ff ff       	call   8048d3f <printf>
 80496d3:	83 c4 10             	add    $0x10,%esp
    }
}
 80496d6:	83 c4 04             	add    $0x4,%esp
 80496d9:	5e                   	pop    %esi
 80496da:	5f                   	pop    %edi
 80496db:	c3                   	ret    

080496dc <memcpy>:

/* Copies SIZE bytes from SRC to DST, which must not overlap.
   Returns DST. */
void *
memcpy (void *dst_, const void *src_, size_t size) 
{
 80496dc:	56                   	push   %esi
 80496dd:	53                   	push   %ebx
 80496de:	83 ec 04             	sub    $0x4,%esp
 80496e1:	8b 44 24 10          	mov    0x10(%esp),%eax
 80496e5:	8b 74 24 14          	mov    0x14(%esp),%esi
 80496e9:	8b 5c 24 18          	mov    0x18(%esp),%ebx
  unsigned char *dst = dst_;
  const unsigned char *src = src_;

  ASSERT (dst != NULL || size == 0);
 80496ed:	85 db                	test   %ebx,%ebx
 80496ef:	0f 94 c2             	sete   %dl
 80496f2:	85 c0                	test   %eax,%eax
 80496f4:	75 22                	jne    8049718 <memcpy+0x3c>
 80496f6:	84 d2                	test   %dl,%dl
 80496f8:	75 1e                	jne    8049718 <memcpy+0x3c>
 80496fa:	83 ec 0c             	sub    $0xc,%esp
 80496fd:	68 28 b0 04 08       	push   $0x804b028
 8049702:	68 41 b0 04 08       	push   $0x804b041
 8049707:	68 f0 ab 04 08       	push   $0x804abf0
 804970c:	6a 0c                	push   $0xc
 804970e:	68 58 b0 04 08       	push   $0x804b058
 8049713:	e8 c0 09 00 00       	call   804a0d8 <debug_panic>
  ASSERT (src != NULL || size == 0);
 8049718:	85 f6                	test   %esi,%esi
 804971a:	75 04                	jne    8049720 <memcpy+0x44>
 804971c:	84 d2                	test   %dl,%dl
 804971e:	74 0b                	je     804972b <memcpy+0x4f>

  while (size-- > 0)
 8049720:	ba 00 00 00 00       	mov    $0x0,%edx
 8049725:	85 db                	test   %ebx,%ebx
 8049727:	75 20                	jne    8049749 <memcpy+0x6d>
 8049729:	eb 2c                	jmp    8049757 <memcpy+0x7b>
{
  unsigned char *dst = dst_;
  const unsigned char *src = src_;

  ASSERT (dst != NULL || size == 0);
  ASSERT (src != NULL || size == 0);
 804972b:	83 ec 0c             	sub    $0xc,%esp
 804972e:	68 6b b0 04 08       	push   $0x804b06b
 8049733:	68 41 b0 04 08       	push   $0x804b041
 8049738:	68 f0 ab 04 08       	push   $0x804abf0
 804973d:	6a 0d                	push   $0xd
 804973f:	68 58 b0 04 08       	push   $0x804b058
 8049744:	e8 8f 09 00 00       	call   804a0d8 <debug_panic>

  while (size-- > 0)
    *dst++ = *src++;
 8049749:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
 804974d:	88 0c 10             	mov    %cl,(%eax,%edx,1)
 8049750:	83 c2 01             	add    $0x1,%edx
  const unsigned char *src = src_;

  ASSERT (dst != NULL || size == 0);
  ASSERT (src != NULL || size == 0);

  while (size-- > 0)
 8049753:	39 da                	cmp    %ebx,%edx
 8049755:	75 f2                	jne    8049749 <memcpy+0x6d>
    *dst++ = *src++;

  return dst_;
}
 8049757:	83 c4 04             	add    $0x4,%esp
 804975a:	5b                   	pop    %ebx
 804975b:	5e                   	pop    %esi
 804975c:	c3                   	ret    

0804975d <memmove>:

/* Copies SIZE bytes from SRC to DST, which are allowed to
   overlap.  Returns DST. */
void *
memmove (void *dst_, const void *src_, size_t size) 
{
 804975d:	57                   	push   %edi
 804975e:	56                   	push   %esi
 804975f:	53                   	push   %ebx
 8049760:	8b 44 24 10          	mov    0x10(%esp),%eax
 8049764:	8b 5c 24 14          	mov    0x14(%esp),%ebx
 8049768:	8b 7c 24 18          	mov    0x18(%esp),%edi
  unsigned char *dst = dst_;
  const unsigned char *src = src_;

  ASSERT (dst != NULL || size == 0);
 804976c:	85 ff                	test   %edi,%edi
 804976e:	0f 94 c2             	sete   %dl
 8049771:	85 c0                	test   %eax,%eax
 8049773:	75 22                	jne    8049797 <memmove+0x3a>
 8049775:	84 d2                	test   %dl,%dl
 8049777:	75 1e                	jne    8049797 <memmove+0x3a>
 8049779:	83 ec 0c             	sub    $0xc,%esp
 804977c:	68 28 b0 04 08       	push   $0x804b028
 8049781:	68 41 b0 04 08       	push   $0x804b041
 8049786:	68 e8 ab 04 08       	push   $0x804abe8
 804978b:	6a 1d                	push   $0x1d
 804978d:	68 58 b0 04 08       	push   $0x804b058
 8049792:	e8 41 09 00 00       	call   804a0d8 <debug_panic>
  ASSERT (src != NULL || size == 0);
 8049797:	85 db                	test   %ebx,%ebx
 8049799:	75 22                	jne    80497bd <memmove+0x60>
 804979b:	84 d2                	test   %dl,%dl
 804979d:	75 1e                	jne    80497bd <memmove+0x60>
 804979f:	83 ec 0c             	sub    $0xc,%esp
 80497a2:	68 6b b0 04 08       	push   $0x804b06b
 80497a7:	68 41 b0 04 08       	push   $0x804b041
 80497ac:	68 e8 ab 04 08       	push   $0x804abe8
 80497b1:	6a 1e                	push   $0x1e
 80497b3:	68 58 b0 04 08       	push   $0x804b058
 80497b8:	e8 1b 09 00 00       	call   804a0d8 <debug_panic>

  if (dst < src) 
 80497bd:	39 d8                	cmp    %ebx,%eax
 80497bf:	73 1b                	jae    80497dc <memmove+0x7f>
    {
      while (size-- > 0)
 80497c1:	85 ff                	test   %edi,%edi
 80497c3:	74 38                	je     80497fd <memmove+0xa0>
 80497c5:	ba 00 00 00 00       	mov    $0x0,%edx
        *dst++ = *src++;
 80497ca:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
 80497ce:	88 0c 10             	mov    %cl,(%eax,%edx,1)
 80497d1:	83 c2 01             	add    $0x1,%edx
  ASSERT (dst != NULL || size == 0);
  ASSERT (src != NULL || size == 0);

  if (dst < src) 
    {
      while (size-- > 0)
 80497d4:	39 fa                	cmp    %edi,%edx
 80497d6:	75 f2                	jne    80497ca <memmove+0x6d>
 80497d8:	01 f8                	add    %edi,%eax
 80497da:	eb 21                	jmp    80497fd <memmove+0xa0>
        *dst++ = *src++;
    }
  else 
    {
      dst += size;
 80497dc:	8d 34 38             	lea    (%eax,%edi,1),%esi
      src += size;
      while (size-- > 0)
 80497df:	8d 57 ff             	lea    -0x1(%edi),%edx
 80497e2:	85 ff                	test   %edi,%edi
 80497e4:	74 15                	je     80497fb <memmove+0x9e>
 80497e6:	89 f0                	mov    %esi,%eax
 80497e8:	29 f8                	sub    %edi,%eax
        *--dst = *--src;
 80497ea:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
 80497ee:	88 0c 10             	mov    %cl,(%eax,%edx,1)
    }
  else 
    {
      dst += size;
      src += size;
      while (size-- > 0)
 80497f1:	83 ea 01             	sub    $0x1,%edx
 80497f4:	83 fa ff             	cmp    $0xffffffff,%edx
 80497f7:	75 ed                	jne    80497e6 <memmove+0x89>
 80497f9:	eb 02                	jmp    80497fd <memmove+0xa0>
      while (size-- > 0)
        *dst++ = *src++;
    }
  else 
    {
      dst += size;
 80497fb:	89 f0                	mov    %esi,%eax
      while (size-- > 0)
        *--dst = *--src;
    }

  return dst;
}
 80497fd:	5b                   	pop    %ebx
 80497fe:	5e                   	pop    %esi
 80497ff:	5f                   	pop    %edi
 8049800:	c3                   	ret    

08049801 <memcmp>:
   at A and B.  Returns a positive value if the byte in A is
   greater, a negative value if the byte in B is greater, or zero
   if blocks A and B are equal. */
int
memcmp (const void *a_, const void *b_, size_t size) 
{
 8049801:	57                   	push   %edi
 8049802:	56                   	push   %esi
 8049803:	53                   	push   %ebx
 8049804:	8b 5c 24 10          	mov    0x10(%esp),%ebx
 8049808:	8b 74 24 14          	mov    0x14(%esp),%esi
 804980c:	8b 44 24 18          	mov    0x18(%esp),%eax
  const unsigned char *a = a_;
  const unsigned char *b = b_;

  ASSERT (a != NULL || size == 0);
 8049810:	85 c0                	test   %eax,%eax
 8049812:	0f 94 c2             	sete   %dl
 8049815:	85 db                	test   %ebx,%ebx
 8049817:	75 22                	jne    804983b <memcmp+0x3a>
 8049819:	84 d2                	test   %dl,%dl
 804981b:	75 1e                	jne    804983b <memcmp+0x3a>
 804981d:	83 ec 0c             	sub    $0xc,%esp
 8049820:	68 84 b0 04 08       	push   $0x804b084
 8049825:	68 41 b0 04 08       	push   $0x804b041
 804982a:	68 e0 ab 04 08       	push   $0x804abe0
 804982f:	6a 3a                	push   $0x3a
 8049831:	68 58 b0 04 08       	push   $0x804b058
 8049836:	e8 9d 08 00 00       	call   804a0d8 <debug_panic>
  ASSERT (b != NULL || size == 0);
 804983b:	85 f6                	test   %esi,%esi
 804983d:	75 04                	jne    8049843 <memcmp+0x42>
 804983f:	84 d2                	test   %dl,%dl
 8049841:	74 18                	je     804985b <memcmp+0x5a>

  for (; size-- > 0; a++, b++)
 8049843:	8d 78 ff             	lea    -0x1(%eax),%edi
 8049846:	85 c0                	test   %eax,%eax
 8049848:	74 56                	je     80498a0 <memcmp+0x9f>
    if (*a != *b)
 804984a:	0f b6 13             	movzbl (%ebx),%edx
 804984d:	0f b6 0e             	movzbl (%esi),%ecx
 8049850:	38 ca                	cmp    %cl,%dl
 8049852:	75 35                	jne    8049889 <memcmp+0x88>
 8049854:	b8 00 00 00 00       	mov    $0x0,%eax
 8049859:	eb 3a                	jmp    8049895 <memcmp+0x94>
{
  const unsigned char *a = a_;
  const unsigned char *b = b_;

  ASSERT (a != NULL || size == 0);
  ASSERT (b != NULL || size == 0);
 804985b:	83 ec 0c             	sub    $0xc,%esp
 804985e:	68 9b b0 04 08       	push   $0x804b09b
 8049863:	68 41 b0 04 08       	push   $0x804b041
 8049868:	68 e0 ab 04 08       	push   $0x804abe0
 804986d:	6a 3b                	push   $0x3b
 804986f:	68 58 b0 04 08       	push   $0x804b058
 8049874:	e8 5f 08 00 00       	call   804a0d8 <debug_panic>

  for (; size-- > 0; a++, b++)
    if (*a != *b)
 8049879:	0f b6 54 03 01       	movzbl 0x1(%ebx,%eax,1),%edx
 804987e:	83 c0 01             	add    $0x1,%eax
 8049881:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
 8049885:	38 ca                	cmp    %cl,%dl
 8049887:	74 0c                	je     8049895 <memcmp+0x94>
      return *a > *b ? +1 : -1;
 8049889:	38 d1                	cmp    %dl,%cl
 804988b:	19 c0                	sbb    %eax,%eax
 804988d:	83 e0 02             	and    $0x2,%eax
 8049890:	83 e8 01             	sub    $0x1,%eax
 8049893:	eb 10                	jmp    80498a5 <memcmp+0xa4>
  const unsigned char *b = b_;

  ASSERT (a != NULL || size == 0);
  ASSERT (b != NULL || size == 0);

  for (; size-- > 0; a++, b++)
 8049895:	39 f8                	cmp    %edi,%eax
 8049897:	75 e0                	jne    8049879 <memcmp+0x78>
    if (*a != *b)
      return *a > *b ? +1 : -1;
  return 0;
 8049899:	b8 00 00 00 00       	mov    $0x0,%eax
 804989e:	eb 05                	jmp    80498a5 <memcmp+0xa4>
 80498a0:	b8 00 00 00 00       	mov    $0x0,%eax
}
 80498a5:	5b                   	pop    %ebx
 80498a6:	5e                   	pop    %esi
 80498a7:	5f                   	pop    %edi
 80498a8:	c3                   	ret    

080498a9 <strcmp>:
   char) is greater, a negative value if the character in B (as
   an unsigned char) is greater, or zero if strings A and B are
   equal. */
int
strcmp (const char *a_, const char *b_) 
{
 80498a9:	83 ec 0c             	sub    $0xc,%esp
 80498ac:	8b 4c 24 10          	mov    0x10(%esp),%ecx
 80498b0:	8b 54 24 14          	mov    0x14(%esp),%edx
  const unsigned char *a = (const unsigned char *) a_;
  const unsigned char *b = (const unsigned char *) b_;

  ASSERT (a != NULL);
 80498b4:	85 c9                	test   %ecx,%ecx
 80498b6:	75 1e                	jne    80498d6 <strcmp+0x2d>
 80498b8:	83 ec 0c             	sub    $0xc,%esp
 80498bb:	68 b2 b0 04 08       	push   $0x804b0b2
 80498c0:	68 41 b0 04 08       	push   $0x804b041
 80498c5:	68 d8 ab 04 08       	push   $0x804abd8
 80498ca:	6a 4e                	push   $0x4e
 80498cc:	68 58 b0 04 08       	push   $0x804b058
 80498d1:	e8 02 08 00 00       	call   804a0d8 <debug_panic>
  ASSERT (b != NULL);
 80498d6:	85 d2                	test   %edx,%edx
 80498d8:	74 0d                	je     80498e7 <strcmp+0x3e>

  while (*a != '\0' && *a == *b) 
 80498da:	0f b6 01             	movzbl (%ecx),%eax
 80498dd:	84 c0                	test   %al,%al
 80498df:	74 35                	je     8049916 <strcmp+0x6d>
 80498e1:	3a 02                	cmp    (%edx),%al
 80498e3:	74 20                	je     8049905 <strcmp+0x5c>
 80498e5:	eb 2f                	jmp    8049916 <strcmp+0x6d>
{
  const unsigned char *a = (const unsigned char *) a_;
  const unsigned char *b = (const unsigned char *) b_;

  ASSERT (a != NULL);
  ASSERT (b != NULL);
 80498e7:	83 ec 0c             	sub    $0xc,%esp
 80498ea:	68 bc b0 04 08       	push   $0x804b0bc
 80498ef:	68 41 b0 04 08       	push   $0x804b041
 80498f4:	68 d8 ab 04 08       	push   $0x804abd8
 80498f9:	6a 4f                	push   $0x4f
 80498fb:	68 58 b0 04 08       	push   $0x804b058
 8049900:	e8 d3 07 00 00       	call   804a0d8 <debug_panic>

  while (*a != '\0' && *a == *b) 
    {
      a++;
 8049905:	83 c1 01             	add    $0x1,%ecx
      b++;
 8049908:	83 c2 01             	add    $0x1,%edx
  const unsigned char *b = (const unsigned char *) b_;

  ASSERT (a != NULL);
  ASSERT (b != NULL);

  while (*a != '\0' && *a == *b) 
 804990b:	0f b6 01             	movzbl (%ecx),%eax
 804990e:	84 c0                	test   %al,%al
 8049910:	74 04                	je     8049916 <strcmp+0x6d>
 8049912:	3a 02                	cmp    (%edx),%al
 8049914:	74 ef                	je     8049905 <strcmp+0x5c>
    {
      a++;
      b++;
    }

  return *a < *b ? -1 : *a > *b;
 8049916:	0f b6 12             	movzbl (%edx),%edx
 8049919:	38 c2                	cmp    %al,%dl
 804991b:	77 08                	ja     8049925 <strcmp+0x7c>
 804991d:	0f 92 c0             	setb   %al
 8049920:	0f b6 c0             	movzbl %al,%eax
 8049923:	eb 05                	jmp    804992a <strcmp+0x81>
 8049925:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
 804992a:	83 c4 0c             	add    $0xc,%esp
 804992d:	c3                   	ret    

0804992e <memchr>:
/* Returns a pointer to the first occurrence of CH in the first
   SIZE bytes starting at BLOCK.  Returns a null pointer if CH
   does not occur in BLOCK. */
void *
memchr (const void *block_, int ch_, size_t size) 
{
 804992e:	53                   	push   %ebx
 804992f:	83 ec 08             	sub    $0x8,%esp
 8049932:	8b 44 24 10          	mov    0x10(%esp),%eax
 8049936:	8b 54 24 14          	mov    0x14(%esp),%edx
 804993a:	8b 4c 24 18          	mov    0x18(%esp),%ecx
  const unsigned char *block = block_;
  unsigned char ch = ch_;
 804993e:	89 d3                	mov    %edx,%ebx

  ASSERT (block != NULL || size == 0);
 8049940:	85 c0                	test   %eax,%eax
 8049942:	75 04                	jne    8049948 <memchr+0x1a>
 8049944:	85 c9                	test   %ecx,%ecx
 8049946:	75 0f                	jne    8049957 <memchr+0x29>

  for (; size-- > 0; block++)
 8049948:	85 c9                	test   %ecx,%ecx
 804994a:	74 3e                	je     804998a <memchr+0x5c>
    if (*block == ch)
 804994c:	3a 10                	cmp    (%eax),%dl
 804994e:	74 3f                	je     804998f <memchr+0x61>
 8049950:	8d 50 01             	lea    0x1(%eax),%edx
 8049953:	01 c1                	add    %eax,%ecx
 8049955:	eb 26                	jmp    804997d <memchr+0x4f>
memchr (const void *block_, int ch_, size_t size) 
{
  const unsigned char *block = block_;
  unsigned char ch = ch_;

  ASSERT (block != NULL || size == 0);
 8049957:	83 ec 0c             	sub    $0xc,%esp
 804995a:	68 c6 b0 04 08       	push   $0x804b0c6
 804995f:	68 41 b0 04 08       	push   $0x804b041
 8049964:	68 d0 ab 04 08       	push   $0x804abd0
 8049969:	6a 63                	push   $0x63
 804996b:	68 58 b0 04 08       	push   $0x804b058
 8049970:	e8 63 07 00 00       	call   804a0d8 <debug_panic>
 8049975:	83 c2 01             	add    $0x1,%edx

  for (; size-- > 0; block++)
    if (*block == ch)
 8049978:	3a 5a ff             	cmp    -0x1(%edx),%bl
 804997b:	74 12                	je     804998f <memchr+0x61>
  const unsigned char *block = block_;
  unsigned char ch = ch_;

  ASSERT (block != NULL || size == 0);

  for (; size-- > 0; block++)
 804997d:	89 d0                	mov    %edx,%eax
 804997f:	39 ca                	cmp    %ecx,%edx
 8049981:	75 f2                	jne    8049975 <memchr+0x47>
    if (*block == ch)
      return (void *) block;

  return NULL;
 8049983:	b8 00 00 00 00       	mov    $0x0,%eax
 8049988:	eb 05                	jmp    804998f <memchr+0x61>
 804998a:	b8 00 00 00 00       	mov    $0x0,%eax
}
 804998f:	83 c4 08             	add    $0x8,%esp
 8049992:	5b                   	pop    %ebx
 8049993:	c3                   	ret    

08049994 <strchr>:
   null pointer if C does not appear in STRING.  If C == '\0'
   then returns a pointer to the null terminator at the end of
   STRING. */
char *
strchr (const char *string, int c_) 
{
 8049994:	53                   	push   %ebx
 8049995:	83 ec 08             	sub    $0x8,%esp
 8049998:	8b 44 24 10          	mov    0x10(%esp),%eax
 804999c:	8b 54 24 14          	mov    0x14(%esp),%edx
  char c = c_;

  ASSERT (string != NULL);
 80499a0:	85 c0                	test   %eax,%eax
 80499a2:	74 0b                	je     80499af <strchr+0x1b>
 80499a4:	89 d1                	mov    %edx,%ecx

  for (;;) 
    if (*string == c)
 80499a6:	0f b6 18             	movzbl (%eax),%ebx
 80499a9:	38 da                	cmp    %bl,%dl
 80499ab:	75 20                	jne    80499cd <strchr+0x39>
 80499ad:	eb 40                	jmp    80499ef <strchr+0x5b>
char *
strchr (const char *string, int c_) 
{
  char c = c_;

  ASSERT (string != NULL);
 80499af:	83 ec 0c             	sub    $0xc,%esp
 80499b2:	68 e1 b0 04 08       	push   $0x804b0e1
 80499b7:	68 41 b0 04 08       	push   $0x804b041
 80499bc:	68 c8 ab 04 08       	push   $0x804abc8
 80499c1:	6a 75                	push   $0x75
 80499c3:	68 58 b0 04 08       	push   $0x804b058
 80499c8:	e8 0b 07 00 00       	call   804a0d8 <debug_panic>

  for (;;) 
    if (*string == c)
      return (char *) string;
    else if (*string == '\0')
 80499cd:	84 db                	test   %bl,%bl
 80499cf:	75 06                	jne    80499d7 <strchr+0x43>
 80499d1:	eb 10                	jmp    80499e3 <strchr+0x4f>
 80499d3:	84 d2                	test   %dl,%dl
 80499d5:	74 13                	je     80499ea <strchr+0x56>
      return NULL;
    else
      string++;
 80499d7:	83 c0 01             	add    $0x1,%eax
  char c = c_;

  ASSERT (string != NULL);

  for (;;) 
    if (*string == c)
 80499da:	0f b6 10             	movzbl (%eax),%edx
 80499dd:	38 d1                	cmp    %dl,%cl
 80499df:	75 f2                	jne    80499d3 <strchr+0x3f>
 80499e1:	eb 0c                	jmp    80499ef <strchr+0x5b>
      return (char *) string;
    else if (*string == '\0')
      return NULL;
 80499e3:	b8 00 00 00 00       	mov    $0x0,%eax
 80499e8:	eb 05                	jmp    80499ef <strchr+0x5b>
 80499ea:	b8 00 00 00 00       	mov    $0x0,%eax
    else
      string++;
}
 80499ef:	83 c4 08             	add    $0x8,%esp
 80499f2:	5b                   	pop    %ebx
 80499f3:	c3                   	ret    

080499f4 <strcspn>:

/* Returns the length of the initial substring of STRING that
   consists of characters that are not in STOP. */
size_t
strcspn (const char *string, const char *stop) 
{
 80499f4:	57                   	push   %edi
 80499f5:	56                   	push   %esi
 80499f6:	53                   	push   %ebx
 80499f7:	8b 74 24 10          	mov    0x10(%esp),%esi
 80499fb:	8b 7c 24 14          	mov    0x14(%esp),%edi
  size_t length;

  for (length = 0; string[length] != '\0'; length++)
 80499ff:	0f b6 06             	movzbl (%esi),%eax
 8049a02:	84 c0                	test   %al,%al
 8049a04:	74 26                	je     8049a2c <strcspn+0x38>
 8049a06:	bb 00 00 00 00       	mov    $0x0,%ebx
    if (strchr (stop, string[length]) != NULL)
 8049a0b:	83 ec 08             	sub    $0x8,%esp
 8049a0e:	0f be c0             	movsbl %al,%eax
 8049a11:	50                   	push   %eax
 8049a12:	57                   	push   %edi
 8049a13:	e8 7c ff ff ff       	call   8049994 <strchr>
 8049a18:	83 c4 10             	add    $0x10,%esp
 8049a1b:	85 c0                	test   %eax,%eax
 8049a1d:	75 12                	jne    8049a31 <strcspn+0x3d>
size_t
strcspn (const char *string, const char *stop) 
{
  size_t length;

  for (length = 0; string[length] != '\0'; length++)
 8049a1f:	83 c3 01             	add    $0x1,%ebx
 8049a22:	0f b6 04 1e          	movzbl (%esi,%ebx,1),%eax
 8049a26:	84 c0                	test   %al,%al
 8049a28:	75 e1                	jne    8049a0b <strcspn+0x17>
 8049a2a:	eb 05                	jmp    8049a31 <strcspn+0x3d>
 8049a2c:	bb 00 00 00 00       	mov    $0x0,%ebx
    if (strchr (stop, string[length]) != NULL)
      break;
  return length;
}
 8049a31:	89 d8                	mov    %ebx,%eax
 8049a33:	5b                   	pop    %ebx
 8049a34:	5e                   	pop    %esi
 8049a35:	5f                   	pop    %edi
 8049a36:	c3                   	ret    

08049a37 <strpbrk>:
/* Returns a pointer to the first character in STRING that is
   also in STOP.  If no character in STRING is in STOP, returns a
   null pointer. */
char *
strpbrk (const char *string, const char *stop) 
{
 8049a37:	56                   	push   %esi
 8049a38:	53                   	push   %ebx
 8049a39:	83 ec 04             	sub    $0x4,%esp
 8049a3c:	8b 5c 24 10          	mov    0x10(%esp),%ebx
 8049a40:	8b 74 24 14          	mov    0x14(%esp),%esi
  for (; *string != '\0'; string++)
 8049a44:	0f b6 13             	movzbl (%ebx),%edx
 8049a47:	84 d2                	test   %dl,%dl
 8049a49:	74 20                	je     8049a6b <strpbrk+0x34>
    if (strchr (stop, *string) != NULL)
 8049a4b:	83 ec 08             	sub    $0x8,%esp
 8049a4e:	0f be d2             	movsbl %dl,%edx
 8049a51:	52                   	push   %edx
 8049a52:	56                   	push   %esi
 8049a53:	e8 3c ff ff ff       	call   8049994 <strchr>
 8049a58:	83 c4 10             	add    $0x10,%esp
 8049a5b:	85 c0                	test   %eax,%eax
 8049a5d:	75 13                	jne    8049a72 <strpbrk+0x3b>
   also in STOP.  If no character in STRING is in STOP, returns a
   null pointer. */
char *
strpbrk (const char *string, const char *stop) 
{
  for (; *string != '\0'; string++)
 8049a5f:	83 c3 01             	add    $0x1,%ebx
 8049a62:	0f b6 13             	movzbl (%ebx),%edx
 8049a65:	84 d2                	test   %dl,%dl
 8049a67:	75 e2                	jne    8049a4b <strpbrk+0x14>
 8049a69:	eb 09                	jmp    8049a74 <strpbrk+0x3d>
    if (strchr (stop, *string) != NULL)
      return (char *) string;
  return NULL;
 8049a6b:	b8 00 00 00 00       	mov    $0x0,%eax
 8049a70:	eb 02                	jmp    8049a74 <strpbrk+0x3d>
 8049a72:	89 d8                	mov    %ebx,%eax
}
 8049a74:	83 c4 04             	add    $0x4,%esp
 8049a77:	5b                   	pop    %ebx
 8049a78:	5e                   	pop    %esi
 8049a79:	c3                   	ret    

08049a7a <strrchr>:

/* Returns a pointer to the last occurrence of C in STRING.
   Returns a null pointer if C does not occur in STRING. */
char *
strrchr (const char *string, int c_) 
{
 8049a7a:	53                   	push   %ebx
 8049a7b:	8b 54 24 08          	mov    0x8(%esp),%edx
  char c = c_;
 8049a7f:	0f b6 5c 24 0c       	movzbl 0xc(%esp),%ebx
  const char *p = NULL;

  for (; *string != '\0'; string++)
 8049a84:	0f b6 0a             	movzbl (%edx),%ecx
 8049a87:	84 c9                	test   %cl,%cl
 8049a89:	74 16                	je     8049aa1 <strrchr+0x27>
 8049a8b:	b8 00 00 00 00       	mov    $0x0,%eax
    if (*string == c)
 8049a90:	38 cb                	cmp    %cl,%bl
 8049a92:	0f 44 c2             	cmove  %edx,%eax
strrchr (const char *string, int c_) 
{
  char c = c_;
  const char *p = NULL;

  for (; *string != '\0'; string++)
 8049a95:	83 c2 01             	add    $0x1,%edx
 8049a98:	0f b6 0a             	movzbl (%edx),%ecx
 8049a9b:	84 c9                	test   %cl,%cl
 8049a9d:	75 f1                	jne    8049a90 <strrchr+0x16>
 8049a9f:	eb 05                	jmp    8049aa6 <strrchr+0x2c>
   Returns a null pointer if C does not occur in STRING. */
char *
strrchr (const char *string, int c_) 
{
  char c = c_;
  const char *p = NULL;
 8049aa1:	b8 00 00 00 00       	mov    $0x0,%eax

  for (; *string != '\0'; string++)
    if (*string == c)
      p = string;
  return (char *) p;
}
 8049aa6:	5b                   	pop    %ebx
 8049aa7:	c3                   	ret    

08049aa8 <strspn>:

/* Returns the length of the initial substring of STRING that
   consists of characters in SKIP. */
size_t
strspn (const char *string, const char *skip) 
{
 8049aa8:	57                   	push   %edi
 8049aa9:	56                   	push   %esi
 8049aaa:	53                   	push   %ebx
 8049aab:	8b 74 24 10          	mov    0x10(%esp),%esi
 8049aaf:	8b 7c 24 14          	mov    0x14(%esp),%edi
  size_t length;
  
  for (length = 0; string[length] != '\0'; length++)
 8049ab3:	0f b6 06             	movzbl (%esi),%eax
 8049ab6:	84 c0                	test   %al,%al
 8049ab8:	74 26                	je     8049ae0 <strspn+0x38>
 8049aba:	bb 00 00 00 00       	mov    $0x0,%ebx
    if (strchr (skip, string[length]) == NULL)
 8049abf:	83 ec 08             	sub    $0x8,%esp
 8049ac2:	0f be c0             	movsbl %al,%eax
 8049ac5:	50                   	push   %eax
 8049ac6:	57                   	push   %edi
 8049ac7:	e8 c8 fe ff ff       	call   8049994 <strchr>
 8049acc:	83 c4 10             	add    $0x10,%esp
 8049acf:	85 c0                	test   %eax,%eax
 8049ad1:	74 12                	je     8049ae5 <strspn+0x3d>
size_t
strspn (const char *string, const char *skip) 
{
  size_t length;
  
  for (length = 0; string[length] != '\0'; length++)
 8049ad3:	83 c3 01             	add    $0x1,%ebx
 8049ad6:	0f b6 04 1e          	movzbl (%esi,%ebx,1),%eax
 8049ada:	84 c0                	test   %al,%al
 8049adc:	75 e1                	jne    8049abf <strspn+0x17>
 8049ade:	eb 05                	jmp    8049ae5 <strspn+0x3d>
 8049ae0:	bb 00 00 00 00       	mov    $0x0,%ebx
    if (strchr (skip, string[length]) == NULL)
      break;
  return length;
}
 8049ae5:	89 d8                	mov    %ebx,%eax
 8049ae7:	5b                   	pop    %ebx
 8049ae8:	5e                   	pop    %esi
 8049ae9:	5f                   	pop    %edi
 8049aea:	c3                   	ret    

08049aeb <strtok_r>:
     'to'
     'tokenize.'
*/
char *
strtok_r (char *s, const char *delimiters, char **save_ptr) 
{
 8049aeb:	55                   	push   %ebp
 8049aec:	57                   	push   %edi
 8049aed:	56                   	push   %esi
 8049aee:	53                   	push   %ebx
 8049aef:	83 ec 0c             	sub    $0xc,%esp
 8049af2:	8b 5c 24 20          	mov    0x20(%esp),%ebx
 8049af6:	8b 74 24 24          	mov    0x24(%esp),%esi
  char *token;
  
  ASSERT (delimiters != NULL);
 8049afa:	85 f6                	test   %esi,%esi
 8049afc:	75 21                	jne    8049b1f <strtok_r+0x34>
 8049afe:	83 ec 0c             	sub    $0xc,%esp
 8049b01:	68 f0 b0 04 08       	push   $0x804b0f0
 8049b06:	68 41 b0 04 08       	push   $0x804b041
 8049b0b:	68 bc ab 04 08       	push   $0x804abbc
 8049b10:	68 ef 00 00 00       	push   $0xef
 8049b15:	68 58 b0 04 08       	push   $0x804b058
 8049b1a:	e8 b9 05 00 00       	call   804a0d8 <debug_panic>
  ASSERT (save_ptr != NULL);
 8049b1f:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
 8049b24:	75 21                	jne    8049b47 <strtok_r+0x5c>
 8049b26:	83 ec 0c             	sub    $0xc,%esp
 8049b29:	68 03 b1 04 08       	push   $0x804b103
 8049b2e:	68 41 b0 04 08       	push   $0x804b041
 8049b33:	68 bc ab 04 08       	push   $0x804abbc
 8049b38:	68 f0 00 00 00       	push   $0xf0
 8049b3d:	68 58 b0 04 08       	push   $0x804b058
 8049b42:	e8 91 05 00 00       	call   804a0d8 <debug_panic>

  /* If S is nonnull, start from it.
     If S is null, start from saved position. */
  if (s == NULL)
 8049b47:	85 db                	test   %ebx,%ebx
 8049b49:	75 41                	jne    8049b8c <strtok_r+0xa1>
    s = *save_ptr;
 8049b4b:	8b 44 24 28          	mov    0x28(%esp),%eax
 8049b4f:	8b 18                	mov    (%eax),%ebx
  ASSERT (s != NULL);
 8049b51:	85 db                	test   %ebx,%ebx
 8049b53:	75 37                	jne    8049b8c <strtok_r+0xa1>
 8049b55:	83 ec 0c             	sub    $0xc,%esp
 8049b58:	68 f9 b0 04 08       	push   $0x804b0f9
 8049b5d:	68 41 b0 04 08       	push   $0x804b041
 8049b62:	68 bc ab 04 08       	push   $0x804abbc
 8049b67:	68 f6 00 00 00       	push   $0xf6
 8049b6c:	68 58 b0 04 08       	push   $0x804b058
 8049b71:	e8 62 05 00 00       	call   804a0d8 <debug_panic>
  while (strchr (delimiters, *s) != NULL) 
    {
      /* strchr() will always return nonnull if we're searching
         for a null byte, because every string contains a null
         byte (at the end). */
      if (*s == '\0')
 8049b76:	89 f8                	mov    %edi,%eax
 8049b78:	84 c0                	test   %al,%al
 8049b7a:	75 0d                	jne    8049b89 <strtok_r+0x9e>
        {
          *save_ptr = s;
 8049b7c:	8b 44 24 28          	mov    0x28(%esp),%eax
 8049b80:	89 18                	mov    %ebx,(%eax)
          return NULL;
 8049b82:	b8 00 00 00 00       	mov    $0x0,%eax
 8049b87:	eb 58                	jmp    8049be1 <strtok_r+0xf6>
        }

      s++;
 8049b89:	83 c3 01             	add    $0x1,%ebx
  if (s == NULL)
    s = *save_ptr;
  ASSERT (s != NULL);

  /* Skip any DELIMITERS at our current position. */
  while (strchr (delimiters, *s) != NULL) 
 8049b8c:	0f b6 3b             	movzbl (%ebx),%edi
 8049b8f:	83 ec 08             	sub    $0x8,%esp
 8049b92:	89 f8                	mov    %edi,%eax
 8049b94:	0f be c0             	movsbl %al,%eax
 8049b97:	50                   	push   %eax
 8049b98:	56                   	push   %esi
 8049b99:	e8 f6 fd ff ff       	call   8049994 <strchr>
 8049b9e:	83 c4 10             	add    $0x10,%esp
 8049ba1:	85 c0                	test   %eax,%eax
 8049ba3:	75 d1                	jne    8049b76 <strtok_r+0x8b>
 8049ba5:	89 df                	mov    %ebx,%edi
    }

  /* Skip any non-DELIMITERS up to the end of the string. */
  token = s;
  while (strchr (delimiters, *s) == NULL)
    s++;
 8049ba7:	83 c7 01             	add    $0x1,%edi
      s++;
    }

  /* Skip any non-DELIMITERS up to the end of the string. */
  token = s;
  while (strchr (delimiters, *s) == NULL)
 8049baa:	0f b6 2f             	movzbl (%edi),%ebp
 8049bad:	83 ec 08             	sub    $0x8,%esp
 8049bb0:	89 e8                	mov    %ebp,%eax
 8049bb2:	0f be c0             	movsbl %al,%eax
 8049bb5:	50                   	push   %eax
 8049bb6:	56                   	push   %esi
 8049bb7:	e8 d8 fd ff ff       	call   8049994 <strchr>
 8049bbc:	83 c4 10             	add    $0x10,%esp
 8049bbf:	85 c0                	test   %eax,%eax
 8049bc1:	74 e4                	je     8049ba7 <strtok_r+0xbc>
    s++;
  if (*s != '\0') 
 8049bc3:	89 e8                	mov    %ebp,%eax
 8049bc5:	84 c0                	test   %al,%al
 8049bc7:	74 10                	je     8049bd9 <strtok_r+0xee>
    {
      *s = '\0';
 8049bc9:	c6 07 00             	movb   $0x0,(%edi)
      *save_ptr = s + 1;
 8049bcc:	83 c7 01             	add    $0x1,%edi
 8049bcf:	8b 44 24 28          	mov    0x28(%esp),%eax
 8049bd3:	89 38                	mov    %edi,(%eax)
 8049bd5:	89 d8                	mov    %ebx,%eax
 8049bd7:	eb 08                	jmp    8049be1 <strtok_r+0xf6>
    }
  else 
    *save_ptr = s;
 8049bd9:	8b 44 24 28          	mov    0x28(%esp),%eax
 8049bdd:	89 38                	mov    %edi,(%eax)
 8049bdf:	89 d8                	mov    %ebx,%eax
  return token;
}
 8049be1:	83 c4 0c             	add    $0xc,%esp
 8049be4:	5b                   	pop    %ebx
 8049be5:	5e                   	pop    %esi
 8049be6:	5f                   	pop    %edi
 8049be7:	5d                   	pop    %ebp
 8049be8:	c3                   	ret    

08049be9 <memset>:

/* Sets the SIZE bytes in DST to VALUE. */
void *
memset (void *dst_, int value, size_t size) 
{
 8049be9:	56                   	push   %esi
 8049bea:	53                   	push   %ebx
 8049beb:	83 ec 04             	sub    $0x4,%esp
 8049bee:	8b 44 24 10          	mov    0x10(%esp),%eax
 8049bf2:	8b 5c 24 14          	mov    0x14(%esp),%ebx
 8049bf6:	8b 74 24 18          	mov    0x18(%esp),%esi
  unsigned char *dst = dst_;

  ASSERT (dst != NULL || size == 0);
 8049bfa:	85 c0                	test   %eax,%eax
 8049bfc:	75 04                	jne    8049c02 <memset+0x19>
 8049bfe:	85 f6                	test   %esi,%esi
 8049c00:	75 0b                	jne    8049c0d <memset+0x24>
 8049c02:	8d 0c 30             	lea    (%eax,%esi,1),%ecx
  
  while (size-- > 0)
 8049c05:	89 c2                	mov    %eax,%edx
 8049c07:	85 f6                	test   %esi,%esi
 8049c09:	75 23                	jne    8049c2e <memset+0x45>
 8049c0b:	eb 2b                	jmp    8049c38 <memset+0x4f>
void *
memset (void *dst_, int value, size_t size) 
{
  unsigned char *dst = dst_;

  ASSERT (dst != NULL || size == 0);
 8049c0d:	83 ec 0c             	sub    $0xc,%esp
 8049c10:	68 28 b0 04 08       	push   $0x804b028
 8049c15:	68 41 b0 04 08       	push   $0x804b041
 8049c1a:	68 b4 ab 04 08       	push   $0x804abb4
 8049c1f:	68 1b 01 00 00       	push   $0x11b
 8049c24:	68 58 b0 04 08       	push   $0x804b058
 8049c29:	e8 aa 04 00 00       	call   804a0d8 <debug_panic>
  
  while (size-- > 0)
    *dst++ = value;
 8049c2e:	83 c2 01             	add    $0x1,%edx
 8049c31:	88 5a ff             	mov    %bl,-0x1(%edx)
{
  unsigned char *dst = dst_;

  ASSERT (dst != NULL || size == 0);
  
  while (size-- > 0)
 8049c34:	39 d1                	cmp    %edx,%ecx
 8049c36:	75 f6                	jne    8049c2e <memset+0x45>
    *dst++ = value;

  return dst_;
}
 8049c38:	83 c4 04             	add    $0x4,%esp
 8049c3b:	5b                   	pop    %ebx
 8049c3c:	5e                   	pop    %esi
 8049c3d:	c3                   	ret    

08049c3e <strlen>:

/* Returns the length of STRING. */
size_t
strlen (const char *string) 
{
 8049c3e:	83 ec 0c             	sub    $0xc,%esp
 8049c41:	8b 54 24 10          	mov    0x10(%esp),%edx
  const char *p;

  ASSERT (string != NULL);
 8049c45:	85 d2                	test   %edx,%edx
 8049c47:	74 09                	je     8049c52 <strlen+0x14>

  for (p = string; *p != '\0'; p++)
 8049c49:	89 d0                	mov    %edx,%eax
 8049c4b:	80 3a 00             	cmpb   $0x0,(%edx)
 8049c4e:	74 2d                	je     8049c7d <strlen+0x3f>
 8049c50:	eb 21                	jmp    8049c73 <strlen+0x35>
size_t
strlen (const char *string) 
{
  const char *p;

  ASSERT (string != NULL);
 8049c52:	83 ec 0c             	sub    $0xc,%esp
 8049c55:	68 e1 b0 04 08       	push   $0x804b0e1
 8049c5a:	68 41 b0 04 08       	push   $0x804b041
 8049c5f:	68 ac ab 04 08       	push   $0x804abac
 8049c64:	68 29 01 00 00       	push   $0x129
 8049c69:	68 58 b0 04 08       	push   $0x804b058
 8049c6e:	e8 65 04 00 00       	call   804a0d8 <debug_panic>

  for (p = string; *p != '\0'; p++)
 8049c73:	89 d0                	mov    %edx,%eax
 8049c75:	83 c0 01             	add    $0x1,%eax
 8049c78:	80 38 00             	cmpb   $0x0,(%eax)
 8049c7b:	75 f8                	jne    8049c75 <strlen+0x37>
    continue;
  return p - string;
 8049c7d:	29 d0                	sub    %edx,%eax
}
 8049c7f:	83 c4 0c             	add    $0xc,%esp
 8049c82:	c3                   	ret    

08049c83 <strstr>:
/* Returns a pointer to the first occurrence of NEEDLE within
   HAYSTACK.  Returns a null pointer if NEEDLE does not exist
   within HAYSTACK. */
char *
strstr (const char *haystack, const char *needle) 
{
 8049c83:	55                   	push   %ebp
 8049c84:	57                   	push   %edi
 8049c85:	56                   	push   %esi
 8049c86:	53                   	push   %ebx
 8049c87:	83 ec 1c             	sub    $0x1c,%esp
 8049c8a:	8b 6c 24 34          	mov    0x34(%esp),%ebp
  size_t haystack_len = strlen (haystack);
 8049c8e:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
 8049c93:	b8 00 00 00 00       	mov    $0x0,%eax
 8049c98:	89 d9                	mov    %ebx,%ecx
 8049c9a:	8b 7c 24 30          	mov    0x30(%esp),%edi
 8049c9e:	f2 ae                	repnz scas %es:(%edi),%al
 8049ca0:	f7 d1                	not    %ecx
 8049ca2:	8d 51 ff             	lea    -0x1(%ecx),%edx
  size_t needle_len = strlen (needle);
 8049ca5:	89 d9                	mov    %ebx,%ecx
 8049ca7:	89 ef                	mov    %ebp,%edi
 8049ca9:	f2 ae                	repnz scas %es:(%edi),%al
 8049cab:	89 c8                	mov    %ecx,%eax
 8049cad:	f7 d0                	not    %eax
 8049caf:	8d 78 ff             	lea    -0x1(%eax),%edi

  if (haystack_len >= needle_len) 
 8049cb2:	39 fa                	cmp    %edi,%edx
 8049cb4:	72 33                	jb     8049ce9 <strstr+0x66>
    {
      size_t i;

      for (i = 0; i <= haystack_len - needle_len; i++)
 8049cb6:	29 fa                	sub    %edi,%edx
 8049cb8:	89 54 24 0c          	mov    %edx,0xc(%esp)
 8049cbc:	bb 00 00 00 00       	mov    $0x0,%ebx
 8049cc1:	89 de                	mov    %ebx,%esi
 8049cc3:	03 74 24 30          	add    0x30(%esp),%esi
        if (!memcmp (haystack + i, needle, needle_len))
 8049cc7:	83 ec 04             	sub    $0x4,%esp
 8049cca:	57                   	push   %edi
 8049ccb:	55                   	push   %ebp
 8049ccc:	56                   	push   %esi
 8049ccd:	e8 2f fb ff ff       	call   8049801 <memcmp>
 8049cd2:	83 c4 10             	add    $0x10,%esp
 8049cd5:	85 c0                	test   %eax,%eax
 8049cd7:	74 17                	je     8049cf0 <strstr+0x6d>

  if (haystack_len >= needle_len) 
    {
      size_t i;

      for (i = 0; i <= haystack_len - needle_len; i++)
 8049cd9:	83 c3 01             	add    $0x1,%ebx
 8049cdc:	3b 5c 24 0c          	cmp    0xc(%esp),%ebx
 8049ce0:	76 df                	jbe    8049cc1 <strstr+0x3e>
        if (!memcmp (haystack + i, needle, needle_len))
          return (char *) haystack + i;
    }

  return NULL;
 8049ce2:	b8 00 00 00 00       	mov    $0x0,%eax
 8049ce7:	eb 09                	jmp    8049cf2 <strstr+0x6f>
 8049ce9:	b8 00 00 00 00       	mov    $0x0,%eax
 8049cee:	eb 02                	jmp    8049cf2 <strstr+0x6f>
  if (haystack_len >= needle_len) 
    {
      size_t i;

      for (i = 0; i <= haystack_len - needle_len; i++)
        if (!memcmp (haystack + i, needle, needle_len))
 8049cf0:	89 f0                	mov    %esi,%eax
          return (char *) haystack + i;
    }

  return NULL;
}
 8049cf2:	83 c4 1c             	add    $0x1c,%esp
 8049cf5:	5b                   	pop    %ebx
 8049cf6:	5e                   	pop    %esi
 8049cf7:	5f                   	pop    %edi
 8049cf8:	5d                   	pop    %ebp
 8049cf9:	c3                   	ret    

08049cfa <strnlen>:

/* If STRING is less than MAXLEN characters in length, returns
   its actual length.  Otherwise, returns MAXLEN. */
size_t
strnlen (const char *string, size_t maxlen) 
{
 8049cfa:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049cfe:	8b 4c 24 08          	mov    0x8(%esp),%ecx
  size_t length;

  for (length = 0; string[length] != '\0' && length < maxlen; length++)
 8049d02:	80 3a 00             	cmpb   $0x0,(%edx)
 8049d05:	74 18                	je     8049d1f <strnlen+0x25>
 8049d07:	85 c9                	test   %ecx,%ecx
 8049d09:	74 14                	je     8049d1f <strnlen+0x25>
 8049d0b:	b8 00 00 00 00       	mov    $0x0,%eax
 8049d10:	83 c0 01             	add    $0x1,%eax
 8049d13:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
 8049d17:	74 0b                	je     8049d24 <strnlen+0x2a>
 8049d19:	39 c1                	cmp    %eax,%ecx
 8049d1b:	77 f3                	ja     8049d10 <strnlen+0x16>
 8049d1d:	f3 c3                	repz ret 
 8049d1f:	b8 00 00 00 00       	mov    $0x0,%eax
    continue;
  return length;
}
 8049d24:	f3 c3                	repz ret 

08049d26 <strlcpy>:
   increasingly popular extension.  See
   http://www.courtesan.com/todd/papers/strlcpy.html for
   information on strlcpy(). */
size_t
strlcpy (char *dst, const char *src, size_t size) 
{
 8049d26:	55                   	push   %ebp
 8049d27:	57                   	push   %edi
 8049d28:	56                   	push   %esi
 8049d29:	53                   	push   %ebx
 8049d2a:	83 ec 0c             	sub    $0xc,%esp
 8049d2d:	8b 74 24 20          	mov    0x20(%esp),%esi
 8049d31:	8b 6c 24 24          	mov    0x24(%esp),%ebp
 8049d35:	8b 54 24 28          	mov    0x28(%esp),%edx
  size_t src_len;

  ASSERT (dst != NULL);
 8049d39:	85 f6                	test   %esi,%esi
 8049d3b:	75 21                	jne    8049d5e <strlcpy+0x38>
 8049d3d:	83 ec 0c             	sub    $0xc,%esp
 8049d40:	68 14 b1 04 08       	push   $0x804b114
 8049d45:	68 41 b0 04 08       	push   $0x804b041
 8049d4a:	68 a4 ab 04 08       	push   $0x804aba4
 8049d4f:	68 4a 01 00 00       	push   $0x14a
 8049d54:	68 58 b0 04 08       	push   $0x804b058
 8049d59:	e8 7a 03 00 00       	call   804a0d8 <debug_panic>
  ASSERT (src != NULL);
 8049d5e:	85 ed                	test   %ebp,%ebp
 8049d60:	75 21                	jne    8049d83 <strlcpy+0x5d>
 8049d62:	83 ec 0c             	sub    $0xc,%esp
 8049d65:	68 20 b1 04 08       	push   $0x804b120
 8049d6a:	68 41 b0 04 08       	push   $0x804b041
 8049d6f:	68 a4 ab 04 08       	push   $0x804aba4
 8049d74:	68 4b 01 00 00       	push   $0x14b
 8049d79:	68 58 b0 04 08       	push   $0x804b058
 8049d7e:	e8 55 03 00 00       	call   804a0d8 <debug_panic>

  src_len = strlen (src);
 8049d83:	b8 00 00 00 00       	mov    $0x0,%eax
 8049d88:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
 8049d8d:	89 ef                	mov    %ebp,%edi
 8049d8f:	f2 ae                	repnz scas %es:(%edi),%al
 8049d91:	f7 d1                	not    %ecx
 8049d93:	8d 59 ff             	lea    -0x1(%ecx),%ebx
  if (size > 0) 
 8049d96:	85 d2                	test   %edx,%edx
 8049d98:	74 1c                	je     8049db6 <strlcpy+0x90>
    {
      size_t dst_len = size - 1;
 8049d9a:	83 ea 01             	sub    $0x1,%edx
 8049d9d:	39 d3                	cmp    %edx,%ebx
 8049d9f:	89 d7                	mov    %edx,%edi
 8049da1:	0f 46 fb             	cmovbe %ebx,%edi
      if (src_len < dst_len)
        dst_len = src_len;
      memcpy (dst, src, dst_len);
 8049da4:	83 ec 04             	sub    $0x4,%esp
 8049da7:	57                   	push   %edi
 8049da8:	55                   	push   %ebp
 8049da9:	56                   	push   %esi
 8049daa:	e8 2d f9 ff ff       	call   80496dc <memcpy>
      dst[dst_len] = '\0';
 8049daf:	c6 04 3e 00          	movb   $0x0,(%esi,%edi,1)
 8049db3:	83 c4 10             	add    $0x10,%esp
    }
  return src_len;
}
 8049db6:	89 d8                	mov    %ebx,%eax
 8049db8:	83 c4 0c             	add    $0xc,%esp
 8049dbb:	5b                   	pop    %ebx
 8049dbc:	5e                   	pop    %esi
 8049dbd:	5f                   	pop    %edi
 8049dbe:	5d                   	pop    %ebp
 8049dbf:	c3                   	ret    

08049dc0 <strlcat>:
   increasingly popular extension.  See
   http://www.courtesan.com/todd/papers/strlcpy.html for
   information on strlcpy(). */
size_t
strlcat (char *dst, const char *src, size_t size) 
{
 8049dc0:	55                   	push   %ebp
 8049dc1:	57                   	push   %edi
 8049dc2:	56                   	push   %esi
 8049dc3:	53                   	push   %ebx
 8049dc4:	83 ec 0c             	sub    $0xc,%esp
 8049dc7:	8b 54 24 24          	mov    0x24(%esp),%edx
  size_t src_len, dst_len;

  ASSERT (dst != NULL);
 8049dcb:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
 8049dd0:	75 21                	jne    8049df3 <strlcat+0x33>
 8049dd2:	83 ec 0c             	sub    $0xc,%esp
 8049dd5:	68 14 b1 04 08       	push   $0x804b114
 8049dda:	68 41 b0 04 08       	push   $0x804b041
 8049ddf:	68 9c ab 04 08       	push   $0x804ab9c
 8049de4:	68 68 01 00 00       	push   $0x168
 8049de9:	68 58 b0 04 08       	push   $0x804b058
 8049dee:	e8 e5 02 00 00       	call   804a0d8 <debug_panic>
  ASSERT (src != NULL);
 8049df3:	85 d2                	test   %edx,%edx
 8049df5:	75 21                	jne    8049e18 <strlcat+0x58>
 8049df7:	83 ec 0c             	sub    $0xc,%esp
 8049dfa:	68 20 b1 04 08       	push   $0x804b120
 8049dff:	68 41 b0 04 08       	push   $0x804b041
 8049e04:	68 9c ab 04 08       	push   $0x804ab9c
 8049e09:	68 69 01 00 00       	push   $0x169
 8049e0e:	68 58 b0 04 08       	push   $0x804b058
 8049e13:	e8 c0 02 00 00       	call   804a0d8 <debug_panic>

  src_len = strlen (src);
 8049e18:	be ff ff ff ff       	mov    $0xffffffff,%esi
 8049e1d:	b8 00 00 00 00       	mov    $0x0,%eax
 8049e22:	89 f1                	mov    %esi,%ecx
 8049e24:	89 d7                	mov    %edx,%edi
 8049e26:	f2 ae                	repnz scas %es:(%edi),%al
 8049e28:	f7 d1                	not    %ecx
 8049e2a:	8d 69 ff             	lea    -0x1(%ecx),%ebp
  dst_len = strlen (dst);
 8049e2d:	89 f1                	mov    %esi,%ecx
 8049e2f:	8b 7c 24 20          	mov    0x20(%esp),%edi
 8049e33:	f2 ae                	repnz scas %es:(%edi),%al
 8049e35:	89 c8                	mov    %ecx,%eax
 8049e37:	f7 d0                	not    %eax
 8049e39:	8d 58 ff             	lea    -0x1(%eax),%ebx
  if (size > 0 && dst_len < size) 
 8049e3c:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
 8049e41:	74 2c                	je     8049e6f <strlcat+0xaf>
 8049e43:	3b 5c 24 28          	cmp    0x28(%esp),%ebx
 8049e47:	73 26                	jae    8049e6f <strlcat+0xaf>
    {
      size_t copy_cnt = size - dst_len - 1;
 8049e49:	8b 44 24 28          	mov    0x28(%esp),%eax
 8049e4d:	8d 70 ff             	lea    -0x1(%eax),%esi
 8049e50:	29 de                	sub    %ebx,%esi
 8049e52:	39 f5                	cmp    %esi,%ebp
 8049e54:	0f 46 f5             	cmovbe %ebp,%esi
      if (src_len < copy_cnt)
        copy_cnt = src_len;
      memcpy (dst + dst_len, src, copy_cnt);
 8049e57:	89 df                	mov    %ebx,%edi
 8049e59:	03 7c 24 20          	add    0x20(%esp),%edi
 8049e5d:	83 ec 04             	sub    $0x4,%esp
 8049e60:	56                   	push   %esi
 8049e61:	52                   	push   %edx
 8049e62:	57                   	push   %edi
 8049e63:	e8 74 f8 ff ff       	call   80496dc <memcpy>
      dst[dst_len + copy_cnt] = '\0';
 8049e68:	c6 04 37 00          	movb   $0x0,(%edi,%esi,1)
 8049e6c:	83 c4 10             	add    $0x10,%esp
    }
  return src_len + dst_len;
 8049e6f:	8d 44 1d 00          	lea    0x0(%ebp,%ebx,1),%eax
}
 8049e73:	83 c4 0c             	add    $0xc,%esp
 8049e76:	5b                   	pop    %ebx
 8049e77:	5e                   	pop    %esi
 8049e78:	5f                   	pop    %edi
 8049e79:	5d                   	pop    %ebp
 8049e7a:	c3                   	ret    

08049e7b <udiv64>:

/* Divides unsigned 64-bit N by unsigned 64-bit D and returns the
   quotient. */
static uint64_t
udiv64 (uint64_t n, uint64_t d)
{
 8049e7b:	55                   	push   %ebp
 8049e7c:	57                   	push   %edi
 8049e7d:	56                   	push   %esi
 8049e7e:	53                   	push   %ebx
 8049e7f:	83 ec 1c             	sub    $0x1c,%esp
 8049e82:	89 04 24             	mov    %eax,(%esp)
 8049e85:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049e89:	8b 74 24 30          	mov    0x30(%esp),%esi
 8049e8d:	8b 7c 24 34          	mov    0x34(%esp),%edi
  if ((d >> 32) == 0) 
 8049e91:	85 ff                	test   %edi,%edi
 8049e93:	75 43                	jne    8049ed8 <udiv64+0x5d>
             <=> [b - 1/d] < b
         which is a tautology.

         Therefore, this code is correct and will not trap. */
      uint64_t b = 1ULL << 32;
      uint32_t n1 = n >> 32;
 8049e95:	8b 44 24 04          	mov    0x4(%esp),%eax
      uint32_t n0 = n; 
      uint32_t d0 = d;

      return divl (b * (n1 % d0) + n0, d0) + b * (n1 / d0); 
 8049e99:	ba 00 00 00 00       	mov    $0x0,%edx
 8049e9e:	f7 f6                	div    %esi
 8049ea0:	89 c7                	mov    %eax,%edi
 8049ea2:	89 d0                	mov    %edx,%eax
 8049ea4:	89 c2                	mov    %eax,%edx
 8049ea6:	b8 00 00 00 00       	mov    $0x0,%eax
 8049eab:	8b 0c 24             	mov    (%esp),%ecx
 8049eae:	bb 00 00 00 00       	mov    $0x0,%ebx
 8049eb3:	01 c8                	add    %ecx,%eax
 8049eb5:	11 da                	adc    %ebx,%edx
{
  uint32_t n1 = n >> 32;
  uint32_t n0 = n;
  uint32_t q, r;

  asm ("divl %4"
 8049eb7:	f7 f6                	div    %esi
      uint64_t b = 1ULL << 32;
      uint32_t n1 = n >> 32;
      uint32_t n0 = n; 
      uint32_t d0 = d;

      return divl (b * (n1 % d0) + n0, d0) + b * (n1 / d0); 
 8049eb9:	89 f9                	mov    %edi,%ecx
 8049ebb:	89 cf                	mov    %ecx,%edi
 8049ebd:	be 00 00 00 00       	mov    $0x0,%esi
 8049ec2:	ba 00 00 00 00       	mov    $0x0,%edx
 8049ec7:	01 c6                	add    %eax,%esi
 8049ec9:	11 d7                	adc    %edx,%edi
 8049ecb:	89 74 24 08          	mov    %esi,0x8(%esp)
 8049ecf:	89 7c 24 0c          	mov    %edi,0xc(%esp)
 8049ed3:	e9 05 01 00 00       	jmp    8049fdd <udiv64+0x162>
 8049ed8:	89 fa                	mov    %edi,%edx
    }
  else 
    {
      /* Based on the algorithm and proof available from
         http://www.hackersdelight.org/revisions.pdf. */
      if (n < d)
 8049eda:	8b 0c 24             	mov    (%esp),%ecx
 8049edd:	8b 5c 24 04          	mov    0x4(%esp),%ebx
 8049ee1:	39 df                	cmp    %ebx,%edi
 8049ee3:	0f 87 e4 00 00 00    	ja     8049fcd <udiv64+0x152>
 8049ee9:	72 08                	jb     8049ef3 <udiv64+0x78>
 8049eeb:	39 ce                	cmp    %ecx,%esi
 8049eed:	0f 87 da 00 00 00    	ja     8049fcd <udiv64+0x152>
        return 0;
      else 
        {
          uint32_t d1 = d >> 32;
 8049ef3:	89 d0                	mov    %edx,%eax
  /* This technique is portable, but there are better ways to do
     it on particular systems.  With sufficiently new enough GCC,
     you can use __builtin_clz() to take advantage of GCC's
     knowledge of how to do it.  Or you can use the x86 BSR
     instruction directly. */
  int n = 0;
 8049ef5:	bd 00 00 00 00       	mov    $0x0,%ebp
  if (x <= 0x0000FFFF)
 8049efa:	81 fa ff ff 00 00    	cmp    $0xffff,%edx
 8049f00:	77 08                	ja     8049f0a <udiv64+0x8f>
    {
      n += 16;
      x <<= 16; 
 8049f02:	c1 e0 10             	shl    $0x10,%eax
     knowledge of how to do it.  Or you can use the x86 BSR
     instruction directly. */
  int n = 0;
  if (x <= 0x0000FFFF)
    {
      n += 16;
 8049f05:	bd 10 00 00 00       	mov    $0x10,%ebp
      x <<= 16; 
    }
  if (x <= 0x00FFFFFF)
 8049f0a:	3d ff ff ff 00       	cmp    $0xffffff,%eax
 8049f0f:	77 06                	ja     8049f17 <udiv64+0x9c>
    {
      n += 8;
 8049f11:	83 c5 08             	add    $0x8,%ebp
      x <<= 8; 
 8049f14:	c1 e0 08             	shl    $0x8,%eax
    }
  if (x <= 0x0FFFFFFF)
 8049f17:	3d ff ff ff 0f       	cmp    $0xfffffff,%eax
 8049f1c:	77 06                	ja     8049f24 <udiv64+0xa9>
    {
      n += 4;
 8049f1e:	83 c5 04             	add    $0x4,%ebp
      x <<= 4;
 8049f21:	c1 e0 04             	shl    $0x4,%eax
    }
  if (x <= 0x3FFFFFFF)
 8049f24:	3d ff ff ff 3f       	cmp    $0x3fffffff,%eax
 8049f29:	77 06                	ja     8049f31 <udiv64+0xb6>
    {
      n += 2;
 8049f2b:	83 c5 02             	add    $0x2,%ebp
      x <<= 2; 
 8049f2e:	c1 e0 02             	shl    $0x2,%eax
    }
  if (x <= 0x7FFFFFFF)
    n++;
 8049f31:	3d 00 00 00 80       	cmp    $0x80000000,%eax
 8049f36:	83 d5 00             	adc    $0x0,%ebp
        return 0;
      else 
        {
          uint32_t d1 = d >> 32;
          int s = nlz (d1);
          uint64_t q = divl (n >> 1, (d << s) >> 32) >> (31 - s);
 8049f39:	8b 04 24             	mov    (%esp),%eax
 8049f3c:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049f40:	0f ac d0 01          	shrd   $0x1,%edx,%eax
 8049f44:	d1 ea                	shr    %edx
 8049f46:	89 44 24 08          	mov    %eax,0x8(%esp)
 8049f4a:	89 54 24 0c          	mov    %edx,0xc(%esp)
{
  uint32_t n1 = n >> 32;
  uint32_t n0 = n;
  uint32_t q, r;

  asm ("divl %4"
 8049f4e:	89 f0                	mov    %esi,%eax
 8049f50:	89 fa                	mov    %edi,%edx
 8049f52:	89 e9                	mov    %ebp,%ecx
 8049f54:	0f a5 f2             	shld   %cl,%esi,%edx
 8049f57:	d3 e0                	shl    %cl,%eax
 8049f59:	f6 c1 20             	test   $0x20,%cl
 8049f5c:	74 02                	je     8049f60 <udiv64+0xe5>
 8049f5e:	89 c2                	mov    %eax,%edx
 8049f60:	89 d3                	mov    %edx,%ebx
 8049f62:	8b 54 24 0c          	mov    0xc(%esp),%edx
 8049f66:	8b 44 24 08          	mov    0x8(%esp),%eax
 8049f6a:	f7 f3                	div    %ebx
        return 0;
      else 
        {
          uint32_t d1 = d >> 32;
          int s = nlz (d1);
          uint64_t q = divl (n >> 1, (d << s) >> 32) >> (31 - s);
 8049f6c:	b9 1f 00 00 00       	mov    $0x1f,%ecx
 8049f71:	29 e9                	sub    %ebp,%ecx
 8049f73:	d3 e8                	shr    %cl,%eax
 8049f75:	89 c2                	mov    %eax,%edx
 8049f77:	b9 00 00 00 00       	mov    $0x0,%ecx
 8049f7c:	89 44 24 10          	mov    %eax,0x10(%esp)
 8049f80:	89 4c 24 14          	mov    %ecx,0x14(%esp)
          return n - (q - 1) * d < d ? q - 1 : q; 
 8049f84:	83 c2 ff             	add    $0xffffffff,%edx
 8049f87:	83 d1 ff             	adc    $0xffffffff,%ecx
 8049f8a:	89 cb                	mov    %ecx,%ebx
 8049f8c:	89 54 24 08          	mov    %edx,0x8(%esp)
 8049f90:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
 8049f94:	89 fd                	mov    %edi,%ebp
 8049f96:	0f af ea             	imul   %edx,%ebp
 8049f99:	89 d8                	mov    %ebx,%eax
 8049f9b:	0f af c6             	imul   %esi,%eax
 8049f9e:	01 c5                	add    %eax,%ebp
 8049fa0:	89 f0                	mov    %esi,%eax
 8049fa2:	f7 e2                	mul    %edx
 8049fa4:	01 ea                	add    %ebp,%edx
 8049fa6:	8b 0c 24             	mov    (%esp),%ecx
 8049fa9:	8b 5c 24 04          	mov    0x4(%esp),%ebx
 8049fad:	29 c1                	sub    %eax,%ecx
 8049faf:	19 d3                	sbb    %edx,%ebx
 8049fb1:	39 df                	cmp    %ebx,%edi
 8049fb3:	77 28                	ja     8049fdd <udiv64+0x162>
 8049fb5:	72 04                	jb     8049fbb <udiv64+0x140>
 8049fb7:	39 ce                	cmp    %ecx,%esi
 8049fb9:	77 22                	ja     8049fdd <udiv64+0x162>
 8049fbb:	8b 44 24 10          	mov    0x10(%esp),%eax
 8049fbf:	8b 54 24 14          	mov    0x14(%esp),%edx
 8049fc3:	89 44 24 08          	mov    %eax,0x8(%esp)
 8049fc7:	89 54 24 0c          	mov    %edx,0xc(%esp)
 8049fcb:	eb 10                	jmp    8049fdd <udiv64+0x162>
  else 
    {
      /* Based on the algorithm and proof available from
         http://www.hackersdelight.org/revisions.pdf. */
      if (n < d)
        return 0;
 8049fcd:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8049fd4:	00 
 8049fd5:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
 8049fdc:	00 
          int s = nlz (d1);
          uint64_t q = divl (n >> 1, (d << s) >> 32) >> (31 - s);
          return n - (q - 1) * d < d ? q - 1 : q; 
        }
    }
}
 8049fdd:	8b 44 24 08          	mov    0x8(%esp),%eax
 8049fe1:	8b 54 24 0c          	mov    0xc(%esp),%edx
 8049fe5:	83 c4 1c             	add    $0x1c,%esp
 8049fe8:	5b                   	pop    %ebx
 8049fe9:	5e                   	pop    %esi
 8049fea:	5f                   	pop    %edi
 8049feb:	5d                   	pop    %ebp
 8049fec:	c3                   	ret    

08049fed <sdiv64>:

/* Divides signed 64-bit N by signed 64-bit D and returns the
   quotient. */
static int64_t
sdiv64 (int64_t n, int64_t d)
{
 8049fed:	57                   	push   %edi
 8049fee:	56                   	push   %esi
 8049fef:	53                   	push   %ebx
 8049ff0:	83 ec 08             	sub    $0x8,%esp
 8049ff3:	89 04 24             	mov    %eax,(%esp)
 8049ff6:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049ffa:	8b 74 24 18          	mov    0x18(%esp),%esi
 8049ffe:	8b 7c 24 1c          	mov    0x1c(%esp),%edi
  uint64_t n_abs = n >= 0 ? (uint64_t) n : -(uint64_t) n;
 804a002:	85 d2                	test   %edx,%edx
 804a004:	79 07                	jns    804a00d <sdiv64+0x20>
 804a006:	f7 d8                	neg    %eax
 804a008:	83 d2 00             	adc    $0x0,%edx
 804a00b:	f7 da                	neg    %edx
  uint64_t d_abs = d >= 0 ? (uint64_t) d : -(uint64_t) d;
 804a00d:	89 f1                	mov    %esi,%ecx
 804a00f:	89 fb                	mov    %edi,%ebx
 804a011:	85 ff                	test   %edi,%edi
 804a013:	79 07                	jns    804a01c <sdiv64+0x2f>
 804a015:	f7 d9                	neg    %ecx
 804a017:	83 d3 00             	adc    $0x0,%ebx
 804a01a:	f7 db                	neg    %ebx
  uint64_t q_abs = udiv64 (n_abs, d_abs);
 804a01c:	53                   	push   %ebx
 804a01d:	51                   	push   %ecx
 804a01e:	e8 58 fe ff ff       	call   8049e7b <udiv64>
 804a023:	83 c4 08             	add    $0x8,%esp
  return (n < 0) == (d < 0) ? (int64_t) q_abs : -(int64_t) q_abs;
 804a026:	8b 4c 24 04          	mov    0x4(%esp),%ecx
 804a02a:	f7 d1                	not    %ecx
 804a02c:	c1 e9 1f             	shr    $0x1f,%ecx
 804a02f:	89 fb                	mov    %edi,%ebx
 804a031:	c1 eb 1f             	shr    $0x1f,%ebx
 804a034:	38 d9                	cmp    %bl,%cl
 804a036:	75 07                	jne    804a03f <sdiv64+0x52>
 804a038:	f7 d8                	neg    %eax
 804a03a:	83 d2 00             	adc    $0x0,%edx
 804a03d:	f7 da                	neg    %edx
}
 804a03f:	83 c4 08             	add    $0x8,%esp
 804a042:	5b                   	pop    %ebx
 804a043:	5e                   	pop    %esi
 804a044:	5f                   	pop    %edi
 804a045:	c3                   	ret    

0804a046 <__divdi3>:
unsigned long long __umoddi3 (unsigned long long n, unsigned long long d);

/* Signed 64-bit division. */
long long
__divdi3 (long long n, long long d) 
{
 804a046:	83 ec 04             	sub    $0x4,%esp
  return sdiv64 (n, d);
 804a049:	ff 74 24 14          	pushl  0x14(%esp)
 804a04d:	ff 74 24 14          	pushl  0x14(%esp)
 804a051:	8b 44 24 10          	mov    0x10(%esp),%eax
 804a055:	8b 54 24 14          	mov    0x14(%esp),%edx
 804a059:	e8 8f ff ff ff       	call   8049fed <sdiv64>
}
 804a05e:	83 c4 0c             	add    $0xc,%esp
 804a061:	c3                   	ret    

0804a062 <__moddi3>:

/* Signed 64-bit remainder. */
long long
__moddi3 (long long n, long long d) 
{
 804a062:	57                   	push   %edi
 804a063:	56                   	push   %esi
 804a064:	53                   	push   %ebx
 804a065:	8b 5c 24 10          	mov    0x10(%esp),%ebx
 804a069:	8b 74 24 18          	mov    0x18(%esp),%esi
 804a06d:	8b 7c 24 1c          	mov    0x1c(%esp),%edi
/* Divides signed 64-bit N by signed 64-bit D and returns the
   remainder. */
static int32_t
smod64 (int64_t n, int64_t d)
{
  return n - d * sdiv64 (n, d);
 804a071:	57                   	push   %edi
 804a072:	56                   	push   %esi
 804a073:	89 d8                	mov    %ebx,%eax
 804a075:	8b 54 24 1c          	mov    0x1c(%esp),%edx
 804a079:	e8 6f ff ff ff       	call   8049fed <sdiv64>
 804a07e:	83 c4 08             	add    $0x8,%esp

/* Signed 64-bit remainder. */
long long
__moddi3 (long long n, long long d) 
{
  return smod64 (n, d);
 804a081:	0f af f0             	imul   %eax,%esi
 804a084:	89 d8                	mov    %ebx,%eax
 804a086:	29 f0                	sub    %esi,%eax
 804a088:	99                   	cltd   
}
 804a089:	5b                   	pop    %ebx
 804a08a:	5e                   	pop    %esi
 804a08b:	5f                   	pop    %edi
 804a08c:	c3                   	ret    

0804a08d <__udivdi3>:

/* Unsigned 64-bit division. */
unsigned long long
__udivdi3 (unsigned long long n, unsigned long long d) 
{
 804a08d:	83 ec 04             	sub    $0x4,%esp
  return udiv64 (n, d);
 804a090:	ff 74 24 14          	pushl  0x14(%esp)
 804a094:	ff 74 24 14          	pushl  0x14(%esp)
 804a098:	8b 44 24 10          	mov    0x10(%esp),%eax
 804a09c:	8b 54 24 14          	mov    0x14(%esp),%edx
 804a0a0:	e8 d6 fd ff ff       	call   8049e7b <udiv64>
}
 804a0a5:	83 c4 0c             	add    $0xc,%esp
 804a0a8:	c3                   	ret    

0804a0a9 <__umoddi3>:

/* Unsigned 64-bit remainder. */
unsigned long long
__umoddi3 (unsigned long long n, unsigned long long d) 
{
 804a0a9:	57                   	push   %edi
 804a0aa:	56                   	push   %esi
 804a0ab:	53                   	push   %ebx
 804a0ac:	8b 5c 24 10          	mov    0x10(%esp),%ebx
 804a0b0:	8b 74 24 18          	mov    0x18(%esp),%esi
 804a0b4:	8b 7c 24 1c          	mov    0x1c(%esp),%edi
/* Divides unsigned 64-bit N by unsigned 64-bit D and returns the
   remainder. */
static uint32_t
umod64 (uint64_t n, uint64_t d)
{
  return n - d * udiv64 (n, d);
 804a0b8:	57                   	push   %edi
 804a0b9:	56                   	push   %esi
 804a0ba:	89 d8                	mov    %ebx,%eax
 804a0bc:	8b 54 24 1c          	mov    0x1c(%esp),%edx
 804a0c0:	e8 b6 fd ff ff       	call   8049e7b <udiv64>
 804a0c5:	83 c4 08             	add    $0x8,%esp

/* Unsigned 64-bit remainder. */
unsigned long long
__umoddi3 (unsigned long long n, unsigned long long d) 
{
  return umod64 (n, d);
 804a0c8:	0f af f0             	imul   %eax,%esi
 804a0cb:	89 d8                	mov    %ebx,%eax
 804a0cd:	29 f0                	sub    %esi,%eax
 804a0cf:	ba 00 00 00 00       	mov    $0x0,%edx
}
 804a0d4:	5b                   	pop    %ebx
 804a0d5:	5e                   	pop    %esi
 804a0d6:	5f                   	pop    %edi
 804a0d7:	c3                   	ret    

0804a0d8 <debug_panic>:
/* Aborts the user program, printing the source file name, line
   number, and function name, plus a user-specific message. */
void
debug_panic (const char *file, int line, const char *function,
             const char *message, ...)
{
 804a0d8:	83 ec 0c             	sub    $0xc,%esp
  va_list args;

  printf ("User process ABORT at %s:%d in %s(): ", file, line, function);
 804a0db:	ff 74 24 18          	pushl  0x18(%esp)
 804a0df:	ff 74 24 18          	pushl  0x18(%esp)
 804a0e3:	ff 74 24 18          	pushl  0x18(%esp)
 804a0e7:	68 e8 ad 04 08       	push   $0x804ade8
 804a0ec:	e8 4e ec ff ff       	call   8048d3f <printf>

  va_start (args, message);
 804a0f1:	8d 44 24 30          	lea    0x30(%esp),%eax
  vprintf (message, args);
 804a0f5:	83 c4 08             	add    $0x8,%esp
 804a0f8:	50                   	push   %eax
 804a0f9:	ff 74 24 28          	pushl  0x28(%esp)
 804a0fd:	e8 67 02 00 00       	call   804a369 <vprintf>
  printf ("\n");
 804a102:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
 804a109:	e8 c1 01 00 00       	call   804a2cf <putchar>
  va_end (args);

  debug_backtrace ();
 804a10e:	e8 88 02 00 00       	call   804a39b <debug_backtrace>
  
  exit (1);
 804a113:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 804a11a:	e8 20 00 00 00       	call   804a13f <exit>

0804a11f <halt>:
          retval;                                               \
        })

void
halt (void) 
{
 804a11f:	83 ec 0c             	sub    $0xc,%esp
  syscall0 (SYS_HALT);
 804a122:	6a 00                	push   $0x0
 804a124:	cd 30                	int    $0x30
 804a126:	83 c4 04             	add    $0x4,%esp
  NOT_REACHED ();
 804a129:	68 c4 ad 04 08       	push   $0x804adc4
 804a12e:	68 00 ac 04 08       	push   $0x804ac00
 804a133:	6a 44                	push   $0x44
 804a135:	68 2c b1 04 08       	push   $0x804b12c
 804a13a:	e8 99 ff ff ff       	call   804a0d8 <debug_panic>

0804a13f <exit>:
}

void
exit (int status)
{
 804a13f:	83 ec 0c             	sub    $0xc,%esp
  syscall1 (SYS_EXIT, status);
 804a142:	ff 74 24 10          	pushl  0x10(%esp)
 804a146:	6a 01                	push   $0x1
 804a148:	cd 30                	int    $0x30
 804a14a:	83 c4 08             	add    $0x8,%esp
  NOT_REACHED ();
 804a14d:	68 c4 ad 04 08       	push   $0x804adc4
 804a152:	68 f8 ab 04 08       	push   $0x804abf8
 804a157:	6a 4b                	push   $0x4b
 804a159:	68 2c b1 04 08       	push   $0x804b12c
 804a15e:	e8 75 ff ff ff       	call   804a0d8 <debug_panic>

0804a163 <exec>:
}

pid_t
exec (const char *file)
{
  return (pid_t) syscall1 (SYS_EXEC, file);
 804a163:	ff 74 24 04          	pushl  0x4(%esp)
 804a167:	6a 02                	push   $0x2
 804a169:	cd 30                	int    $0x30
 804a16b:	83 c4 08             	add    $0x8,%esp
}
 804a16e:	c3                   	ret    

0804a16f <wait>:

int
wait (pid_t pid)
{
  return syscall1 (SYS_WAIT, pid);
 804a16f:	ff 74 24 04          	pushl  0x4(%esp)
 804a173:	6a 03                	push   $0x3
 804a175:	cd 30                	int    $0x30
 804a177:	83 c4 08             	add    $0x8,%esp
}
 804a17a:	c3                   	ret    

0804a17b <create>:

bool
create (const char *file, unsigned initial_size)
{
  return syscall2 (SYS_CREATE, file, initial_size);
 804a17b:	ff 74 24 08          	pushl  0x8(%esp)
 804a17f:	ff 74 24 08          	pushl  0x8(%esp)
 804a183:	6a 04                	push   $0x4
 804a185:	cd 30                	int    $0x30
 804a187:	83 c4 0c             	add    $0xc,%esp
 804a18a:	85 c0                	test   %eax,%eax
 804a18c:	0f 95 c0             	setne  %al
}
 804a18f:	c3                   	ret    

0804a190 <remove>:

bool
remove (const char *file)
{
  return syscall1 (SYS_REMOVE, file);
 804a190:	ff 74 24 04          	pushl  0x4(%esp)
 804a194:	6a 05                	push   $0x5
 804a196:	cd 30                	int    $0x30
 804a198:	83 c4 08             	add    $0x8,%esp
 804a19b:	85 c0                	test   %eax,%eax
 804a19d:	0f 95 c0             	setne  %al
}
 804a1a0:	c3                   	ret    

0804a1a1 <open>:

int
open (const char *file)
{
  return syscall1 (SYS_OPEN, file);
 804a1a1:	ff 74 24 04          	pushl  0x4(%esp)
 804a1a5:	6a 06                	push   $0x6
 804a1a7:	cd 30                	int    $0x30
 804a1a9:	83 c4 08             	add    $0x8,%esp
}
 804a1ac:	c3                   	ret    

0804a1ad <filesize>:

int
filesize (int fd) 
{
  return syscall1 (SYS_FILESIZE, fd);
 804a1ad:	ff 74 24 04          	pushl  0x4(%esp)
 804a1b1:	6a 07                	push   $0x7
 804a1b3:	cd 30                	int    $0x30
 804a1b5:	83 c4 08             	add    $0x8,%esp
}
 804a1b8:	c3                   	ret    

0804a1b9 <read>:

int
read (int fd, void *buffer, unsigned size)
{
  return syscall3 (SYS_READ, fd, buffer, size);
 804a1b9:	ff 74 24 0c          	pushl  0xc(%esp)
 804a1bd:	ff 74 24 0c          	pushl  0xc(%esp)
 804a1c1:	ff 74 24 0c          	pushl  0xc(%esp)
 804a1c5:	6a 08                	push   $0x8
 804a1c7:	cd 30                	int    $0x30
 804a1c9:	83 c4 10             	add    $0x10,%esp
}
 804a1cc:	c3                   	ret    

0804a1cd <write>:

int
write (int fd, const void *buffer, unsigned size)
{
  return syscall3 (SYS_WRITE, fd, buffer, size);
 804a1cd:	ff 74 24 0c          	pushl  0xc(%esp)
 804a1d1:	ff 74 24 0c          	pushl  0xc(%esp)
 804a1d5:	ff 74 24 0c          	pushl  0xc(%esp)
 804a1d9:	6a 09                	push   $0x9
 804a1db:	cd 30                	int    $0x30
 804a1dd:	83 c4 10             	add    $0x10,%esp
}
 804a1e0:	c3                   	ret    

0804a1e1 <seek>:

void
seek (int fd, unsigned position) 
{
  syscall2 (SYS_SEEK, fd, position);
 804a1e1:	ff 74 24 08          	pushl  0x8(%esp)
 804a1e5:	ff 74 24 08          	pushl  0x8(%esp)
 804a1e9:	6a 0a                	push   $0xa
 804a1eb:	cd 30                	int    $0x30
 804a1ed:	83 c4 0c             	add    $0xc,%esp
 804a1f0:	c3                   	ret    

0804a1f1 <tell>:
}

unsigned
tell (int fd) 
{
  return syscall1 (SYS_TELL, fd);
 804a1f1:	ff 74 24 04          	pushl  0x4(%esp)
 804a1f5:	6a 0b                	push   $0xb
 804a1f7:	cd 30                	int    $0x30
 804a1f9:	83 c4 08             	add    $0x8,%esp
}
 804a1fc:	c3                   	ret    

0804a1fd <close>:

void
close (int fd)
{
  syscall1 (SYS_CLOSE, fd);
 804a1fd:	ff 74 24 04          	pushl  0x4(%esp)
 804a201:	6a 0c                	push   $0xc
 804a203:	cd 30                	int    $0x30
 804a205:	83 c4 08             	add    $0x8,%esp
 804a208:	c3                   	ret    

0804a209 <mmap>:
}

mapid_t
mmap (int fd, void *addr)
{
  return syscall2 (SYS_MMAP, fd, addr);
 804a209:	ff 74 24 08          	pushl  0x8(%esp)
 804a20d:	ff 74 24 08          	pushl  0x8(%esp)
 804a211:	6a 0d                	push   $0xd
 804a213:	cd 30                	int    $0x30
 804a215:	83 c4 0c             	add    $0xc,%esp
}
 804a218:	c3                   	ret    

0804a219 <munmap>:

void
munmap (mapid_t mapid)
{
  syscall1 (SYS_MUNMAP, mapid);
 804a219:	ff 74 24 04          	pushl  0x4(%esp)
 804a21d:	6a 0e                	push   $0xe
 804a21f:	cd 30                	int    $0x30
 804a221:	83 c4 08             	add    $0x8,%esp
 804a224:	c3                   	ret    

0804a225 <chdir>:
}

bool
chdir (const char *dir)
{
  return syscall1 (SYS_CHDIR, dir);
 804a225:	ff 74 24 04          	pushl  0x4(%esp)
 804a229:	6a 0f                	push   $0xf
 804a22b:	cd 30                	int    $0x30
 804a22d:	83 c4 08             	add    $0x8,%esp
 804a230:	85 c0                	test   %eax,%eax
 804a232:	0f 95 c0             	setne  %al
}
 804a235:	c3                   	ret    

0804a236 <mkdir>:

bool
mkdir (const char *dir)
{
  return syscall1 (SYS_MKDIR, dir);
 804a236:	ff 74 24 04          	pushl  0x4(%esp)
 804a23a:	6a 10                	push   $0x10
 804a23c:	cd 30                	int    $0x30
 804a23e:	83 c4 08             	add    $0x8,%esp
 804a241:	85 c0                	test   %eax,%eax
 804a243:	0f 95 c0             	setne  %al
}
 804a246:	c3                   	ret    

0804a247 <readdir>:

bool
readdir (int fd, char name[READDIR_MAX_LEN + 1]) 
{
  return syscall2 (SYS_READDIR, fd, name);
 804a247:	ff 74 24 08          	pushl  0x8(%esp)
 804a24b:	ff 74 24 08          	pushl  0x8(%esp)
 804a24f:	6a 11                	push   $0x11
 804a251:	cd 30                	int    $0x30
 804a253:	83 c4 0c             	add    $0xc,%esp
 804a256:	85 c0                	test   %eax,%eax
 804a258:	0f 95 c0             	setne  %al
}
 804a25b:	c3                   	ret    

0804a25c <isdir>:

bool
isdir (int fd) 
{
  return syscall1 (SYS_ISDIR, fd);
 804a25c:	ff 74 24 04          	pushl  0x4(%esp)
 804a260:	6a 12                	push   $0x12
 804a262:	cd 30                	int    $0x30
 804a264:	83 c4 08             	add    $0x8,%esp
 804a267:	85 c0                	test   %eax,%eax
 804a269:	0f 95 c0             	setne  %al
}
 804a26c:	c3                   	ret    

0804a26d <inumber>:

int
inumber (int fd) 
{
  return syscall1 (SYS_INUMBER, fd);
 804a26d:	ff 74 24 04          	pushl  0x4(%esp)
 804a271:	6a 13                	push   $0x13
 804a273:	cd 30                	int    $0x30
 804a275:	83 c4 08             	add    $0x8,%esp
}
 804a278:	c3                   	ret    

0804a279 <flush>:
}

/* Flushes the buffer in AUX. */
static void
flush (struct vhprintf_aux *aux)
{
 804a279:	53                   	push   %ebx
 804a27a:	83 ec 08             	sub    $0x8,%esp
 804a27d:	89 c3                	mov    %eax,%ebx
  if (aux->p > aux->buf)
 804a27f:	8b 40 40             	mov    0x40(%eax),%eax
 804a282:	39 d8                	cmp    %ebx,%eax
 804a284:	76 12                	jbe    804a298 <flush+0x1f>
    write (aux->handle, aux->buf, aux->p - aux->buf);
 804a286:	83 ec 04             	sub    $0x4,%esp
 804a289:	29 d8                	sub    %ebx,%eax
 804a28b:	50                   	push   %eax
 804a28c:	53                   	push   %ebx
 804a28d:	ff 73 48             	pushl  0x48(%ebx)
 804a290:	e8 38 ff ff ff       	call   804a1cd <write>
 804a295:	83 c4 10             	add    $0x10,%esp
  aux->p = aux->buf;
 804a298:	89 5b 40             	mov    %ebx,0x40(%ebx)
}
 804a29b:	83 c4 08             	add    $0x8,%esp
 804a29e:	5b                   	pop    %ebx
 804a29f:	c3                   	ret    

0804a2a0 <add_char>:

/* Adds C to the buffer in AUX, flushing it if the buffer fills
   up. */
static void
add_char (char c, void *aux_) 
{
 804a2a0:	53                   	push   %ebx
 804a2a1:	83 ec 08             	sub    $0x8,%esp
 804a2a4:	8b 5c 24 14          	mov    0x14(%esp),%ebx
  struct vhprintf_aux *aux = aux_;
  *aux->p++ = c;
 804a2a8:	8b 43 40             	mov    0x40(%ebx),%eax
 804a2ab:	8d 50 01             	lea    0x1(%eax),%edx
 804a2ae:	89 53 40             	mov    %edx,0x40(%ebx)
 804a2b1:	8b 54 24 10          	mov    0x10(%esp),%edx
 804a2b5:	88 10                	mov    %dl,(%eax)
  if (aux->p >= aux->buf + sizeof aux->buf)
 804a2b7:	8d 43 40             	lea    0x40(%ebx),%eax
 804a2ba:	39 43 40             	cmp    %eax,0x40(%ebx)
 804a2bd:	72 07                	jb     804a2c6 <add_char+0x26>
    flush (aux);
 804a2bf:	89 d8                	mov    %ebx,%eax
 804a2c1:	e8 b3 ff ff ff       	call   804a279 <flush>
  aux->char_cnt++;
 804a2c6:	83 43 44 01          	addl   $0x1,0x44(%ebx)
}
 804a2ca:	83 c4 08             	add    $0x8,%esp
 804a2cd:	5b                   	pop    %ebx
 804a2ce:	c3                   	ret    

0804a2cf <putchar>:
}

/* Writes C to the console. */
int
putchar (int c) 
{
 804a2cf:	53                   	push   %ebx
 804a2d0:	83 ec 1c             	sub    $0x1c,%esp
 804a2d3:	8b 5c 24 24          	mov    0x24(%esp),%ebx
  char c2 = c;
 804a2d7:	88 5c 24 13          	mov    %bl,0x13(%esp)
  write (STDOUT_FILENO, &c2, 1);
 804a2db:	6a 01                	push   $0x1
 804a2dd:	8d 44 24 17          	lea    0x17(%esp),%eax
 804a2e1:	50                   	push   %eax
 804a2e2:	6a 01                	push   $0x1
 804a2e4:	e8 e4 fe ff ff       	call   804a1cd <write>
  return c;
}
 804a2e9:	89 d8                	mov    %ebx,%eax
 804a2eb:	83 c4 28             	add    $0x28,%esp
 804a2ee:	5b                   	pop    %ebx
 804a2ef:	c3                   	ret    

0804a2f0 <puts>:

/* Writes string S to the console, followed by a new-line
   character. */
int
puts (const char *s) 
{
 804a2f0:	57                   	push   %edi
 804a2f1:	83 ec 0c             	sub    $0xc,%esp
 804a2f4:	8b 54 24 14          	mov    0x14(%esp),%edx
  write (STDOUT_FILENO, s, strlen (s));
 804a2f8:	b8 00 00 00 00       	mov    $0x0,%eax
 804a2fd:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
 804a302:	89 d7                	mov    %edx,%edi
 804a304:	f2 ae                	repnz scas %es:(%edi),%al
 804a306:	f7 d1                	not    %ecx
 804a308:	83 e9 01             	sub    $0x1,%ecx
 804a30b:	51                   	push   %ecx
 804a30c:	52                   	push   %edx
 804a30d:	6a 01                	push   $0x1
 804a30f:	e8 b9 fe ff ff       	call   804a1cd <write>
  putchar ('\n');
 804a314:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
 804a31b:	e8 af ff ff ff       	call   804a2cf <putchar>

  return 0;
}
 804a320:	b8 00 00 00 00       	mov    $0x0,%eax
 804a325:	83 c4 18             	add    $0x18,%esp
 804a328:	5f                   	pop    %edi
 804a329:	c3                   	ret    

0804a32a <vhprintf>:
/* Formats the printf() format specification FORMAT with
   arguments given in ARGS and writes the output to the given
   HANDLE. */
int
vhprintf (int handle, const char *format, va_list args) 
{
 804a32a:	53                   	push   %ebx
 804a32b:	83 ec 58             	sub    $0x58,%esp
  struct vhprintf_aux aux;
  aux.p = aux.buf;
 804a32e:	8d 5c 24 04          	lea    0x4(%esp),%ebx
 804a332:	89 5c 24 44          	mov    %ebx,0x44(%esp)
  aux.char_cnt = 0;
 804a336:	c7 44 24 48 00 00 00 	movl   $0x0,0x48(%esp)
 804a33d:	00 
  aux.handle = handle;
 804a33e:	8b 44 24 60          	mov    0x60(%esp),%eax
 804a342:	89 44 24 4c          	mov    %eax,0x4c(%esp)
  __vprintf (format, args, add_char, &aux);
 804a346:	53                   	push   %ebx
 804a347:	68 a0 a2 04 08       	push   $0x804a2a0
 804a34c:	ff 74 24 70          	pushl  0x70(%esp)
 804a350:	ff 74 24 70          	pushl  0x70(%esp)
 804a354:	e8 1b ea ff ff       	call   8048d74 <__vprintf>
  flush (&aux);
 804a359:	89 d8                	mov    %ebx,%eax
 804a35b:	e8 19 ff ff ff       	call   804a279 <flush>
  return aux.char_cnt;
}
 804a360:	8b 44 24 58          	mov    0x58(%esp),%eax
 804a364:	83 c4 68             	add    $0x68,%esp
 804a367:	5b                   	pop    %ebx
 804a368:	c3                   	ret    

0804a369 <vprintf>:

/* The standard vprintf() function,
   which is like printf() but uses a va_list. */
int
vprintf (const char *format, va_list args) 
{
 804a369:	83 ec 10             	sub    $0x10,%esp
  return vhprintf (STDOUT_FILENO, format, args);
 804a36c:	ff 74 24 18          	pushl  0x18(%esp)
 804a370:	ff 74 24 18          	pushl  0x18(%esp)
 804a374:	6a 01                	push   $0x1
 804a376:	e8 af ff ff ff       	call   804a32a <vhprintf>
}
 804a37b:	83 c4 1c             	add    $0x1c,%esp
 804a37e:	c3                   	ret    

0804a37f <hprintf>:

/* Like printf(), but writes output to the given HANDLE. */
int
hprintf (int handle, const char *format, ...) 
{
 804a37f:	83 ec 0c             	sub    $0xc,%esp
  va_list args;
  int retval;

  va_start (args, format);
 804a382:	8d 44 24 18          	lea    0x18(%esp),%eax
  retval = vhprintf (handle, format, args);
 804a386:	83 ec 04             	sub    $0x4,%esp
 804a389:	50                   	push   %eax
 804a38a:	ff 74 24 1c          	pushl  0x1c(%esp)
 804a38e:	ff 74 24 1c          	pushl  0x1c(%esp)
 804a392:	e8 93 ff ff ff       	call   804a32a <vhprintf>
  va_end (args);

  return retval;
}
 804a397:	83 c4 1c             	add    $0x1c,%esp
 804a39a:	c3                   	ret    

0804a39b <debug_backtrace>:
   each of the functions we are nested within.  gdb or addr2line
   may be applied to kernel.o to translate these into file names,
   line numbers, and function names.  */
void
debug_backtrace (void) 
{
 804a39b:	55                   	push   %ebp
 804a39c:	89 e5                	mov    %esp,%ebp
 804a39e:	53                   	push   %ebx
 804a39f:	83 ec 0c             	sub    $0xc,%esp
  static bool explained;
  void **frame;
  
  printf ("Call stack: %p", __builtin_return_address (0));
 804a3a2:	ff 75 04             	pushl  0x4(%ebp)
 804a3a5:	68 45 b1 04 08       	push   $0x804b145
 804a3aa:	e8 90 e9 ff ff       	call   8048d3f <printf>
  for (frame = __builtin_frame_address (1);
 804a3af:	8b 5d 00             	mov    0x0(%ebp),%ebx
 804a3b2:	83 c4 10             	add    $0x10,%esp
 804a3b5:	81 fb ff 0f 00 00    	cmp    $0xfff,%ebx
 804a3bb:	76 27                	jbe    804a3e4 <debug_backtrace+0x49>
       (uintptr_t) frame >= 0x1000 && frame[0] != NULL;
 804a3bd:	83 3b 00             	cmpl   $0x0,(%ebx)
 804a3c0:	74 22                	je     804a3e4 <debug_backtrace+0x49>
       frame = frame[0]) 
    printf (" %p", frame[1]);
 804a3c2:	83 ec 08             	sub    $0x8,%esp
 804a3c5:	ff 73 04             	pushl  0x4(%ebx)
 804a3c8:	68 50 b1 04 08       	push   $0x804b150
 804a3cd:	e8 6d e9 ff ff       	call   8048d3f <printf>
  void **frame;
  
  printf ("Call stack: %p", __builtin_return_address (0));
  for (frame = __builtin_frame_address (1);
       (uintptr_t) frame >= 0x1000 && frame[0] != NULL;
       frame = frame[0]) 
 804a3d2:	8b 1b                	mov    (%ebx),%ebx
{
  static bool explained;
  void **frame;
  
  printf ("Call stack: %p", __builtin_return_address (0));
  for (frame = __builtin_frame_address (1);
 804a3d4:	83 c4 10             	add    $0x10,%esp
 804a3d7:	81 fb ff 0f 00 00    	cmp    $0xfff,%ebx
 804a3dd:	76 05                	jbe    804a3e4 <debug_backtrace+0x49>
       (uintptr_t) frame >= 0x1000 && frame[0] != NULL;
 804a3df:	83 3b 00             	cmpl   $0x0,(%ebx)
 804a3e2:	75 de                	jne    804a3c2 <debug_backtrace+0x27>
       frame = frame[0]) 
    printf (" %p", frame[1]);
  printf (".\n");
 804a3e4:	83 ec 0c             	sub    $0xc,%esp
 804a3e7:	68 56 b0 04 08       	push   $0x804b056
 804a3ec:	e8 ff fe ff ff       	call   804a2f0 <puts>

  if (!explained) 
 804a3f1:	83 c4 10             	add    $0x10,%esp
 804a3f4:	80 3d 20 cf 04 08 00 	cmpb   $0x0,0x804cf20
 804a3fb:	75 17                	jne    804a414 <debug_backtrace+0x79>
    {
      explained = true;
 804a3fd:	c6 05 20 cf 04 08 01 	movb   $0x1,0x804cf20
      printf ("The `backtrace' program can make call stacks useful.\n"
 804a404:	83 ec 0c             	sub    $0xc,%esp
 804a407:	68 10 ae 04 08       	push   $0x804ae10
 804a40c:	e8 df fe ff ff       	call   804a2f0 <puts>
 804a411:	83 c4 10             	add    $0x10,%esp
              "Read \"Backtraces\" in the \"Debugging Tools\" chapter\n"
              "of the Pintos documentation for more information.\n");
    }
}
 804a414:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 804a417:	c9                   	leave  
 804a418:	c3                   	ret    
